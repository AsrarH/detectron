[12/30 02:18:09] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 02:18:10] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 02:18:10] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 02:18:10] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 02:18:10] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DENSEPOSE_ON: true
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_DENSEPOSE_HEAD:
    CONV_HEAD_DIM: 512
    CONV_HEAD_KERNEL: 3
    DECONV_KERNEL: 4
    FG_IOU_THRESHOLD: 0.7
    HEATMAP_SIZE: 56
    INDEX_WEIGHTS: 2.0
    NAME: ''
    NUM_PATCHES: 24
    NUM_STACKED_CONVS: 8
    PART_WEIGHTS: 0.3
    POINT_REGRESSION_WEIGHTS: 0.1
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 2
    POOLER_TYPE: ROIAlignV2
    UP_SCALE: 2
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 02:18:10] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 02:18:10] d2.utils.env INFO: Using a generated random seed 14033204
[12/30 02:21:12] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 02:21:13] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 02:21:13] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 02:21:13] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 02:21:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 02:21:13] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 02:21:13] d2.utils.env INFO: Using a generated random seed 16524153
[12/30 02:21:13] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 02:21:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:17:58] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:18:00] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:18:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:18:00] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:18:00] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:18:00] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:18:00] d2.utils.env INFO: Using a generated random seed 3639819
[12/30 03:18:01] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:18:01] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:21:51] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:21:52] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:21:52] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:21:52] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:21:52] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:21:52] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:21:52] d2.utils.env INFO: Using a generated random seed 55521535
[12/30 03:21:52] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:21:53] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:22:32] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:22:34] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:22:34] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:22:34] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:22:34] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:22:34] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:22:34] d2.utils.env INFO: Using a generated random seed 37307504
[12/30 03:22:34] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:22:34] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:24:39] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:24:40] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:24:40] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:24:40] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:24:40] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:24:40] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:24:40] d2.utils.env INFO: Using a generated random seed 43891506
[12/30 03:24:41] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:24:41] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:30:58] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:31:00] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:31:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:31:00] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:31:00] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:31:00] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:31:00] d2.utils.env INFO: Using a generated random seed 3321620
[12/30 03:31:00] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:31:00] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:31:03] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:31:03] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:31:03] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:31:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:31:03] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:31:04] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:31:07] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:31:07] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:31:07] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:31:07] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:31:07] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:31:07] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:32:33] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:32:34] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:32:34] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:32:34] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:32:34] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:32:34] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:32:35] d2.utils.env INFO: Using a generated random seed 38075681
[12/30 03:32:35] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:32:35] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:32:38] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:32:38] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:32:38] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:32:38] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:32:38] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:32:38] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:32:41] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:32:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:32:41] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:32:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:32:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:32:42] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:32:42] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/30 03:32:42] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/30 03:32:42] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/30 03:32:42] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/30 03:32:42] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/30 03:32:42] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/30 03:32:42] d2.engine.train_loop INFO: Starting training from iteration 0
[12/30 03:32:51] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 449, in forward
    x = stage(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 195, in forward
    out = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 110.00 MiB (GPU 0; 23.70 GiB total capacity; 1.61 GiB already allocated; 34.81 MiB free; 1.67 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/30 03:32:51] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/30 03:32:51] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 1646M
[12/30 03:33:42] detectron2 INFO: Rank of current process: 0. World size: 3
[12/30 03:33:44] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:33:44] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=3, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:33:44] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:33:44] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:33:44] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:33:44] d2.utils.env INFO: Using a generated random seed 47379529
[12/30 03:33:44] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:33:44] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:33:47] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:33:47] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:33:47] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:33:47] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:33:47] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:33:47] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:37:11] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:37:12] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:37:12] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:37:12] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:37:12] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:37:12] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:37:12] d2.utils.env INFO: Using a generated random seed 15527985
[12/30 03:37:12] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:37:13] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:37:15] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:37:15] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:37:15] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:37:15] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:37:15] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:37:16] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:37:18] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:37:18] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:37:18] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:37:18] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:37:18] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:37:19] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:37:19] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/30 03:37:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/30 03:37:19] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/30 03:37:19] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/30 03:37:19] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/30 03:37:19] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/30 03:37:19] d2.engine.train_loop INFO: Starting training from iteration 0
[12/30 03:37:28] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 358, in forward
    x = F.max_pool2d(x, kernel_size=3, stride=2, padding=1)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/_jit_internal.py", line 485, in fn
    return if_false(*args, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/functional.py", line 782, in _max_pool2d
    return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 252.00 MiB (GPU 0; 23.70 GiB total capacity; 1.45 GiB already allocated; 214.81 MiB free; 1.49 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/30 03:37:28] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/30 03:37:28] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 1488M
[12/30 03:40:55] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:40:56] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:40:56] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:40:56] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:40:56] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:40:56] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:40:56] d2.utils.env INFO: Using a generated random seed 59777598
[12/30 03:40:57] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:40:57] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:40:59] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:40:59] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:40:59] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:41:00] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:41:00] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:41:00] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:41:03] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:41:03] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:41:03] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:41:03] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:41:03] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:41:03] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:41:03] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/30 03:41:03] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/30 03:41:03] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/30 03:41:03] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/30 03:41:03] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/30 03:41:03] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/30 03:41:03] d2.engine.train_loop INFO: Starting training from iteration 0
[12/30 03:41:12] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 449, in forward
    x = stage(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 195, in forward
    out = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 112.00 MiB (GPU 0; 23.70 GiB total capacity; 1.64 GiB already allocated; 10.81 MiB free; 1.69 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/30 03:41:12] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/30 03:41:12] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 1678M
[12/30 03:46:38] detectron2 INFO: Rank of current process: 0. World size: 2
[12/30 03:46:39] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/30 03:46:39] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/30 03:46:39] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/30 03:46:39] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/30 03:46:39] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/30 03:46:39] d2.utils.env INFO: Using a generated random seed 43067580
[12/30 03:46:40] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/30 03:46:40] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/30 03:46:43] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:46:43] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:46:43] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:46:43] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:46:43] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:46:43] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:46:46] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/30 03:46:46] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/30 03:46:46] d2.data.build INFO: Using training sampler TrainingSampler
[12/30 03:46:46] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/30 03:46:46] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/30 03:46:46] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/30 03:46:46] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/30 03:46:46] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/30 03:46:46] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/30 03:46:46] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/30 03:46:46] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/30 03:46:46] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/30 03:46:46] d2.engine.train_loop INFO: Starting training from iteration 0
[12/30 03:46:55] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 449, in forward
    x = stage(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 198, in forward
    out = self.conv2(out)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 94.00 MiB (GPU 0; 23.70 GiB total capacity; 1.59 GiB already allocated; 10.81 MiB free; 1.69 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/30 03:46:55] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/30 03:46:55] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 1626M
[12/31 02:03:21] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:03:23] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:03:23] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:03:23] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:03:23] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:03:23] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:03:23] d2.utils.env INFO: Using a generated random seed 25659983
[12/31 02:03:23] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:03:24] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:03:29] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:03:29] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:03:29] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:03:29] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:03:29] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:03:30] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:03:34] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:03:34] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:03:34] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:03:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:03:34] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:03:34] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:03:34] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/31 02:03:34] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/31 02:03:35] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/31 02:03:35] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/31 02:03:35] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/31 02:03:35] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/31 02:03:35] d2.engine.train_loop INFO: Starting training from iteration 0
[12/31 02:03:50] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
RuntimeError: Unable to find a valid cuDNN algorithm to run convolution
[12/31 02:03:50] d2.engine.hooks INFO: Total training time: 0:00:14 (0:00:00 on hooks)
[12/31 02:03:50] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 829M
[12/31 02:07:28] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:07:30] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:07:30] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:07:30] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:07:30] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:07:30] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:07:30] d2.utils.env INFO: Using a generated random seed 32810566
[12/31 02:07:30] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:07:31] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:07:34] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:07:34] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:07:34] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:07:34] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:07:34] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:07:34] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:07:37] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:07:37] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:07:37] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:07:37] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:07:37] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:07:37] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:07:37] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/31 02:07:37] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/31 02:07:38] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/31 02:07:38] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/31 02:07:38] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/31 02:07:38] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/31 02:07:38] d2.engine.train_loop INFO: Starting training from iteration 0
[12/31 02:07:47] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 384.00 MiB (GPU 0; 23.70 GiB total capacity; 722.97 MiB already allocated; 129.81 MiB free; 816.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/31 02:07:47] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/31 02:07:47] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 724M
[12/31 02:11:34] detectron2 INFO: Rank of current process: 0. World size: 8
[12/31 02:11:36] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:11:36] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=8, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:11:36] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:11:36] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:11:36] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:11:36] d2.utils.env INFO: Using a generated random seed 39132848
[12/31 02:11:37] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:11:37] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:11:40] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:11:40] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:11:40] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:11:40] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:11:40] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:11:40] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:11:43] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:11:43] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:11:43] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:11:43] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:11:43] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:11:43] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:11:44] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/31 02:11:44] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/31 02:11:44] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/31 02:11:44] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/31 02:11:44] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/31 02:11:44] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/31 02:11:44] d2.engine.train_loop INFO: Starting training from iteration 0
[12/31 02:11:53] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 449, in forward
    x = stage(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 82.00 MiB (GPU 0; 23.70 GiB total capacity; 740.97 MiB already allocated; 49.81 MiB free; 896.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[12/31 02:11:53] d2.engine.hooks INFO: Total training time: 0:00:09 (0:00:00 on hooks)
[12/31 02:11:53] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 788M
[12/31 02:12:39] detectron2 INFO: Rank of current process: 0. World size: 6
[12/31 02:12:41] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:12:41] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=6, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:12:41] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:12:41] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:12:41] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:12:41] d2.utils.env INFO: Using a generated random seed 44029525
[12/31 02:12:42] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:12:42] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:12:45] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:12:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:12:45] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:12:45] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:12:45] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:12:45] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:15:20] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:15:22] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:15:22] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:15:22] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:15:22] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:15:22] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:15:22] d2.utils.env INFO: Using a generated random seed 24638582
[12/31 02:15:22] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:15:22] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:15:25] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:15:25] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:15:25] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:15:25] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:15:25] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:15:25] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:15:28] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:15:28] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:15:28] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:15:28] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:15:28] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:15:28] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:15:29] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/31 02:15:29] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/31 02:15:29] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/31 02:15:29] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/31 02:15:29] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/31 02:15:29] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/31 02:15:29] d2.engine.train_loop INFO: Starting training from iteration 0
[12/31 02:15:37] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
RuntimeError: Unable to find a valid cuDNN algorithm to run convolution
[12/31 02:15:37] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/31 02:15:37] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 803M
[12/31 02:16:12] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:16:13] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[12/31 02:16:13] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:16:13] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:16:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:16:13] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:16:13] d2.utils.env INFO: Using a generated random seed 16368811
[12/31 02:16:14] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:16:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:16:17] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:16:17] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:16:17] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:16:17] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:16:17] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:16:17] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:16:20] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:16:20] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:16:20] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:16:20] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:16:20] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:16:21] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:16:21] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[12/31 02:16:21] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[12/31 02:16:21] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[12/31 02:16:21] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[12/31 02:16:21] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[12/31 02:16:21] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[12/31 02:16:21] d2.engine.train_loop INFO: Starting training from iteration 0
[12/31 02:16:30] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
RuntimeError: Unable to find a valid cuDNN algorithm to run convolution
[12/31 02:16:30] d2.engine.hooks INFO: Total training time: 0:00:08 (0:00:00 on hooks)
[12/31 02:16:30] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 833M
[12/31 02:23:58] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:24:00] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 02:24:00] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:24:00] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:24:00] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:24:00] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:24:01] d2.utils.env INFO: Using a generated random seed 3673165
[12/31 02:24:01] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:24:01] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:24:05] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:24:05] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:24:05] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:24:05] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:24:05] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:24:05] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:24:09] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:24:09] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:24:09] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:24:09] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:24:09] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:24:09] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:25:14] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 02:25:16] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 02:25:16] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 02:25:16] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 02:25:16] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 02:25:16] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 02:25:17] d2.utils.env INFO: Using a generated random seed 19654715
[12/31 02:25:17] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 02:25:17] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 02:25:20] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:25:20] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:25:20] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:25:20] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:25:20] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:25:21] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 02:25:24] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 02:25:24] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 02:25:24] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 02:25:24] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 02:25:24] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 02:25:24] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:31:10] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 22:31:12] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 22:31:12] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 22:31:12] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 22:31:12] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 22:31:12] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 22:31:13] d2.utils.env INFO: Using a generated random seed 13962358
[12/31 22:31:13] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 22:31:13] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 22:31:17] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:31:17] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:31:17] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:31:17] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:31:17] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:31:18] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:31:21] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:31:21] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:31:21] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:31:21] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:31:21] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:31:22] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:33:29] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 22:33:32] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 22:33:32] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 22:33:32] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 22:33:32] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 22:33:32] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 22:33:32] d2.utils.env INFO: Using a generated random seed 33368800
[12/31 22:33:32] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 22:33:33] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 22:33:36] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:33:36] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:33:36] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:33:36] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:33:36] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:33:36] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:33:39] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:33:39] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:33:39] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:33:39] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:33:39] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:33:39] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:34:10] detectron2 INFO: Rank of current process: 0. World size: 8
[12/31 22:34:12] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 22:34:12] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=8, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 22:34:12] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 22:34:12] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 22:34:12] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 22:34:13] d2.utils.env INFO: Using a generated random seed 14060950
[12/31 22:34:13] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 22:34:13] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 22:34:16] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:34:16] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:34:16] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:34:18] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:34:18] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:34:18] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 22:34:22] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 22:34:22] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 22:34:22] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 22:34:22] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 22:34:22] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 22:34:22] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 23:40:39] detectron2 INFO: Rank of current process: 0. World size: 2
[12/31 23:40:41] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.8.10 (default, Mar 15 2022, 12:22:08) [GCC 9.4.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.9.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  7.0.0
torchvision             0.10.0+cu111 @/shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.8/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[12/31 23:40:41] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', dist_url='tcp://127.0.0.1:52046', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'], resume=False)
[12/31 23:40:41] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[12/31 23:40:41] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[12/31 23:40:41] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[12/31 23:40:41] d2.utils.env INFO: Using a generated random seed 44554295
[12/31 23:40:42] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[12/31 23:40:42] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[12/31 23:40:45] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 23:40:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 23:40:45] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 23:40:45] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 23:40:45] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 23:40:45] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[12/31 23:40:48] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[12/31 23:40:48] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[12/31 23:40:48] d2.data.build INFO: Using training sampler TrainingSampler
[12/31 23:40:48] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[12/31 23:40:48] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[12/31 23:40:48] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:48:31] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 00:48:33] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 00:48:33] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 00:48:33] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 00:48:33] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 00:48:33] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 00:48:33] d2.utils.env INFO: Using a generated random seed 34327151
[01/01 00:48:34] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 00:48:34] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 00:48:37] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:48:37] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:48:37] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:48:37] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:48:37] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:48:38] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:48:41] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:48:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:48:41] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:48:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:48:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:48:41] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:49:37] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 00:49:39] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 00:49:39] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 00:49:39] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 00:49:39] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 00:49:39] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 00:49:39] d2.utils.env INFO: Using a generated random seed 40257127
[01/01 00:49:40] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 00:49:40] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 00:49:43] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:49:43] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:49:43] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:49:43] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:49:43] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:49:43] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:49:46] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:49:46] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:49:46] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:49:46] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:49:46] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:49:47] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:49:47] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 00:49:47] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 00:49:47] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 00:49:47] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 00:49:47] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 00:49:47] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 00:49:47] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 00:50:31] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 418.00 MiB (GPU 0; 23.70 GiB total capacity; 763.90 MiB already allocated; 143.81 MiB free; 802.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 00:50:31] d2.engine.hooks INFO: Total training time: 0:00:43 (0:00:00 on hooks)
[01/01 00:50:31] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 766M
[01/01 00:56:45] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 00:56:47] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6,7     NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 00:56:47] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 00:56:47] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 00:56:47] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 00:56:47] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 00:56:47] d2.utils.env INFO: Using a generated random seed 48098938
[01/01 00:56:47] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 00:56:47] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 00:56:51] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:56:51] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:56:51] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:56:51] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:56:51] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:56:51] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:56:54] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:56:54] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:56:54] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:56:54] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:56:54] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:56:55] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:56:55] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 00:56:55] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 00:56:55] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 00:56:55] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 00:56:55] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 00:56:55] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 00:56:55] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 00:57:41] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 158, in forward
    features = self.backbone(images.tensor)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 445, in forward
    x = self.stem(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 356, in forward
    x = self.conv1(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 418.00 MiB (GPU 0; 23.70 GiB total capacity; 763.67 MiB already allocated; 143.81 MiB free; 802.00 MiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 00:57:41] d2.engine.hooks INFO: Total training time: 0:00:45 (0:00:00 on hooks)
[01/01 00:57:41] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 766M
[01/01 00:59:17] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 00:59:19] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 00:59:19] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 00:59:19] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 00:59:19] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 00:59:19] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 00:59:19] d2.utils.env INFO: Using a generated random seed 20603391
[01/01 00:59:20] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 00:59:20] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 00:59:23] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:59:23] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:59:23] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:59:23] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:59:23] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:59:23] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:59:26] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 00:59:26] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 00:59:26] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 00:59:26] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 00:59:26] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 00:59:27] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 00:59:27] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 00:59:27] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 00:59:27] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 00:59:27] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 00:59:27] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 00:59:27] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 00:59:27] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:00:12] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 19.06 GiB already allocated; 1.48 GiB free; 20.85 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:00:12] d2.engine.hooks INFO: Total training time: 0:00:44 (0:00:00 on hooks)
[01/01 01:00:12] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 19918M
[01/01 01:01:11] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:01:13] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:01:13] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:01:13] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:01:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:01:13] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:01:13] d2.utils.env INFO: Using a generated random seed 14741443
[01/01 01:01:14] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:01:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:01:17] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:01:17] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:01:17] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:01:17] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:01:17] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:01:17] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:01:20] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:01:20] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:01:20] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:01:20] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:01:20] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:01:21] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:01:21] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:01:21] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:01:21] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:01:21] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:01:21] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:01:21] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:01:21] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:02:05] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 21.08 GiB already allocated; 416.81 MiB free; 21.93 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:02:05] d2.engine.hooks INFO: Total training time: 0:00:43 (0:00:00 on hooks)
[01/01 01:02:05] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 21986M
[01/01 01:05:09] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:05:11] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:05:11] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:05:11] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:05:11] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:05:11] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:05:11] d2.utils.env INFO: Using a generated random seed 12718003
[01/01 01:05:12] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:05:12] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:05:15] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:05:15] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:05:15] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:05:15] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:05:15] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:05:15] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:05:19] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:05:19] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:05:19] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:05:19] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:05:19] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:05:19] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:05:19] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:05:19] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:05:19] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:05:19] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:05:19] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:05:19] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:05:19] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:06:03] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 21.11 GiB already allocated; 394.81 MiB free; 21.95 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:06:03] d2.engine.hooks INFO: Total training time: 0:00:43 (0:00:00 on hooks)
[01/01 01:06:03] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 22011M
[01/01 01:06:51] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:06:53] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:06:53] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:06:53] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:06:53] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:06:53] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:06:53] d2.utils.env INFO: Using a generated random seed 55065135
[01/01 01:06:54] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:06:54] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:06:57] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:06:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:06:57] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:06:57] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:06:57] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:06:58] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:07:01] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:07:01] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:07:01] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:07:01] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:07:01] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:07:01] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:07:01] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:07:01] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:07:02] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:07:02] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:07:02] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:07:02] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:07:02] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:07:47] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 201, in forward
    out = self.conv3(out)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 20.47 GiB already allocated; 1.36 GiB free; 20.97 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:07:47] d2.engine.hooks INFO: Total training time: 0:00:45 (0:00:00 on hooks)
[01/01 01:07:47] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 20958M
[01/01 01:08:34] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:08:36] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:08:36] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:08:36] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:08:36] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:08:36] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:08:36] d2.utils.env INFO: Using a generated random seed 38114354
[01/01 01:08:37] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:08:37] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:08:41] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:08:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:08:41] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:08:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:08:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:08:41] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:08:44] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:08:44] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:08:44] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:08:44] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:08:44] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:08:44] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:08:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:08:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:08:45] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:08:45] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:08:45] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:08:45] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:08:45] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:09:29] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 19.68 GiB already allocated; 958.81 MiB free; 21.40 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:09:29] d2.engine.hooks INFO: Total training time: 0:00:44 (0:00:00 on hooks)
[01/01 01:09:29] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 20545M
[01/01 01:11:36] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:11:37] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:11:37] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:11:37] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:11:37] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:11:37] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:11:37] d2.utils.env INFO: Using a generated random seed 39278508
[01/01 01:11:38] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:11:38] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:11:41] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:11:41] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:11:41] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:11:41] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:11:41] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:11:42] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:11:45] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:11:45] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:11:45] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:11:45] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:11:45] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:11:45] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:11:45] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:11:45] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:11:46] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:11:46] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:11:46] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:11:46] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:11:46] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:12:31] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 201, in forward
    out = self.conv3(out)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 117, in forward
    x = self.norm(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 752, in forward
    return sync_batch_norm.apply(
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/_functions.py", line 101, in forward
    return torch.batch_norm_elemt(input, weight, bias, mean, invstd, eps)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 20.46 GiB already allocated; 1.36 GiB free; 20.97 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:12:31] d2.engine.hooks INFO: Total training time: 0:00:44 (0:00:00 on hooks)
[01/01 01:12:31] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 20955M
[01/01 01:17:11] detectron2 INFO: Rank of current process: 0. World size: 2
[01/01 01:17:13] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1                 NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:17:13] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=2, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:17:13] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:17:13] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:17:13] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:17:13] d2.utils.env INFO: Using a generated random seed 15255977
[01/01 01:17:14] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:17:14] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:17:17] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:17:17] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:17:17] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:17:17] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:17:17] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:17:18] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:17:21] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:17:21] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:17:21] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:17:21] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:17:21] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:17:21] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:17:21] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 01:17:21] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 01:17:21] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 01:17:21] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 01:17:21] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 01:17:21] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 01:17:21] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 01:18:05] d2.engine.train_loop ERROR: Exception during training:
Traceback (most recent call last):
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 149, in train
    self.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/defaults.py", line 494, in run_step
    self._trainer.run_step()
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/engine/train_loop.py", line 274, in run_step
    loss_dict = self.model(data)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1040, in forward
    output = self._run_ddp_forward(*inputs, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/parallel/distributed.py", line 1000, in _run_ddp_forward
    return module_to_run(*inputs[0], **kwargs[0])
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/meta_arch/rcnn.py", line 167, in forward
    _, detector_losses = self.roi_heads(images, features, proposals, gt_instances)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 477, in forward
    box_features = self._shared_roi_transform(
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/roi_heads/roi_heads.py", line 457, in _shared_roi_transform
    return self.res5(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/modeling/backbone/resnet.py", line 204, in forward
    shortcut = self.shortcut(x)
  File "/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2/layers/wrappers.py", line 113, in forward
    x = F.conv2d(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.53 GiB (GPU 0; 23.70 GiB total capacity; 20.66 GiB already allocated; 204.81 MiB free; 22.14 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
[01/01 01:18:05] d2.engine.hooks INFO: Total training time: 0:00:43 (0:00:00 on hooks)
[01/01 01:18:05] d2.utils.events INFO:  iter: 0    lr: N/A  max_mem: 21158M
[01/01 01:24:12] detectron2 INFO: Rank of current process: 0. World size: 7
[01/01 01:24:15] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6       NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:24:15] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=7, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:24:15] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:24:15] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:24:15] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:24:15] d2.utils.env INFO: Using a generated random seed 17208983
[01/01 01:24:16] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:24:16] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:24:19] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:24:19] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:24:19] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:24:19] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:24:19] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:24:20] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 01:27:15] detectron2 INFO: Rank of current process: 0. World size: 7
[01/01 01:27:17] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6       NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 01:27:17] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=7, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 01:27:17] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 01:27:17] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 01:27:17] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 01:27:17] d2.utils.env INFO: Using a generated random seed 19777540
[01/01 01:27:18] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 01:27:18] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 01:27:22] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 01:27:22] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 01:27:22] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 01:27:22] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 01:27:22] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 01:27:22] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 02:05:48] detectron2 INFO: Rank of current process: 0. World size: 7
[01/01 02:05:50] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6       NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 02:05:50] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=7, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 02:05:50] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 02:05:50] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 02:05:50] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 02:05:51] d2.utils.env INFO: Using a generated random seed 54105140
[01/01 02:05:51] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 02:05:52] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 02:05:55] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 02:05:55] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 02:05:55] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 02:05:55] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 02:05:55] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 02:05:56] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 02:07:42] detectron2 INFO: Rank of current process: 0. World size: 7
[01/01 02:07:45] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6       NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 02:07:45] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=7, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 02:07:45] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 02:07:45] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 02:07:45] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 02:07:45] d2.utils.env INFO: Using a generated random seed 48247391
[01/01 02:07:45] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 02:07:46] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 02:07:49] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 02:07:49] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 02:07:49] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 02:07:49] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 02:07:49] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 02:07:50] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 02:08:23] detectron2 INFO: Rank of current process: 0. World size: 6
[01/01 02:08:26] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5,6       NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 02:08:26] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 02:08:26] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 02:08:26] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 02:08:26] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 02:08:26] d2.utils.env INFO: Using a generated random seed 29556310
[01/01 02:08:27] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 02:08:27] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 02:08:30] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 02:08:30] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 02:08:30] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 02:08:30] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 02:08:30] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 02:08:31] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 02:08:35] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 02:08:35] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 02:08:35] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 02:08:35] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 02:08:35] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 02:08:35] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 02:08:35] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 02:08:35] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 02:08:36] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 02:08:36] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 02:08:36] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 02:08:36] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 02:08:36] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 02:09:40] d2.utils.events INFO:  eta: 4:51:09  iter: 19  total_loss: 3.962  loss_cls: 3.034  loss_box_reg: 0.1142  loss_rpn_cls: 0.6901  loss_rpn_loc: 0.1406  time: 0.7401  data_time: 2.3811  lr: 0.0038162  max_mem: 9616M
[01/01 02:09:54] d2.utils.events INFO:  eta: 4:46:00  iter: 39  total_loss: 3.317  loss_cls: 2.303  loss_box_reg: 0.143  loss_rpn_cls: 0.6729  loss_rpn_loc: 0.1487  time: 0.7270  data_time: 0.0232  lr: 0.0078122  max_mem: 9616M
[01/01 02:10:09] d2.utils.events INFO:  eta: 4:45:45  iter: 59  total_loss: 1.784  loss_cls: 0.8448  loss_box_reg: 0.1286  loss_rpn_cls: 0.6256  loss_rpn_loc: 0.1261  time: 0.7329  data_time: 0.0252  lr: 0.011808  max_mem: 9616M
[01/01 02:10:24] d2.utils.events INFO:  eta: 4:45:54  iter: 79  total_loss: 0.9718  loss_cls: 0.1789  loss_box_reg: 0.1116  loss_rpn_cls: 0.5182  loss_rpn_loc: 0.1613  time: 0.7320  data_time: 0.0177  lr: 0.015804  max_mem: 9616M
[01/01 02:10:38] d2.utils.events INFO:  eta: 4:45:21  iter: 99  total_loss: 0.8305  loss_cls: 0.1356  loss_box_reg: 0.1179  loss_rpn_cls: 0.383  loss_rpn_loc: 0.1918  time: 0.7314  data_time: 0.0159  lr: 0.0198  max_mem: 9616M
[01/01 02:10:53] d2.utils.events INFO:  eta: 4:46:29  iter: 119  total_loss: 0.8771  loss_cls: 0.1966  loss_box_reg: 0.1616  loss_rpn_cls: 0.3443  loss_rpn_loc: 0.1576  time: 0.7332  data_time: 0.0142  lr: 0.02  max_mem: 9616M
[01/01 02:11:08] d2.utils.events INFO:  eta: 4:47:34  iter: 139  total_loss: 0.8315  loss_cls: 0.1915  loss_box_reg: 0.1628  loss_rpn_cls: 0.3382  loss_rpn_loc: 0.151  time: 0.7336  data_time: 0.0216  lr: 0.02  max_mem: 9616M
[01/01 02:11:22] d2.utils.events INFO:  eta: 4:47:02  iter: 159  total_loss: 0.8119  loss_cls: 0.193  loss_box_reg: 0.1809  loss_rpn_cls: 0.2914  loss_rpn_loc: 0.1596  time: 0.7332  data_time: 0.0192  lr: 0.02  max_mem: 9679M
[01/01 02:11:37] d2.utils.events INFO:  eta: 4:47:11  iter: 179  total_loss: 0.7781  loss_cls: 0.1838  loss_box_reg: 0.185  loss_rpn_cls: 0.2469  loss_rpn_loc: 0.1485  time: 0.7356  data_time: 0.0125  lr: 0.02  max_mem: 9679M
[01/01 02:11:52] d2.utils.events INFO:  eta: 4:46:18  iter: 199  total_loss: 0.8665  loss_cls: 0.2182  loss_box_reg: 0.2248  loss_rpn_cls: 0.2169  loss_rpn_loc: 0.1753  time: 0.7337  data_time: 0.0182  lr: 0.02  max_mem: 9875M
[01/01 02:12:07] d2.utils.events INFO:  eta: 4:46:19  iter: 219  total_loss: 0.7205  loss_cls: 0.1823  loss_box_reg: 0.191  loss_rpn_cls: 0.207  loss_rpn_loc: 0.1469  time: 0.7340  data_time: 0.0201  lr: 0.02  max_mem: 9875M
[01/01 02:12:21] d2.utils.events INFO:  eta: 4:45:50  iter: 239  total_loss: 0.7053  loss_cls: 0.1678  loss_box_reg: 0.1932  loss_rpn_cls: 0.1847  loss_rpn_loc: 0.1445  time: 0.7344  data_time: 0.0232  lr: 0.02  max_mem: 9875M
[01/01 02:12:36] d2.utils.events INFO:  eta: 4:46:26  iter: 259  total_loss: 0.756  loss_cls: 0.172  loss_box_reg: 0.2165  loss_rpn_cls: 0.1939  loss_rpn_loc: 0.1554  time: 0.7357  data_time: 0.0233  lr: 0.02  max_mem: 9914M
[01/01 02:12:51] d2.utils.events INFO:  eta: 4:46:12  iter: 279  total_loss: 0.6617  loss_cls: 0.1546  loss_box_reg: 0.1911  loss_rpn_cls: 0.1728  loss_rpn_loc: 0.1493  time: 0.7355  data_time: 0.0200  lr: 0.02  max_mem: 9914M
[01/01 02:13:05] d2.utils.events INFO:  eta: 4:45:06  iter: 299  total_loss: 0.717  loss_cls: 0.1681  loss_box_reg: 0.2053  loss_rpn_cls: 0.1753  loss_rpn_loc: 0.1698  time: 0.7343  data_time: 0.0173  lr: 0.02  max_mem: 9914M
[01/01 02:13:20] d2.utils.events INFO:  eta: 4:44:44  iter: 319  total_loss: 0.7091  loss_cls: 0.166  loss_box_reg: 0.1983  loss_rpn_cls: 0.1773  loss_rpn_loc: 0.1697  time: 0.7337  data_time: 0.0259  lr: 0.02  max_mem: 9914M
[01/01 02:13:35] d2.utils.events INFO:  eta: 4:44:37  iter: 339  total_loss: 0.7451  loss_cls: 0.1854  loss_box_reg: 0.2127  loss_rpn_cls: 0.1827  loss_rpn_loc: 0.1692  time: 0.7335  data_time: 0.0212  lr: 0.02  max_mem: 9914M
[01/01 02:13:49] d2.utils.events INFO:  eta: 4:44:23  iter: 359  total_loss: 0.6984  loss_cls: 0.164  loss_box_reg: 0.2118  loss_rpn_cls: 0.1745  loss_rpn_loc: 0.1558  time: 0.7329  data_time: 0.0185  lr: 0.02  max_mem: 9914M
[01/01 02:14:03] d2.utils.events INFO:  eta: 4:43:39  iter: 379  total_loss: 0.6422  loss_cls: 0.1534  loss_box_reg: 0.204  loss_rpn_cls: 0.159  loss_rpn_loc: 0.129  time: 0.7318  data_time: 0.0200  lr: 0.02  max_mem: 9914M
[01/01 02:14:17] d2.utils.events INFO:  eta: 4:42:48  iter: 399  total_loss: 0.665  loss_cls: 0.1586  loss_box_reg: 0.1915  loss_rpn_cls: 0.1549  loss_rpn_loc: 0.1355  time: 0.7302  data_time: 0.0183  lr: 0.02  max_mem: 9914M
[01/01 02:14:32] d2.utils.events INFO:  eta: 4:42:31  iter: 419  total_loss: 0.7445  loss_cls: 0.1727  loss_box_reg: 0.2311  loss_rpn_cls: 0.1789  loss_rpn_loc: 0.1572  time: 0.7300  data_time: 0.0198  lr: 0.02  max_mem: 9914M
[01/01 02:14:46] d2.utils.events INFO:  eta: 4:42:06  iter: 439  total_loss: 0.6886  loss_cls: 0.1634  loss_box_reg: 0.213  loss_rpn_cls: 0.1696  loss_rpn_loc: 0.138  time: 0.7294  data_time: 0.0210  lr: 0.02  max_mem: 9914M
[01/01 02:15:01] d2.utils.events INFO:  eta: 4:41:46  iter: 459  total_loss: 0.6644  loss_cls: 0.1478  loss_box_reg: 0.1981  loss_rpn_cls: 0.1593  loss_rpn_loc: 0.1336  time: 0.7292  data_time: 0.0211  lr: 0.02  max_mem: 9914M
[01/01 02:15:15] d2.utils.events INFO:  eta: 4:41:38  iter: 479  total_loss: 0.7094  loss_cls: 0.1687  loss_box_reg: 0.2155  loss_rpn_cls: 0.1611  loss_rpn_loc: 0.1575  time: 0.7285  data_time: 0.0200  lr: 0.02  max_mem: 9914M
[01/01 02:15:29] d2.utils.events INFO:  eta: 4:41:09  iter: 499  total_loss: 0.6367  loss_cls: 0.1472  loss_box_reg: 0.1915  loss_rpn_cls: 0.1544  loss_rpn_loc: 0.1386  time: 0.7276  data_time: 0.0236  lr: 0.02  max_mem: 9914M
[01/01 02:15:43] d2.utils.events INFO:  eta: 4:40:52  iter: 519  total_loss: 0.6782  loss_cls: 0.1571  loss_box_reg: 0.2128  loss_rpn_cls: 0.1664  loss_rpn_loc: 0.1311  time: 0.7270  data_time: 0.0140  lr: 0.02  max_mem: 9914M
[01/01 02:15:58] d2.utils.events INFO:  eta: 4:40:38  iter: 539  total_loss: 0.6513  loss_cls: 0.1463  loss_box_reg: 0.2023  loss_rpn_cls: 0.162  loss_rpn_loc: 0.1515  time: 0.7269  data_time: 0.0208  lr: 0.02  max_mem: 9914M
[01/01 02:16:12] d2.utils.events INFO:  eta: 4:40:23  iter: 559  total_loss: 0.6942  loss_cls: 0.1619  loss_box_reg: 0.2165  loss_rpn_cls: 0.1538  loss_rpn_loc: 0.1408  time: 0.7264  data_time: 0.0270  lr: 0.02  max_mem: 9914M
[01/01 02:16:26] d2.utils.events INFO:  eta: 4:39:59  iter: 579  total_loss: 0.6436  loss_cls: 0.1537  loss_box_reg: 0.2075  loss_rpn_cls: 0.1449  loss_rpn_loc: 0.1372  time: 0.7258  data_time: 0.0214  lr: 0.02  max_mem: 9914M
[01/01 02:16:41] d2.utils.events INFO:  eta: 4:39:19  iter: 599  total_loss: 0.6419  loss_cls: 0.1431  loss_box_reg: 0.2102  loss_rpn_cls: 0.1364  loss_rpn_loc: 0.1324  time: 0.7252  data_time: 0.0228  lr: 0.02  max_mem: 9914M
[01/01 02:16:55] d2.utils.events INFO:  eta: 4:39:04  iter: 619  total_loss: 0.6546  loss_cls: 0.1454  loss_box_reg: 0.1887  loss_rpn_cls: 0.1534  loss_rpn_loc: 0.1332  time: 0.7246  data_time: 0.0193  lr: 0.02  max_mem: 9914M
[01/01 02:17:09] d2.utils.events INFO:  eta: 4:38:49  iter: 639  total_loss: 0.6469  loss_cls: 0.1567  loss_box_reg: 0.2125  loss_rpn_cls: 0.1422  loss_rpn_loc: 0.1333  time: 0.7245  data_time: 0.0164  lr: 0.02  max_mem: 9914M
[01/01 02:17:23] d2.utils.events INFO:  eta: 4:38:33  iter: 659  total_loss: 0.6371  loss_cls: 0.1371  loss_box_reg: 0.2014  loss_rpn_cls: 0.15  loss_rpn_loc: 0.1405  time: 0.7238  data_time: 0.0223  lr: 0.02  max_mem: 9914M
[01/01 02:17:37] d2.utils.events INFO:  eta: 4:38:09  iter: 679  total_loss: 0.6317  loss_cls: 0.1484  loss_box_reg: 0.206  loss_rpn_cls: 0.1475  loss_rpn_loc: 0.1302  time: 0.7231  data_time: 0.0184  lr: 0.02  max_mem: 9914M
[01/01 02:17:51] d2.utils.events INFO:  eta: 4:37:50  iter: 699  total_loss: 0.6159  loss_cls: 0.146  loss_box_reg: 0.1993  loss_rpn_cls: 0.1334  loss_rpn_loc: 0.1136  time: 0.7226  data_time: 0.0182  lr: 0.02  max_mem: 9914M
[01/01 02:18:06] d2.utils.events INFO:  eta: 4:37:40  iter: 719  total_loss: 0.6788  loss_cls: 0.1593  loss_box_reg: 0.2056  loss_rpn_cls: 0.151  loss_rpn_loc: 0.1553  time: 0.7226  data_time: 0.0196  lr: 0.02  max_mem: 9914M
[01/01 02:18:20] d2.utils.events INFO:  eta: 4:37:26  iter: 739  total_loss: 0.6668  loss_cls: 0.1529  loss_box_reg: 0.2128  loss_rpn_cls: 0.1443  loss_rpn_loc: 0.171  time: 0.7227  data_time: 0.0167  lr: 0.02  max_mem: 9914M
[01/01 02:18:34] d2.utils.events INFO:  eta: 4:37:11  iter: 759  total_loss: 0.6927  loss_cls: 0.1564  loss_box_reg: 0.2006  loss_rpn_cls: 0.1455  loss_rpn_loc: 0.1509  time: 0.7222  data_time: 0.0159  lr: 0.02  max_mem: 9914M
[01/01 02:18:49] d2.utils.events INFO:  eta: 4:36:50  iter: 779  total_loss: 0.6147  loss_cls: 0.1401  loss_box_reg: 0.215  loss_rpn_cls: 0.1489  loss_rpn_loc: 0.1454  time: 0.7218  data_time: 0.0168  lr: 0.02  max_mem: 9914M
[01/01 02:19:03] d2.utils.events INFO:  eta: 4:36:38  iter: 799  total_loss: 0.6797  loss_cls: 0.1569  loss_box_reg: 0.21  loss_rpn_cls: 0.1442  loss_rpn_loc: 0.1587  time: 0.7216  data_time: 0.0251  lr: 0.02  max_mem: 9914M
[01/01 02:19:17] d2.utils.events INFO:  eta: 4:36:26  iter: 819  total_loss: 0.6614  loss_cls: 0.1559  loss_box_reg: 0.197  loss_rpn_cls: 0.1528  loss_rpn_loc: 0.1444  time: 0.7217  data_time: 0.0220  lr: 0.02  max_mem: 9914M
[01/01 02:19:32] d2.utils.events INFO:  eta: 4:36:09  iter: 839  total_loss: 0.5779  loss_cls: 0.1302  loss_box_reg: 0.1853  loss_rpn_cls: 0.132  loss_rpn_loc: 0.1424  time: 0.7216  data_time: 0.0185  lr: 0.02  max_mem: 9914M
[01/01 02:19:46] d2.utils.events INFO:  eta: 4:35:55  iter: 859  total_loss: 0.6068  loss_cls: 0.1471  loss_box_reg: 0.1947  loss_rpn_cls: 0.1343  loss_rpn_loc: 0.1368  time: 0.7213  data_time: 0.0183  lr: 0.02  max_mem: 9914M
[01/01 02:20:00] d2.utils.events INFO:  eta: 4:35:32  iter: 879  total_loss: 0.6199  loss_cls: 0.1564  loss_box_reg: 0.2072  loss_rpn_cls: 0.1465  loss_rpn_loc: 0.1231  time: 0.7209  data_time: 0.0241  lr: 0.02  max_mem: 9914M
[01/01 02:20:15] d2.utils.events INFO:  eta: 4:35:21  iter: 899  total_loss: 0.61  loss_cls: 0.1364  loss_box_reg: 0.1831  loss_rpn_cls: 0.119  loss_rpn_loc: 0.1428  time: 0.7210  data_time: 0.0177  lr: 0.02  max_mem: 9914M
[01/01 02:20:29] d2.utils.events INFO:  eta: 4:35:10  iter: 919  total_loss: 0.5919  loss_cls: 0.1345  loss_box_reg: 0.2034  loss_rpn_cls: 0.1215  loss_rpn_loc: 0.1367  time: 0.7209  data_time: 0.0177  lr: 0.02  max_mem: 9914M
[01/01 02:20:43] d2.utils.events INFO:  eta: 4:34:56  iter: 939  total_loss: 0.6683  loss_cls: 0.1453  loss_box_reg: 0.2027  loss_rpn_cls: 0.1277  loss_rpn_loc: 0.1514  time: 0.7207  data_time: 0.0197  lr: 0.02  max_mem: 9945M
[01/01 02:20:57] d2.utils.events INFO:  eta: 4:34:31  iter: 959  total_loss: 0.6251  loss_cls: 0.1478  loss_box_reg: 0.195  loss_rpn_cls: 0.1281  loss_rpn_loc: 0.1445  time: 0.7204  data_time: 0.0196  lr: 0.02  max_mem: 9945M
[01/01 02:21:12] d2.utils.events INFO:  eta: 4:34:22  iter: 979  total_loss: 0.6218  loss_cls: 0.1426  loss_box_reg: 0.1935  loss_rpn_cls: 0.1285  loss_rpn_loc: 0.1396  time: 0.7210  data_time: 0.0183  lr: 0.02  max_mem: 9945M
[01/01 02:21:27] d2.utils.events INFO:  eta: 4:34:04  iter: 999  total_loss: 0.6271  loss_cls: 0.161  loss_box_reg: 0.2101  loss_rpn_cls: 0.1395  loss_rpn_loc: 0.1136  time: 0.7209  data_time: 0.0185  lr: 0.02  max_mem: 9945M
[01/01 02:21:41] d2.utils.events INFO:  eta: 4:33:50  iter: 1019  total_loss: 0.5919  loss_cls: 0.1383  loss_box_reg: 0.1918  loss_rpn_cls: 0.128  loss_rpn_loc: 0.1298  time: 0.7210  data_time: 0.0172  lr: 0.02  max_mem: 9945M
[01/01 02:21:56] d2.utils.events INFO:  eta: 4:33:38  iter: 1039  total_loss: 0.5943  loss_cls: 0.1399  loss_box_reg: 0.2088  loss_rpn_cls: 0.1188  loss_rpn_loc: 0.1294  time: 0.7210  data_time: 0.0200  lr: 0.02  max_mem: 9945M
[01/01 02:22:10] d2.utils.events INFO:  eta: 4:33:18  iter: 1059  total_loss: 0.6305  loss_cls: 0.1536  loss_box_reg: 0.2203  loss_rpn_cls: 0.1346  loss_rpn_loc: 0.1326  time: 0.7209  data_time: 0.0250  lr: 0.02  max_mem: 9945M
[01/01 02:22:25] d2.utils.events INFO:  eta: 4:33:05  iter: 1079  total_loss: 0.6391  loss_cls: 0.1599  loss_box_reg: 0.2167  loss_rpn_cls: 0.1283  loss_rpn_loc: 0.1322  time: 0.7211  data_time: 0.0227  lr: 0.02  max_mem: 9945M
[01/01 02:22:39] d2.utils.events INFO:  eta: 4:33:03  iter: 1099  total_loss: 0.6275  loss_cls: 0.1456  loss_box_reg: 0.1962  loss_rpn_cls: 0.1382  loss_rpn_loc: 0.1642  time: 0.7214  data_time: 0.0193  lr: 0.02  max_mem: 9945M
[01/01 02:22:54] d2.utils.events INFO:  eta: 4:32:44  iter: 1119  total_loss: 0.6171  loss_cls: 0.1501  loss_box_reg: 0.2173  loss_rpn_cls: 0.1211  loss_rpn_loc: 0.1273  time: 0.7214  data_time: 0.0182  lr: 0.02  max_mem: 9945M
[01/01 02:23:08] d2.utils.events INFO:  eta: 4:32:19  iter: 1139  total_loss: 0.6102  loss_cls: 0.1449  loss_box_reg: 0.1963  loss_rpn_cls: 0.1222  loss_rpn_loc: 0.1197  time: 0.7210  data_time: 0.0197  lr: 0.02  max_mem: 9945M
[01/01 02:23:22] d2.utils.events INFO:  eta: 4:32:06  iter: 1159  total_loss: 0.5762  loss_cls: 0.1401  loss_box_reg: 0.2036  loss_rpn_cls: 0.1181  loss_rpn_loc: 0.1095  time: 0.7211  data_time: 0.0194  lr: 0.02  max_mem: 9945M
[01/01 02:23:37] d2.utils.events INFO:  eta: 4:31:31  iter: 1179  total_loss: 0.5668  loss_cls: 0.1303  loss_box_reg: 0.183  loss_rpn_cls: 0.1155  loss_rpn_loc: 0.1225  time: 0.7212  data_time: 0.0215  lr: 0.02  max_mem: 9945M
[01/01 02:23:52] d2.utils.events INFO:  eta: 4:31:36  iter: 1199  total_loss: 0.6281  loss_cls: 0.1445  loss_box_reg: 0.209  loss_rpn_cls: 0.1205  loss_rpn_loc: 0.1402  time: 0.7213  data_time: 0.0238  lr: 0.02  max_mem: 9945M
[01/01 02:24:06] d2.utils.events INFO:  eta: 4:31:21  iter: 1219  total_loss: 0.6199  loss_cls: 0.1521  loss_box_reg: 0.1888  loss_rpn_cls: 0.1243  loss_rpn_loc: 0.13  time: 0.7214  data_time: 0.0175  lr: 0.02  max_mem: 9945M
[01/01 02:24:21] d2.utils.events INFO:  eta: 4:31:01  iter: 1239  total_loss: 0.6205  loss_cls: 0.1379  loss_box_reg: 0.1911  loss_rpn_cls: 0.1311  loss_rpn_loc: 0.1486  time: 0.7217  data_time: 0.0179  lr: 0.02  max_mem: 9945M
[01/01 02:24:35] d2.utils.events INFO:  eta: 4:30:21  iter: 1259  total_loss: 0.646  loss_cls: 0.1627  loss_box_reg: 0.2096  loss_rpn_cls: 0.1412  loss_rpn_loc: 0.1152  time: 0.7215  data_time: 0.0168  lr: 0.02  max_mem: 9945M
[01/01 02:24:49] d2.utils.events INFO:  eta: 4:29:56  iter: 1279  total_loss: 0.664  loss_cls: 0.1647  loss_box_reg: 0.2124  loss_rpn_cls: 0.1214  loss_rpn_loc: 0.1306  time: 0.7213  data_time: 0.0172  lr: 0.02  max_mem: 9945M
[01/01 02:25:04] d2.utils.events INFO:  eta: 4:29:51  iter: 1299  total_loss: 0.6418  loss_cls: 0.1581  loss_box_reg: 0.2214  loss_rpn_cls: 0.1272  loss_rpn_loc: 0.1433  time: 0.7213  data_time: 0.0251  lr: 0.02  max_mem: 9945M
[01/01 02:25:18] d2.utils.events INFO:  eta: 4:29:28  iter: 1319  total_loss: 0.6153  loss_cls: 0.1497  loss_box_reg: 0.2106  loss_rpn_cls: 0.1239  loss_rpn_loc: 0.1271  time: 0.7211  data_time: 0.0145  lr: 0.02  max_mem: 9945M
[01/01 02:25:32] d2.utils.events INFO:  eta: 4:29:03  iter: 1339  total_loss: 0.6613  loss_cls: 0.1715  loss_box_reg: 0.2074  loss_rpn_cls: 0.1299  loss_rpn_loc: 0.1336  time: 0.7208  data_time: 0.0199  lr: 0.02  max_mem: 9945M
[01/01 02:25:46] d2.utils.events INFO:  eta: 4:28:38  iter: 1359  total_loss: 0.5793  loss_cls: 0.1341  loss_box_reg: 0.177  loss_rpn_cls: 0.1366  loss_rpn_loc: 0.1384  time: 0.7204  data_time: 0.0225  lr: 0.02  max_mem: 9945M
[01/01 02:26:00] d2.utils.events INFO:  eta: 4:28:16  iter: 1379  total_loss: 0.6087  loss_cls: 0.1426  loss_box_reg: 0.2071  loss_rpn_cls: 0.1303  loss_rpn_loc: 0.1256  time: 0.7199  data_time: 0.0206  lr: 0.02  max_mem: 9945M
[01/01 02:26:14] d2.utils.events INFO:  eta: 4:28:06  iter: 1399  total_loss: 0.6394  loss_cls: 0.1486  loss_box_reg: 0.2113  loss_rpn_cls: 0.11  loss_rpn_loc: 0.1437  time: 0.7196  data_time: 0.0224  lr: 0.02  max_mem: 9945M
[01/01 02:26:28] d2.utils.events INFO:  eta: 4:27:44  iter: 1419  total_loss: 0.6149  loss_cls: 0.136  loss_box_reg: 0.1956  loss_rpn_cls: 0.1245  loss_rpn_loc: 0.13  time: 0.7194  data_time: 0.0205  lr: 0.02  max_mem: 9945M
[01/01 02:26:42] d2.utils.events INFO:  eta: 4:27:30  iter: 1439  total_loss: 0.6295  loss_cls: 0.1572  loss_box_reg: 0.2088  loss_rpn_cls: 0.1245  loss_rpn_loc: 0.1369  time: 0.7191  data_time: 0.0246  lr: 0.02  max_mem: 9945M
[01/01 02:26:55] d2.utils.events INFO:  eta: 4:27:07  iter: 1459  total_loss: 0.5837  loss_cls: 0.1314  loss_box_reg: 0.1802  loss_rpn_cls: 0.1114  loss_rpn_loc: 0.1342  time: 0.7187  data_time: 0.0190  lr: 0.02  max_mem: 9945M
[01/01 02:27:09] d2.utils.events INFO:  eta: 4:26:47  iter: 1479  total_loss: 0.5696  loss_cls: 0.1379  loss_box_reg: 0.1834  loss_rpn_cls: 0.1335  loss_rpn_loc: 0.1202  time: 0.7183  data_time: 0.0226  lr: 0.02  max_mem: 9945M
[01/01 02:27:23] d2.utils.events INFO:  eta: 4:26:34  iter: 1499  total_loss: 0.6232  loss_cls: 0.1621  loss_box_reg: 0.2156  loss_rpn_cls: 0.1204  loss_rpn_loc: 0.1488  time: 0.7182  data_time: 0.0243  lr: 0.02  max_mem: 9945M
[01/01 02:27:38] d2.utils.events INFO:  eta: 4:26:18  iter: 1519  total_loss: 0.5985  loss_cls: 0.1577  loss_box_reg: 0.2158  loss_rpn_cls: 0.113  loss_rpn_loc: 0.1438  time: 0.7180  data_time: 0.0188  lr: 0.02  max_mem: 9945M
[01/01 02:27:52] d2.utils.events INFO:  eta: 4:26:04  iter: 1539  total_loss: 0.6219  loss_cls: 0.1465  loss_box_reg: 0.1917  loss_rpn_cls: 0.1272  loss_rpn_loc: 0.1302  time: 0.7180  data_time: 0.0204  lr: 0.02  max_mem: 9945M
[01/01 02:28:06] d2.utils.events INFO:  eta: 4:25:43  iter: 1559  total_loss: 0.5839  loss_cls: 0.1306  loss_box_reg: 0.1865  loss_rpn_cls: 0.1234  loss_rpn_loc: 0.1259  time: 0.7179  data_time: 0.0221  lr: 0.02  max_mem: 9945M
[01/01 02:28:20] d2.utils.events INFO:  eta: 4:25:25  iter: 1579  total_loss: 0.5966  loss_cls: 0.1469  loss_box_reg: 0.1957  loss_rpn_cls: 0.124  loss_rpn_loc: 0.1198  time: 0.7178  data_time: 0.0192  lr: 0.02  max_mem: 9945M
[01/01 02:28:34] d2.utils.events INFO:  eta: 4:25:04  iter: 1599  total_loss: 0.6041  loss_cls: 0.1488  loss_box_reg: 0.2029  loss_rpn_cls: 0.1107  loss_rpn_loc: 0.1436  time: 0.7174  data_time: 0.0237  lr: 0.02  max_mem: 9945M
[01/01 02:28:48] d2.utils.events INFO:  eta: 4:24:52  iter: 1619  total_loss: 0.5782  loss_cls: 0.1255  loss_box_reg: 0.1824  loss_rpn_cls: 0.1197  loss_rpn_loc: 0.1291  time: 0.7174  data_time: 0.0221  lr: 0.02  max_mem: 9945M
[01/01 02:29:03] d2.utils.events INFO:  eta: 4:24:47  iter: 1639  total_loss: 0.6159  loss_cls: 0.1281  loss_box_reg: 0.1971  loss_rpn_cls: 0.1289  loss_rpn_loc: 0.1408  time: 0.7176  data_time: 0.0209  lr: 0.02  max_mem: 9945M
[01/01 02:29:17] d2.utils.events INFO:  eta: 4:24:39  iter: 1659  total_loss: 0.6156  loss_cls: 0.1414  loss_box_reg: 0.1934  loss_rpn_cls: 0.1156  loss_rpn_loc: 0.1312  time: 0.7176  data_time: 0.0231  lr: 0.02  max_mem: 9945M
[01/01 02:29:32] d2.utils.events INFO:  eta: 4:24:26  iter: 1679  total_loss: 0.6153  loss_cls: 0.1523  loss_box_reg: 0.2056  loss_rpn_cls: 0.1196  loss_rpn_loc: 0.1331  time: 0.7175  data_time: 0.0241  lr: 0.02  max_mem: 9945M
[01/01 02:29:46] d2.utils.events INFO:  eta: 4:24:16  iter: 1699  total_loss: 0.5026  loss_cls: 0.1198  loss_box_reg: 0.1804  loss_rpn_cls: 0.1046  loss_rpn_loc: 0.1126  time: 0.7174  data_time: 0.0211  lr: 0.02  max_mem: 9945M
[01/01 02:30:00] d2.utils.events INFO:  eta: 4:23:57  iter: 1719  total_loss: 0.5954  loss_cls: 0.1359  loss_box_reg: 0.1978  loss_rpn_cls: 0.1128  loss_rpn_loc: 0.1387  time: 0.7173  data_time: 0.0190  lr: 0.02  max_mem: 9945M
[01/01 02:30:14] d2.utils.events INFO:  eta: 4:23:32  iter: 1739  total_loss: 0.5576  loss_cls: 0.1321  loss_box_reg: 0.2039  loss_rpn_cls: 0.1098  loss_rpn_loc: 0.1197  time: 0.7172  data_time: 0.0200  lr: 0.02  max_mem: 9945M
[01/01 02:30:28] d2.utils.events INFO:  eta: 4:23:09  iter: 1759  total_loss: 0.6004  loss_cls: 0.1358  loss_box_reg: 0.1821  loss_rpn_cls: 0.1168  loss_rpn_loc: 0.1291  time: 0.7169  data_time: 0.0215  lr: 0.02  max_mem: 9945M
[01/01 02:30:42] d2.utils.events INFO:  eta: 4:22:40  iter: 1779  total_loss: 0.559  loss_cls: 0.1279  loss_box_reg: 0.1942  loss_rpn_cls: 0.1137  loss_rpn_loc: 0.1213  time: 0.7166  data_time: 0.0227  lr: 0.02  max_mem: 9945M
[01/01 02:30:56] d2.utils.events INFO:  eta: 4:22:21  iter: 1799  total_loss: 0.6048  loss_cls: 0.1374  loss_box_reg: 0.201  loss_rpn_cls: 0.1161  loss_rpn_loc: 0.1492  time: 0.7164  data_time: 0.0216  lr: 0.02  max_mem: 9945M
[01/01 02:31:10] d2.utils.events INFO:  eta: 4:21:48  iter: 1819  total_loss: 0.5948  loss_cls: 0.1448  loss_box_reg: 0.2005  loss_rpn_cls: 0.1186  loss_rpn_loc: 0.1312  time: 0.7162  data_time: 0.0207  lr: 0.02  max_mem: 9945M
[01/01 02:31:24] d2.utils.events INFO:  eta: 4:21:23  iter: 1839  total_loss: 0.5643  loss_cls: 0.1389  loss_box_reg: 0.177  loss_rpn_cls: 0.1131  loss_rpn_loc: 0.1477  time: 0.7161  data_time: 0.0202  lr: 0.02  max_mem: 9945M
[01/01 02:31:38] d2.utils.events INFO:  eta: 4:21:02  iter: 1859  total_loss: 0.551  loss_cls: 0.116  loss_box_reg: 0.1622  loss_rpn_cls: 0.112  loss_rpn_loc: 0.1271  time: 0.7158  data_time: 0.0234  lr: 0.02  max_mem: 9945M
[01/01 02:31:52] d2.utils.events INFO:  eta: 4:20:44  iter: 1879  total_loss: 0.5741  loss_cls: 0.1423  loss_box_reg: 0.2  loss_rpn_cls: 0.1188  loss_rpn_loc: 0.1325  time: 0.7156  data_time: 0.0194  lr: 0.02  max_mem: 9945M
[01/01 02:32:06] d2.utils.events INFO:  eta: 4:20:21  iter: 1899  total_loss: 0.5525  loss_cls: 0.1212  loss_box_reg: 0.1731  loss_rpn_cls: 0.1102  loss_rpn_loc: 0.1419  time: 0.7155  data_time: 0.0229  lr: 0.02  max_mem: 9945M
[01/01 02:32:20] d2.utils.events INFO:  eta: 4:19:52  iter: 1919  total_loss: 0.6538  loss_cls: 0.1645  loss_box_reg: 0.2116  loss_rpn_cls: 0.1275  loss_rpn_loc: 0.1448  time: 0.7153  data_time: 0.0221  lr: 0.02  max_mem: 9945M
[01/01 02:32:34] d2.utils.events INFO:  eta: 4:19:19  iter: 1939  total_loss: 0.6314  loss_cls: 0.1334  loss_box_reg: 0.2111  loss_rpn_cls: 0.1202  loss_rpn_loc: 0.1387  time: 0.7152  data_time: 0.0235  lr: 0.02  max_mem: 9945M
[01/01 02:32:48] d2.utils.events INFO:  eta: 4:19:01  iter: 1959  total_loss: 0.5653  loss_cls: 0.127  loss_box_reg: 0.191  loss_rpn_cls: 0.1049  loss_rpn_loc: 0.1387  time: 0.7150  data_time: 0.0214  lr: 0.02  max_mem: 9945M
[01/01 02:33:02] d2.utils.events INFO:  eta: 4:18:15  iter: 1979  total_loss: 0.5855  loss_cls: 0.1272  loss_box_reg: 0.2029  loss_rpn_cls: 0.1195  loss_rpn_loc: 0.1204  time: 0.7147  data_time: 0.0172  lr: 0.02  max_mem: 9945M
[01/01 02:33:15] d2.utils.events INFO:  eta: 4:17:40  iter: 1999  total_loss: 0.5781  loss_cls: 0.1255  loss_box_reg: 0.1779  loss_rpn_cls: 0.1183  loss_rpn_loc: 0.1409  time: 0.7144  data_time: 0.0237  lr: 0.02  max_mem: 9945M
[01/01 02:33:29] d2.utils.events INFO:  eta: 4:16:54  iter: 2019  total_loss: 0.6234  loss_cls: 0.1504  loss_box_reg: 0.2272  loss_rpn_cls: 0.1165  loss_rpn_loc: 0.134  time: 0.7142  data_time: 0.0227  lr: 0.02  max_mem: 9945M
[01/01 02:33:43] d2.utils.events INFO:  eta: 4:16:36  iter: 2039  total_loss: 0.5466  loss_cls: 0.131  loss_box_reg: 0.1836  loss_rpn_cls: 0.1039  loss_rpn_loc: 0.1228  time: 0.7141  data_time: 0.0208  lr: 0.02  max_mem: 9945M
[01/01 02:33:57] d2.utils.events INFO:  eta: 4:16:04  iter: 2059  total_loss: 0.5696  loss_cls: 0.1375  loss_box_reg: 0.2054  loss_rpn_cls: 0.1076  loss_rpn_loc: 0.1427  time: 0.7139  data_time: 0.0173  lr: 0.02  max_mem: 9945M
[01/01 02:34:12] d2.utils.events INFO:  eta: 4:15:39  iter: 2079  total_loss: 0.5217  loss_cls: 0.1242  loss_box_reg: 0.189  loss_rpn_cls: 0.1095  loss_rpn_loc: 0.1152  time: 0.7139  data_time: 0.0225  lr: 0.02  max_mem: 9945M
[01/01 02:34:26] d2.utils.events INFO:  eta: 4:14:43  iter: 2099  total_loss: 0.6336  loss_cls: 0.1498  loss_box_reg: 0.2199  loss_rpn_cls: 0.1052  loss_rpn_loc: 0.1371  time: 0.7138  data_time: 0.0211  lr: 0.02  max_mem: 9945M
[01/01 02:34:39] d2.utils.events INFO:  eta: 4:14:10  iter: 2119  total_loss: 0.5331  loss_cls: 0.125  loss_box_reg: 0.1746  loss_rpn_cls: 0.1033  loss_rpn_loc: 0.1214  time: 0.7135  data_time: 0.0189  lr: 0.02  max_mem: 9945M
[01/01 02:34:53] d2.utils.events INFO:  eta: 4:13:53  iter: 2139  total_loss: 0.57  loss_cls: 0.1393  loss_box_reg: 0.2056  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.1161  time: 0.7134  data_time: 0.0248  lr: 0.02  max_mem: 9945M
[01/01 02:35:07] d2.utils.events INFO:  eta: 4:13:28  iter: 2159  total_loss: 0.5519  loss_cls: 0.1302  loss_box_reg: 0.1874  loss_rpn_cls: 0.1093  loss_rpn_loc: 0.1212  time: 0.7133  data_time: 0.0168  lr: 0.02  max_mem: 9945M
[01/01 02:35:21] d2.utils.events INFO:  eta: 4:13:09  iter: 2179  total_loss: 0.5088  loss_cls: 0.1166  loss_box_reg: 0.1806  loss_rpn_cls: 0.1042  loss_rpn_loc: 0.1175  time: 0.7132  data_time: 0.0214  lr: 0.02  max_mem: 9945M
[01/01 02:35:35] d2.utils.events INFO:  eta: 4:12:30  iter: 2199  total_loss: 0.5651  loss_cls: 0.1278  loss_box_reg: 0.1862  loss_rpn_cls: 0.1051  loss_rpn_loc: 0.1236  time: 0.7130  data_time: 0.0160  lr: 0.02  max_mem: 9945M
[01/01 02:35:49] d2.utils.events INFO:  eta: 4:11:53  iter: 2219  total_loss: 0.5688  loss_cls: 0.1318  loss_box_reg: 0.1791  loss_rpn_cls: 0.1111  loss_rpn_loc: 0.134  time: 0.7128  data_time: 0.0149  lr: 0.02  max_mem: 9945M
[01/01 02:36:03] d2.utils.events INFO:  eta: 4:11:29  iter: 2239  total_loss: 0.5632  loss_cls: 0.1371  loss_box_reg: 0.1952  loss_rpn_cls: 0.117  loss_rpn_loc: 0.1173  time: 0.7126  data_time: 0.0210  lr: 0.02  max_mem: 9945M
[01/01 02:36:17] d2.utils.events INFO:  eta: 4:11:11  iter: 2259  total_loss: 0.5636  loss_cls: 0.1271  loss_box_reg: 0.1862  loss_rpn_cls: 0.1108  loss_rpn_loc: 0.1278  time: 0.7125  data_time: 0.0197  lr: 0.02  max_mem: 9945M
[01/01 02:36:31] d2.utils.events INFO:  eta: 4:10:54  iter: 2279  total_loss: 0.5405  loss_cls: 0.1315  loss_box_reg: 0.1792  loss_rpn_cls: 0.1072  loss_rpn_loc: 0.1203  time: 0.7123  data_time: 0.0255  lr: 0.02  max_mem: 9945M
[01/01 02:36:45] d2.utils.events INFO:  eta: 4:10:17  iter: 2299  total_loss: 0.5555  loss_cls: 0.136  loss_box_reg: 0.1928  loss_rpn_cls: 0.1105  loss_rpn_loc: 0.1286  time: 0.7122  data_time: 0.0254  lr: 0.02  max_mem: 9945M
[01/01 02:36:59] d2.utils.events INFO:  eta: 4:09:57  iter: 2319  total_loss: 0.5343  loss_cls: 0.1211  loss_box_reg: 0.173  loss_rpn_cls: 0.1081  loss_rpn_loc: 0.1517  time: 0.7119  data_time: 0.0190  lr: 0.02  max_mem: 9945M
[01/01 02:37:12] d2.utils.events INFO:  eta: 4:09:44  iter: 2339  total_loss: 0.5083  loss_cls: 0.124  loss_box_reg: 0.1583  loss_rpn_cls: 0.09932  loss_rpn_loc: 0.1269  time: 0.7117  data_time: 0.0159  lr: 0.02  max_mem: 9945M
[01/01 02:37:26] d2.utils.events INFO:  eta: 4:09:27  iter: 2359  total_loss: 0.4834  loss_cls: 0.1059  loss_box_reg: 0.1608  loss_rpn_cls: 0.09097  loss_rpn_loc: 0.09944  time: 0.7116  data_time: 0.0211  lr: 0.02  max_mem: 9945M
[01/01 02:37:41] d2.utils.events INFO:  eta: 4:09:16  iter: 2379  total_loss: 0.5575  loss_cls: 0.1219  loss_box_reg: 0.1744  loss_rpn_cls: 0.1175  loss_rpn_loc: 0.1241  time: 0.7116  data_time: 0.0201  lr: 0.02  max_mem: 9945M
[01/01 02:37:54] d2.utils.events INFO:  eta: 4:08:59  iter: 2399  total_loss: 0.5121  loss_cls: 0.1162  loss_box_reg: 0.1612  loss_rpn_cls: 0.1056  loss_rpn_loc: 0.1332  time: 0.7114  data_time: 0.0213  lr: 0.02  max_mem: 9945M
[01/01 02:38:09] d2.utils.events INFO:  eta: 4:08:41  iter: 2419  total_loss: 0.5348  loss_cls: 0.1339  loss_box_reg: 0.175  loss_rpn_cls: 0.1099  loss_rpn_loc: 0.1314  time: 0.7114  data_time: 0.0276  lr: 0.02  max_mem: 9945M
[01/01 02:38:22] d2.utils.events INFO:  eta: 4:08:09  iter: 2439  total_loss: 0.6126  loss_cls: 0.1356  loss_box_reg: 0.1924  loss_rpn_cls: 0.1084  loss_rpn_loc: 0.1457  time: 0.7111  data_time: 0.0232  lr: 0.02  max_mem: 9945M
[01/01 02:38:36] d2.utils.events INFO:  eta: 4:07:58  iter: 2459  total_loss: 0.5322  loss_cls: 0.1243  loss_box_reg: 0.1727  loss_rpn_cls: 0.1075  loss_rpn_loc: 0.1227  time: 0.7109  data_time: 0.0174  lr: 0.02  max_mem: 9945M
[01/01 02:38:50] d2.utils.events INFO:  eta: 4:07:44  iter: 2479  total_loss: 0.5613  loss_cls: 0.1336  loss_box_reg: 0.176  loss_rpn_cls: 0.1087  loss_rpn_loc: 0.1378  time: 0.7108  data_time: 0.0243  lr: 0.02  max_mem: 9945M
[01/01 02:39:04] d2.utils.events INFO:  eta: 4:07:24  iter: 2499  total_loss: 0.5308  loss_cls: 0.1089  loss_box_reg: 0.1576  loss_rpn_cls: 0.09951  loss_rpn_loc: 0.1158  time: 0.7106  data_time: 0.0223  lr: 0.02  max_mem: 9945M
[01/01 02:39:18] d2.utils.events INFO:  eta: 4:07:11  iter: 2519  total_loss: 0.6138  loss_cls: 0.1562  loss_box_reg: 0.2141  loss_rpn_cls: 0.1118  loss_rpn_loc: 0.1488  time: 0.7105  data_time: 0.0235  lr: 0.02  max_mem: 9945M
[01/01 02:39:31] d2.utils.events INFO:  eta: 4:06:54  iter: 2539  total_loss: 0.504  loss_cls: 0.1164  loss_box_reg: 0.1781  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.1129  time: 0.7104  data_time: 0.0154  lr: 0.02  max_mem: 9945M
[01/01 02:39:45] d2.utils.events INFO:  eta: 4:06:29  iter: 2559  total_loss: 0.5583  loss_cls: 0.1299  loss_box_reg: 0.1954  loss_rpn_cls: 0.09948  loss_rpn_loc: 0.1291  time: 0.7101  data_time: 0.0197  lr: 0.02  max_mem: 9945M
[01/01 02:39:58] d2.utils.events INFO:  eta: 4:05:55  iter: 2579  total_loss: 0.5963  loss_cls: 0.1385  loss_box_reg: 0.205  loss_rpn_cls: 0.1137  loss_rpn_loc: 0.125  time: 0.7097  data_time: 0.0201  lr: 0.02  max_mem: 9945M
[01/01 02:40:11] d2.utils.events INFO:  eta: 4:05:17  iter: 2599  total_loss: 0.5687  loss_cls: 0.1241  loss_box_reg: 0.1807  loss_rpn_cls: 0.1021  loss_rpn_loc: 0.1433  time: 0.7093  data_time: 0.0179  lr: 0.02  max_mem: 9945M
[01/01 02:40:25] d2.utils.events INFO:  eta: 4:04:55  iter: 2619  total_loss: 0.5285  loss_cls: 0.1222  loss_box_reg: 0.1813  loss_rpn_cls: 0.1096  loss_rpn_loc: 0.1133  time: 0.7091  data_time: 0.0200  lr: 0.02  max_mem: 9945M
[01/01 02:40:38] d2.utils.events INFO:  eta: 4:03:57  iter: 2639  total_loss: 0.5644  loss_cls: 0.1283  loss_box_reg: 0.2021  loss_rpn_cls: 0.1006  loss_rpn_loc: 0.128  time: 0.7087  data_time: 0.0209  lr: 0.02  max_mem: 9945M
[01/01 02:40:52] d2.utils.events INFO:  eta: 4:03:29  iter: 2659  total_loss: 0.5272  loss_cls: 0.1129  loss_box_reg: 0.1841  loss_rpn_cls: 0.1096  loss_rpn_loc: 0.1129  time: 0.7084  data_time: 0.0237  lr: 0.02  max_mem: 9945M
[01/01 02:41:05] d2.utils.events INFO:  eta: 4:03:07  iter: 2679  total_loss: 0.5769  loss_cls: 0.1332  loss_box_reg: 0.2069  loss_rpn_cls: 0.1103  loss_rpn_loc: 0.1216  time: 0.7083  data_time: 0.0162  lr: 0.02  max_mem: 9945M
[01/01 02:41:19] d2.utils.events INFO:  eta: 4:02:38  iter: 2699  total_loss: 0.5739  loss_cls: 0.1283  loss_box_reg: 0.1804  loss_rpn_cls: 0.1164  loss_rpn_loc: 0.127  time: 0.7080  data_time: 0.0206  lr: 0.02  max_mem: 9945M
[01/01 02:41:32] d2.utils.events INFO:  eta: 4:02:13  iter: 2719  total_loss: 0.5391  loss_cls: 0.134  loss_box_reg: 0.1908  loss_rpn_cls: 0.108  loss_rpn_loc: 0.1218  time: 0.7078  data_time: 0.0231  lr: 0.02  max_mem: 9945M
[01/01 02:41:46] d2.utils.events INFO:  eta: 4:01:45  iter: 2739  total_loss: 0.5427  loss_cls: 0.1218  loss_box_reg: 0.1785  loss_rpn_cls: 0.106  loss_rpn_loc: 0.1306  time: 0.7076  data_time: 0.0177  lr: 0.02  max_mem: 9945M
[01/01 02:42:00] d2.utils.events INFO:  eta: 4:01:33  iter: 2759  total_loss: 0.5315  loss_cls: 0.1127  loss_box_reg: 0.1848  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.112  time: 0.7074  data_time: 0.0242  lr: 0.02  max_mem: 9945M
[01/01 02:42:13] d2.utils.events INFO:  eta: 4:01:19  iter: 2779  total_loss: 0.5716  loss_cls: 0.1297  loss_box_reg: 0.1944  loss_rpn_cls: 0.1092  loss_rpn_loc: 0.1314  time: 0.7072  data_time: 0.0194  lr: 0.02  max_mem: 9945M
[01/01 02:42:27] d2.utils.events INFO:  eta: 4:00:57  iter: 2799  total_loss: 0.5731  loss_cls: 0.1355  loss_box_reg: 0.1849  loss_rpn_cls: 0.1053  loss_rpn_loc: 0.1386  time: 0.7070  data_time: 0.0189  lr: 0.02  max_mem: 9945M
[01/01 02:42:40] d2.utils.events INFO:  eta: 4:00:40  iter: 2819  total_loss: 0.5625  loss_cls: 0.1286  loss_box_reg: 0.2051  loss_rpn_cls: 0.09605  loss_rpn_loc: 0.125  time: 0.7068  data_time: 0.0220  lr: 0.02  max_mem: 9945M
[01/01 02:42:54] d2.utils.events INFO:  eta: 4:00:18  iter: 2839  total_loss: 0.547  loss_cls: 0.1289  loss_box_reg: 0.1822  loss_rpn_cls: 0.1002  loss_rpn_loc: 0.1191  time: 0.7066  data_time: 0.0191  lr: 0.02  max_mem: 9945M
[01/01 02:43:08] d2.utils.events INFO:  eta: 4:00:04  iter: 2859  total_loss: 0.5149  loss_cls: 0.1219  loss_box_reg: 0.1797  loss_rpn_cls: 0.09814  loss_rpn_loc: 0.1386  time: 0.7065  data_time: 0.0247  lr: 0.02  max_mem: 9945M
[01/01 02:43:21] d2.utils.events INFO:  eta: 3:59:42  iter: 2879  total_loss: 0.5452  loss_cls: 0.1274  loss_box_reg: 0.1909  loss_rpn_cls: 0.1084  loss_rpn_loc: 0.117  time: 0.7063  data_time: 0.0223  lr: 0.02  max_mem: 9945M
[01/01 02:43:35] d2.utils.events INFO:  eta: 3:59:31  iter: 2899  total_loss: 0.5776  loss_cls: 0.1445  loss_box_reg: 0.1982  loss_rpn_cls: 0.1089  loss_rpn_loc: 0.1361  time: 0.7062  data_time: 0.0154  lr: 0.02  max_mem: 9945M
[01/01 02:43:49] d2.utils.events INFO:  eta: 3:59:08  iter: 2919  total_loss: 0.524  loss_cls: 0.1344  loss_box_reg: 0.1793  loss_rpn_cls: 0.1064  loss_rpn_loc: 0.1133  time: 0.7060  data_time: 0.0252  lr: 0.02  max_mem: 9945M
[01/01 02:44:02] d2.utils.events INFO:  eta: 3:58:48  iter: 2939  total_loss: 0.5463  loss_cls: 0.1219  loss_box_reg: 0.1815  loss_rpn_cls: 0.1087  loss_rpn_loc: 0.1359  time: 0.7058  data_time: 0.0167  lr: 0.02  max_mem: 9945M
[01/01 02:44:16] d2.utils.events INFO:  eta: 3:58:33  iter: 2959  total_loss: 0.5633  loss_cls: 0.135  loss_box_reg: 0.1903  loss_rpn_cls: 0.1145  loss_rpn_loc: 0.135  time: 0.7057  data_time: 0.0223  lr: 0.02  max_mem: 9945M
[01/01 02:44:30] d2.utils.events INFO:  eta: 3:58:19  iter: 2979  total_loss: 0.5765  loss_cls: 0.1272  loss_box_reg: 0.1888  loss_rpn_cls: 0.1136  loss_rpn_loc: 0.151  time: 0.7056  data_time: 0.0213  lr: 0.02  max_mem: 9945M
[01/01 02:44:44] d2.utils.events INFO:  eta: 3:58:03  iter: 2999  total_loss: 0.5686  loss_cls: 0.1249  loss_box_reg: 0.2017  loss_rpn_cls: 0.1036  loss_rpn_loc: 0.1221  time: 0.7054  data_time: 0.0183  lr: 0.02  max_mem: 9945M
[01/01 02:44:57] d2.utils.events INFO:  eta: 3:57:46  iter: 3019  total_loss: 0.4778  loss_cls: 0.1118  loss_box_reg: 0.1604  loss_rpn_cls: 0.09811  loss_rpn_loc: 0.116  time: 0.7053  data_time: 0.0159  lr: 0.02  max_mem: 9945M
[01/01 02:45:11] d2.utils.events INFO:  eta: 3:57:31  iter: 3039  total_loss: 0.5678  loss_cls: 0.1244  loss_box_reg: 0.1817  loss_rpn_cls: 0.09735  loss_rpn_loc: 0.1312  time: 0.7052  data_time: 0.0190  lr: 0.02  max_mem: 9945M
[01/01 02:45:25] d2.utils.events INFO:  eta: 3:57:15  iter: 3059  total_loss: 0.5359  loss_cls: 0.1184  loss_box_reg: 0.183  loss_rpn_cls: 0.101  loss_rpn_loc: 0.1106  time: 0.7050  data_time: 0.0190  lr: 0.02  max_mem: 9945M
[01/01 02:45:38] d2.utils.events INFO:  eta: 3:56:56  iter: 3079  total_loss: 0.5861  loss_cls: 0.1332  loss_box_reg: 0.1944  loss_rpn_cls: 0.1079  loss_rpn_loc: 0.1393  time: 0.7049  data_time: 0.0183  lr: 0.02  max_mem: 9945M
[01/01 02:45:52] d2.utils.events INFO:  eta: 3:56:38  iter: 3099  total_loss: 0.5326  loss_cls: 0.1174  loss_box_reg: 0.1856  loss_rpn_cls: 0.09928  loss_rpn_loc: 0.1344  time: 0.7047  data_time: 0.0146  lr: 0.02  max_mem: 9945M
[01/01 02:46:06] d2.utils.events INFO:  eta: 3:56:26  iter: 3119  total_loss: 0.5285  loss_cls: 0.117  loss_box_reg: 0.1702  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1296  time: 0.7045  data_time: 0.0153  lr: 0.02  max_mem: 9945M
[01/01 02:46:19] d2.utils.events INFO:  eta: 3:56:05  iter: 3139  total_loss: 0.5162  loss_cls: 0.1195  loss_box_reg: 0.1747  loss_rpn_cls: 0.1029  loss_rpn_loc: 0.1157  time: 0.7044  data_time: 0.0213  lr: 0.02  max_mem: 9945M
[01/01 02:46:33] d2.utils.events INFO:  eta: 3:55:46  iter: 3159  total_loss: 0.5614  loss_cls: 0.1246  loss_box_reg: 0.2008  loss_rpn_cls: 0.106  loss_rpn_loc: 0.139  time: 0.7043  data_time: 0.0165  lr: 0.02  max_mem: 9945M
[01/01 02:46:47] d2.utils.events INFO:  eta: 3:55:30  iter: 3179  total_loss: 0.5235  loss_cls: 0.1141  loss_box_reg: 0.2013  loss_rpn_cls: 0.09388  loss_rpn_loc: 0.1161  time: 0.7042  data_time: 0.0221  lr: 0.02  max_mem: 9945M
[01/01 02:47:00] d2.utils.events INFO:  eta: 3:55:12  iter: 3199  total_loss: 0.545  loss_cls: 0.1179  loss_box_reg: 0.1844  loss_rpn_cls: 0.1032  loss_rpn_loc: 0.1312  time: 0.7040  data_time: 0.0183  lr: 0.02  max_mem: 9945M
[01/01 02:47:14] d2.utils.events INFO:  eta: 3:54:58  iter: 3219  total_loss: 0.5573  loss_cls: 0.1362  loss_box_reg: 0.1852  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.1203  time: 0.7038  data_time: 0.0169  lr: 0.02  max_mem: 9945M
[01/01 02:47:27] d2.utils.events INFO:  eta: 3:54:41  iter: 3239  total_loss: 0.5091  loss_cls: 0.1249  loss_box_reg: 0.1845  loss_rpn_cls: 0.09898  loss_rpn_loc: 0.134  time: 0.7037  data_time: 0.0209  lr: 0.02  max_mem: 9945M
[01/01 02:47:41] d2.utils.events INFO:  eta: 3:54:18  iter: 3259  total_loss: 0.5534  loss_cls: 0.1264  loss_box_reg: 0.1822  loss_rpn_cls: 0.1068  loss_rpn_loc: 0.1229  time: 0.7035  data_time: 0.0229  lr: 0.02  max_mem: 9945M
[01/01 02:47:55] d2.utils.events INFO:  eta: 3:53:56  iter: 3279  total_loss: 0.536  loss_cls: 0.1183  loss_box_reg: 0.1844  loss_rpn_cls: 0.09955  loss_rpn_loc: 0.1062  time: 0.7034  data_time: 0.0173  lr: 0.02  max_mem: 9945M
[01/01 02:48:09] d2.utils.events INFO:  eta: 3:53:54  iter: 3299  total_loss: 0.5059  loss_cls: 0.1173  loss_box_reg: 0.1659  loss_rpn_cls: 0.09527  loss_rpn_loc: 0.1231  time: 0.7033  data_time: 0.0259  lr: 0.02  max_mem: 9945M
[01/01 02:48:22] d2.utils.events INFO:  eta: 3:53:42  iter: 3319  total_loss: 0.5507  loss_cls: 0.1293  loss_box_reg: 0.1809  loss_rpn_cls: 0.0974  loss_rpn_loc: 0.133  time: 0.7032  data_time: 0.0179  lr: 0.02  max_mem: 9945M
[01/01 02:48:36] d2.utils.events INFO:  eta: 3:53:27  iter: 3339  total_loss: 0.5722  loss_cls: 0.1329  loss_box_reg: 0.1983  loss_rpn_cls: 0.09843  loss_rpn_loc: 0.1256  time: 0.7030  data_time: 0.0207  lr: 0.02  max_mem: 9945M
[01/01 02:48:50] d2.utils.events INFO:  eta: 3:53:13  iter: 3359  total_loss: 0.5083  loss_cls: 0.1091  loss_box_reg: 0.1644  loss_rpn_cls: 0.09226  loss_rpn_loc: 0.1289  time: 0.7030  data_time: 0.0195  lr: 0.02  max_mem: 9945M
[01/01 02:49:03] d2.utils.events INFO:  eta: 3:52:52  iter: 3379  total_loss: 0.5588  loss_cls: 0.1232  loss_box_reg: 0.1819  loss_rpn_cls: 0.1011  loss_rpn_loc: 0.1315  time: 0.7028  data_time: 0.0177  lr: 0.02  max_mem: 9945M
[01/01 02:49:17] d2.utils.events INFO:  eta: 3:52:33  iter: 3399  total_loss: 0.5196  loss_cls: 0.1242  loss_box_reg: 0.1696  loss_rpn_cls: 0.09963  loss_rpn_loc: 0.1168  time: 0.7027  data_time: 0.0174  lr: 0.02  max_mem: 9945M
[01/01 02:49:31] d2.utils.events INFO:  eta: 3:52:17  iter: 3419  total_loss: 0.5324  loss_cls: 0.1189  loss_box_reg: 0.185  loss_rpn_cls: 0.0912  loss_rpn_loc: 0.1282  time: 0.7026  data_time: 0.0255  lr: 0.02  max_mem: 9945M
[01/01 02:49:45] d2.utils.events INFO:  eta: 3:52:05  iter: 3439  total_loss: 0.5429  loss_cls: 0.1265  loss_box_reg: 0.177  loss_rpn_cls: 0.1099  loss_rpn_loc: 0.1402  time: 0.7026  data_time: 0.0183  lr: 0.02  max_mem: 9945M
[01/01 03:11:34] detectron2 INFO: Rank of current process: 0. World size: 6
[01/01 03:11:36] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 03:11:36] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 03:11:36] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 03:11:36] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 03:11:36] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 03:11:36] d2.utils.env INFO: Using a generated random seed 36791154
[01/01 03:11:36] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 03:11:37] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 03:11:40] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 03:11:40] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 03:11:40] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 03:11:42] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 03:11:42] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 03:11:43] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 03:11:46] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 03:11:46] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 03:11:46] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 03:11:46] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 03:11:46] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 03:11:46] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 03:11:47] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 03:11:47] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 03:11:47] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 03:11:47] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 03:11:47] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 03:11:47] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 03:11:47] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 03:12:48] d2.utils.events INFO:  eta: 4:32:37  iter: 19  total_loss: 3.969  loss_cls: 3.034  loss_box_reg: 0.1235  loss_rpn_cls: 0.6933  loss_rpn_loc: 0.1389  time: 0.6808  data_time: 2.2642  lr: 0.0038162  max_mem: 9596M
[01/01 03:13:01] d2.utils.events INFO:  eta: 4:29:32  iter: 39  total_loss: 3.237  loss_cls: 2.3  loss_box_reg: 0.1322  loss_rpn_cls: 0.6737  loss_rpn_loc: 0.1847  time: 0.6793  data_time: 0.0201  lr: 0.0078122  max_mem: 9616M
[01/01 03:13:15] d2.utils.events INFO:  eta: 4:33:10  iter: 59  total_loss: 1.705  loss_cls: 0.8314  loss_box_reg: 0.143  loss_rpn_cls: 0.6228  loss_rpn_loc: 0.1514  time: 0.6846  data_time: 0.0197  lr: 0.011808  max_mem: 9616M
[01/01 03:13:29] d2.utils.events INFO:  eta: 4:33:27  iter: 79  total_loss: 1.034  loss_cls: 0.2038  loss_box_reg: 0.1404  loss_rpn_cls: 0.5243  loss_rpn_loc: 0.1585  time: 0.6899  data_time: 0.0203  lr: 0.015804  max_mem: 9616M
[01/01 03:13:44] d2.utils.events INFO:  eta: 4:35:24  iter: 99  total_loss: 0.8642  loss_cls: 0.185  loss_box_reg: 0.1482  loss_rpn_cls: 0.3894  loss_rpn_loc: 0.1756  time: 0.6947  data_time: 0.0178  lr: 0.0198  max_mem: 9616M
[01/01 03:13:58] d2.utils.events INFO:  eta: 4:35:50  iter: 119  total_loss: 0.7513  loss_cls: 0.1582  loss_box_reg: 0.1284  loss_rpn_cls: 0.3288  loss_rpn_loc: 0.1521  time: 0.6968  data_time: 0.0166  lr: 0.02  max_mem: 9616M
[01/01 03:14:12] d2.utils.events INFO:  eta: 4:35:36  iter: 139  total_loss: 0.8946  loss_cls: 0.1924  loss_box_reg: 0.1833  loss_rpn_cls: 0.338  loss_rpn_loc: 0.1866  time: 0.6978  data_time: 0.0190  lr: 0.02  max_mem: 9616M
[01/01 03:14:26] d2.utils.events INFO:  eta: 4:35:31  iter: 159  total_loss: 0.7851  loss_cls: 0.1768  loss_box_reg: 0.1654  loss_rpn_cls: 0.2886  loss_rpn_loc: 0.1878  time: 0.6993  data_time: 0.0193  lr: 0.02  max_mem: 9616M
[01/01 03:14:40] d2.utils.events INFO:  eta: 4:36:03  iter: 179  total_loss: 0.7934  loss_cls: 0.2027  loss_box_reg: 0.1878  loss_rpn_cls: 0.2499  loss_rpn_loc: 0.154  time: 0.7017  data_time: 0.0237  lr: 0.02  max_mem: 9616M
[01/01 03:14:55] d2.utils.events INFO:  eta: 4:35:49  iter: 199  total_loss: 0.7545  loss_cls: 0.1769  loss_box_reg: 0.1872  loss_rpn_cls: 0.234  loss_rpn_loc: 0.1354  time: 0.7023  data_time: 0.0206  lr: 0.02  max_mem: 9616M
[01/01 03:15:09] d2.utils.events INFO:  eta: 4:36:05  iter: 219  total_loss: 0.7705  loss_cls: 0.1813  loss_box_reg: 0.2085  loss_rpn_cls: 0.2112  loss_rpn_loc: 0.1466  time: 0.7033  data_time: 0.0190  lr: 0.02  max_mem: 9866M
[01/01 03:15:23] d2.utils.events INFO:  eta: 4:36:05  iter: 239  total_loss: 0.7947  loss_cls: 0.2027  loss_box_reg: 0.2282  loss_rpn_cls: 0.1881  loss_rpn_loc: 0.162  time: 0.7044  data_time: 0.0187  lr: 0.02  max_mem: 9866M
[01/01 03:15:38] d2.utils.events INFO:  eta: 4:36:34  iter: 259  total_loss: 0.7071  loss_cls: 0.1673  loss_box_reg: 0.2037  loss_rpn_cls: 0.1771  loss_rpn_loc: 0.1449  time: 0.7056  data_time: 0.0218  lr: 0.02  max_mem: 9866M
[01/01 03:15:52] d2.utils.events INFO:  eta: 4:36:24  iter: 279  total_loss: 0.7298  loss_cls: 0.1657  loss_box_reg: 0.2037  loss_rpn_cls: 0.1753  loss_rpn_loc: 0.1682  time: 0.7057  data_time: 0.0270  lr: 0.02  max_mem: 9866M
[01/01 03:16:06] d2.utils.events INFO:  eta: 4:35:41  iter: 299  total_loss: 0.724  loss_cls: 0.1745  loss_box_reg: 0.2191  loss_rpn_cls: 0.1661  loss_rpn_loc: 0.1482  time: 0.7054  data_time: 0.0153  lr: 0.02  max_mem: 9866M
[01/01 03:16:20] d2.utils.events INFO:  eta: 4:35:28  iter: 319  total_loss: 0.703  loss_cls: 0.1556  loss_box_reg: 0.1896  loss_rpn_cls: 0.1761  loss_rpn_loc: 0.1446  time: 0.7055  data_time: 0.0221  lr: 0.02  max_mem: 9866M
[01/01 03:16:34] d2.utils.events INFO:  eta: 4:35:04  iter: 339  total_loss: 0.7207  loss_cls: 0.1642  loss_box_reg: 0.2154  loss_rpn_cls: 0.1789  loss_rpn_loc: 0.1437  time: 0.7047  data_time: 0.0196  lr: 0.02  max_mem: 9866M
[01/01 03:16:48] d2.utils.events INFO:  eta: 4:35:00  iter: 359  total_loss: 0.6982  loss_cls: 0.1801  loss_box_reg: 0.2063  loss_rpn_cls: 0.1793  loss_rpn_loc: 0.1645  time: 0.7052  data_time: 0.0180  lr: 0.02  max_mem: 9866M
[01/01 03:17:02] d2.utils.events INFO:  eta: 4:34:37  iter: 379  total_loss: 0.6686  loss_cls: 0.162  loss_box_reg: 0.2087  loss_rpn_cls: 0.1592  loss_rpn_loc: 0.1342  time: 0.7045  data_time: 0.0190  lr: 0.02  max_mem: 9866M
[01/01 03:17:16] d2.utils.events INFO:  eta: 4:34:23  iter: 399  total_loss: 0.6898  loss_cls: 0.1575  loss_box_reg: 0.2194  loss_rpn_cls: 0.1645  loss_rpn_loc: 0.1454  time: 0.7043  data_time: 0.0204  lr: 0.02  max_mem: 9866M
[01/01 03:17:30] d2.utils.events INFO:  eta: 4:34:01  iter: 419  total_loss: 0.6922  loss_cls: 0.1594  loss_box_reg: 0.2061  loss_rpn_cls: 0.1632  loss_rpn_loc: 0.145  time: 0.7036  data_time: 0.0168  lr: 0.02  max_mem: 9866M
[01/01 03:17:44] d2.utils.events INFO:  eta: 4:33:32  iter: 439  total_loss: 0.6454  loss_cls: 0.1508  loss_box_reg: 0.2026  loss_rpn_cls: 0.1602  loss_rpn_loc: 0.1271  time: 0.7029  data_time: 0.0211  lr: 0.02  max_mem: 9866M
[01/01 03:17:58] d2.utils.events INFO:  eta: 4:33:34  iter: 459  total_loss: 0.6889  loss_cls: 0.1593  loss_box_reg: 0.2063  loss_rpn_cls: 0.1704  loss_rpn_loc: 0.1493  time: 0.7033  data_time: 0.0221  lr: 0.02  max_mem: 9866M
[01/01 03:18:12] d2.utils.events INFO:  eta: 4:33:23  iter: 479  total_loss: 0.6741  loss_cls: 0.143  loss_box_reg: 0.1935  loss_rpn_cls: 0.1556  loss_rpn_loc: 0.1657  time: 0.7033  data_time: 0.0237  lr: 0.02  max_mem: 9866M
[01/01 03:18:26] d2.utils.events INFO:  eta: 4:33:03  iter: 499  total_loss: 0.6634  loss_cls: 0.1553  loss_box_reg: 0.2051  loss_rpn_cls: 0.1637  loss_rpn_loc: 0.1362  time: 0.7033  data_time: 0.0141  lr: 0.02  max_mem: 9866M
[01/01 03:18:40] d2.utils.events INFO:  eta: 4:32:43  iter: 519  total_loss: 0.6577  loss_cls: 0.1546  loss_box_reg: 0.2079  loss_rpn_cls: 0.1412  loss_rpn_loc: 0.1331  time: 0.7030  data_time: 0.0211  lr: 0.02  max_mem: 9866M
[01/01 03:18:54] d2.utils.events INFO:  eta: 4:32:22  iter: 539  total_loss: 0.6871  loss_cls: 0.174  loss_box_reg: 0.2384  loss_rpn_cls: 0.1464  loss_rpn_loc: 0.133  time: 0.7028  data_time: 0.0179  lr: 0.02  max_mem: 9914M
[01/01 03:19:08] d2.utils.events INFO:  eta: 4:32:02  iter: 559  total_loss: 0.6337  loss_cls: 0.1486  loss_box_reg: 0.1913  loss_rpn_cls: 0.15  loss_rpn_loc: 0.1394  time: 0.7026  data_time: 0.0246  lr: 0.02  max_mem: 9914M
[01/01 03:19:21] d2.utils.events INFO:  eta: 4:31:23  iter: 579  total_loss: 0.6566  loss_cls: 0.1531  loss_box_reg: 0.2054  loss_rpn_cls: 0.1384  loss_rpn_loc: 0.1313  time: 0.7018  data_time: 0.0237  lr: 0.02  max_mem: 9914M
[01/01 03:19:36] d2.utils.events INFO:  eta: 4:31:15  iter: 599  total_loss: 0.6219  loss_cls: 0.1431  loss_box_reg: 0.2079  loss_rpn_cls: 0.1487  loss_rpn_loc: 0.125  time: 0.7019  data_time: 0.0193  lr: 0.02  max_mem: 9914M
[01/01 03:19:50] d2.utils.events INFO:  eta: 4:31:05  iter: 619  total_loss: 0.6331  loss_cls: 0.137  loss_box_reg: 0.2076  loss_rpn_cls: 0.1381  loss_rpn_loc: 0.1402  time: 0.7019  data_time: 0.0231  lr: 0.02  max_mem: 9914M
[01/01 03:20:04] d2.utils.events INFO:  eta: 4:30:52  iter: 639  total_loss: 0.6181  loss_cls: 0.1372  loss_box_reg: 0.1875  loss_rpn_cls: 0.1577  loss_rpn_loc: 0.1426  time: 0.7017  data_time: 0.0166  lr: 0.02  max_mem: 9914M
[01/01 03:20:17] d2.utils.events INFO:  eta: 4:30:30  iter: 659  total_loss: 0.6402  loss_cls: 0.1542  loss_box_reg: 0.2071  loss_rpn_cls: 0.1443  loss_rpn_loc: 0.1282  time: 0.7013  data_time: 0.0233  lr: 0.02  max_mem: 9914M
[01/01 03:20:31] d2.utils.events INFO:  eta: 4:30:16  iter: 679  total_loss: 0.6521  loss_cls: 0.148  loss_box_reg: 0.2113  loss_rpn_cls: 0.1595  loss_rpn_loc: 0.1364  time: 0.7013  data_time: 0.0238  lr: 0.02  max_mem: 9914M
[01/01 03:20:45] d2.utils.events INFO:  eta: 4:30:02  iter: 699  total_loss: 0.7232  loss_cls: 0.1726  loss_box_reg: 0.2316  loss_rpn_cls: 0.1516  loss_rpn_loc: 0.1621  time: 0.7013  data_time: 0.0198  lr: 0.02  max_mem: 9914M
[01/01 03:20:59] d2.utils.events INFO:  eta: 4:29:34  iter: 719  total_loss: 0.6695  loss_cls: 0.1471  loss_box_reg: 0.1934  loss_rpn_cls: 0.1374  loss_rpn_loc: 0.1461  time: 0.7010  data_time: 0.0202  lr: 0.02  max_mem: 9914M
[01/01 03:21:13] d2.utils.events INFO:  eta: 4:29:26  iter: 739  total_loss: 0.6616  loss_cls: 0.1514  loss_box_reg: 0.1904  loss_rpn_cls: 0.1405  loss_rpn_loc: 0.1374  time: 0.7013  data_time: 0.0182  lr: 0.02  max_mem: 9914M
[01/01 03:21:28] d2.utils.events INFO:  eta: 4:29:17  iter: 759  total_loss: 0.6627  loss_cls: 0.1512  loss_box_reg: 0.21  loss_rpn_cls: 0.1503  loss_rpn_loc: 0.1615  time: 0.7015  data_time: 0.0218  lr: 0.02  max_mem: 9914M
[01/01 03:21:42] d2.utils.events INFO:  eta: 4:29:07  iter: 779  total_loss: 0.6739  loss_cls: 0.152  loss_box_reg: 0.2149  loss_rpn_cls: 0.1367  loss_rpn_loc: 0.1505  time: 0.7017  data_time: 0.0296  lr: 0.02  max_mem: 9914M
[01/01 03:21:56] d2.utils.events INFO:  eta: 4:28:45  iter: 799  total_loss: 0.6135  loss_cls: 0.1401  loss_box_reg: 0.2062  loss_rpn_cls: 0.1348  loss_rpn_loc: 0.1236  time: 0.7015  data_time: 0.0214  lr: 0.02  max_mem: 9914M
[01/01 03:22:10] d2.utils.events INFO:  eta: 4:28:24  iter: 819  total_loss: 0.6852  loss_cls: 0.1658  loss_box_reg: 0.2288  loss_rpn_cls: 0.1352  loss_rpn_loc: 0.1388  time: 0.7014  data_time: 0.0148  lr: 0.02  max_mem: 9914M
[01/01 03:22:24] d2.utils.events INFO:  eta: 4:28:17  iter: 839  total_loss: 0.6631  loss_cls: 0.1579  loss_box_reg: 0.2116  loss_rpn_cls: 0.143  loss_rpn_loc: 0.1408  time: 0.7016  data_time: 0.0205  lr: 0.02  max_mem: 9914M
[01/01 03:22:38] d2.utils.events INFO:  eta: 4:28:15  iter: 859  total_loss: 0.7047  loss_cls: 0.1733  loss_box_reg: 0.2343  loss_rpn_cls: 0.1403  loss_rpn_loc: 0.149  time: 0.7019  data_time: 0.0250  lr: 0.02  max_mem: 9914M
[01/01 03:22:53] d2.utils.events INFO:  eta: 4:28:05  iter: 879  total_loss: 0.6205  loss_cls: 0.1474  loss_box_reg: 0.2082  loss_rpn_cls: 0.1376  loss_rpn_loc: 0.127  time: 0.7025  data_time: 0.0178  lr: 0.02  max_mem: 9914M
[01/01 03:23:07] d2.utils.events INFO:  eta: 4:27:49  iter: 899  total_loss: 0.6231  loss_cls: 0.1424  loss_box_reg: 0.2216  loss_rpn_cls: 0.1322  loss_rpn_loc: 0.126  time: 0.7024  data_time: 0.0162  lr: 0.02  max_mem: 9914M
[01/01 03:23:21] d2.utils.events INFO:  eta: 4:27:36  iter: 919  total_loss: 0.6531  loss_cls: 0.1548  loss_box_reg: 0.2282  loss_rpn_cls: 0.1231  loss_rpn_loc: 0.1357  time: 0.7025  data_time: 0.0204  lr: 0.02  max_mem: 9914M
[01/01 03:23:35] d2.utils.events INFO:  eta: 4:27:19  iter: 939  total_loss: 0.6174  loss_cls: 0.1377  loss_box_reg: 0.1964  loss_rpn_cls: 0.1202  loss_rpn_loc: 0.1542  time: 0.7024  data_time: 0.0227  lr: 0.02  max_mem: 9914M
[01/01 03:23:49] d2.utils.events INFO:  eta: 4:27:08  iter: 959  total_loss: 0.6214  loss_cls: 0.1377  loss_box_reg: 0.1946  loss_rpn_cls: 0.1361  loss_rpn_loc: 0.1332  time: 0.7027  data_time: 0.0189  lr: 0.02  max_mem: 9914M
[01/01 03:24:03] d2.utils.events INFO:  eta: 4:26:57  iter: 979  total_loss: 0.6455  loss_cls: 0.1459  loss_box_reg: 0.2128  loss_rpn_cls: 0.1459  loss_rpn_loc: 0.1468  time: 0.7029  data_time: 0.0202  lr: 0.02  max_mem: 9914M
[01/01 03:24:18] d2.utils.events INFO:  eta: 4:26:43  iter: 999  total_loss: 0.6751  loss_cls: 0.1683  loss_box_reg: 0.1998  loss_rpn_cls: 0.143  loss_rpn_loc: 0.132  time: 0.7030  data_time: 0.0154  lr: 0.02  max_mem: 9914M
[01/01 03:24:32] d2.utils.events INFO:  eta: 4:26:40  iter: 1019  total_loss: 0.6936  loss_cls: 0.1602  loss_box_reg: 0.2291  loss_rpn_cls: 0.147  loss_rpn_loc: 0.1445  time: 0.7030  data_time: 0.0244  lr: 0.02  max_mem: 9914M
[01/01 03:24:46] d2.utils.events INFO:  eta: 4:26:39  iter: 1039  total_loss: 0.6106  loss_cls: 0.1433  loss_box_reg: 0.2047  loss_rpn_cls: 0.1339  loss_rpn_loc: 0.1366  time: 0.7029  data_time: 0.0179  lr: 0.02  max_mem: 9914M
[01/01 03:25:00] d2.utils.events INFO:  eta: 4:26:32  iter: 1059  total_loss: 0.6847  loss_cls: 0.158  loss_box_reg: 0.2258  loss_rpn_cls: 0.1318  loss_rpn_loc: 0.1263  time: 0.7030  data_time: 0.0218  lr: 0.02  max_mem: 9914M
[01/01 03:25:14] d2.utils.events INFO:  eta: 4:26:26  iter: 1079  total_loss: 0.7028  loss_cls: 0.1547  loss_box_reg: 0.2338  loss_rpn_cls: 0.1317  loss_rpn_loc: 0.1547  time: 0.7033  data_time: 0.0172  lr: 0.02  max_mem: 9914M
[01/01 03:25:28] d2.utils.events INFO:  eta: 4:25:57  iter: 1099  total_loss: 0.6417  loss_cls: 0.1529  loss_box_reg: 0.1987  loss_rpn_cls: 0.1408  loss_rpn_loc: 0.131  time: 0.7032  data_time: 0.0195  lr: 0.02  max_mem: 9914M
[01/01 03:25:42] d2.utils.events INFO:  eta: 4:25:43  iter: 1119  total_loss: 0.6584  loss_cls: 0.16  loss_box_reg: 0.1979  loss_rpn_cls: 0.1371  loss_rpn_loc: 0.153  time: 0.7032  data_time: 0.0152  lr: 0.02  max_mem: 9914M
[01/01 03:25:56] d2.utils.events INFO:  eta: 4:25:29  iter: 1139  total_loss: 0.5838  loss_cls: 0.1353  loss_box_reg: 0.1791  loss_rpn_cls: 0.1217  loss_rpn_loc: 0.115  time: 0.7031  data_time: 0.0200  lr: 0.02  max_mem: 9914M
[01/01 03:26:11] d2.utils.events INFO:  eta: 4:25:08  iter: 1159  total_loss: 0.6236  loss_cls: 0.1483  loss_box_reg: 0.2005  loss_rpn_cls: 0.1388  loss_rpn_loc: 0.1377  time: 0.7032  data_time: 0.0201  lr: 0.02  max_mem: 9914M
[01/01 03:26:25] d2.utils.events INFO:  eta: 4:24:50  iter: 1179  total_loss: 0.61  loss_cls: 0.1398  loss_box_reg: 0.1895  loss_rpn_cls: 0.1266  loss_rpn_loc: 0.1298  time: 0.7038  data_time: 0.0205  lr: 0.02  max_mem: 9914M
[01/01 03:26:39] d2.utils.events INFO:  eta: 4:24:34  iter: 1199  total_loss: 0.5877  loss_cls: 0.137  loss_box_reg: 0.1973  loss_rpn_cls: 0.1199  loss_rpn_loc: 0.1324  time: 0.7038  data_time: 0.0229  lr: 0.02  max_mem: 9914M
[01/01 03:26:53] d2.utils.events INFO:  eta: 4:24:14  iter: 1219  total_loss: 0.538  loss_cls: 0.1279  loss_box_reg: 0.1911  loss_rpn_cls: 0.1228  loss_rpn_loc: 0.123  time: 0.7038  data_time: 0.0200  lr: 0.02  max_mem: 9914M
[01/01 03:27:07] d2.utils.events INFO:  eta: 4:23:55  iter: 1239  total_loss: 0.6294  loss_cls: 0.1501  loss_box_reg: 0.2029  loss_rpn_cls: 0.1345  loss_rpn_loc: 0.1362  time: 0.7037  data_time: 0.0223  lr: 0.02  max_mem: 9914M
[01/01 03:27:22] d2.utils.events INFO:  eta: 4:23:30  iter: 1259  total_loss: 0.5935  loss_cls: 0.1438  loss_box_reg: 0.1823  loss_rpn_cls: 0.1208  loss_rpn_loc: 0.1314  time: 0.7040  data_time: 0.0176  lr: 0.02  max_mem: 9914M
[01/01 03:27:36] d2.utils.events INFO:  eta: 4:23:21  iter: 1279  total_loss: 0.6009  loss_cls: 0.1435  loss_box_reg: 0.2024  loss_rpn_cls: 0.1214  loss_rpn_loc: 0.1289  time: 0.7042  data_time: 0.0162  lr: 0.02  max_mem: 9914M
[01/01 03:27:50] d2.utils.events INFO:  eta: 4:23:15  iter: 1299  total_loss: 0.6361  loss_cls: 0.1462  loss_box_reg: 0.2058  loss_rpn_cls: 0.1351  loss_rpn_loc: 0.1375  time: 0.7040  data_time: 0.0227  lr: 0.02  max_mem: 9914M
[01/01 03:28:04] d2.utils.events INFO:  eta: 4:23:02  iter: 1319  total_loss: 0.641  loss_cls: 0.1535  loss_box_reg: 0.2038  loss_rpn_cls: 0.1274  loss_rpn_loc: 0.1389  time: 0.7039  data_time: 0.0222  lr: 0.02  max_mem: 9914M
[01/01 03:28:18] d2.utils.events INFO:  eta: 4:22:55  iter: 1339  total_loss: 0.5899  loss_cls: 0.1507  loss_box_reg: 0.2193  loss_rpn_cls: 0.1076  loss_rpn_loc: 0.1323  time: 0.7040  data_time: 0.0197  lr: 0.02  max_mem: 9914M
[01/01 03:28:33] d2.utils.events INFO:  eta: 4:22:41  iter: 1359  total_loss: 0.6471  loss_cls: 0.1417  loss_box_reg: 0.2147  loss_rpn_cls: 0.1185  loss_rpn_loc: 0.1301  time: 0.7042  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:28:47] d2.utils.events INFO:  eta: 4:22:29  iter: 1379  total_loss: 0.5656  loss_cls: 0.1353  loss_box_reg: 0.2014  loss_rpn_cls: 0.1105  loss_rpn_loc: 0.1319  time: 0.7043  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:29:01] d2.utils.events INFO:  eta: 4:22:15  iter: 1399  total_loss: 0.5908  loss_cls: 0.155  loss_box_reg: 0.2002  loss_rpn_cls: 0.1252  loss_rpn_loc: 0.1251  time: 0.7043  data_time: 0.0129  lr: 0.02  max_mem: 9939M
[01/01 03:29:15] d2.utils.events INFO:  eta: 4:21:59  iter: 1419  total_loss: 0.632  loss_cls: 0.1534  loss_box_reg: 0.2004  loss_rpn_cls: 0.1363  loss_rpn_loc: 0.1351  time: 0.7042  data_time: 0.0171  lr: 0.02  max_mem: 9939M
[01/01 03:29:29] d2.utils.events INFO:  eta: 4:21:49  iter: 1439  total_loss: 0.5895  loss_cls: 0.1396  loss_box_reg: 0.186  loss_rpn_cls: 0.1264  loss_rpn_loc: 0.1259  time: 0.7042  data_time: 0.0165  lr: 0.02  max_mem: 9939M
[01/01 03:29:43] d2.utils.events INFO:  eta: 4:21:35  iter: 1459  total_loss: 0.6301  loss_cls: 0.1667  loss_box_reg: 0.2194  loss_rpn_cls: 0.132  loss_rpn_loc: 0.1261  time: 0.7044  data_time: 0.0183  lr: 0.02  max_mem: 9939M
[01/01 03:29:57] d2.utils.events INFO:  eta: 4:21:20  iter: 1479  total_loss: 0.6535  loss_cls: 0.1541  loss_box_reg: 0.2074  loss_rpn_cls: 0.1217  loss_rpn_loc: 0.1343  time: 0.7044  data_time: 0.0162  lr: 0.02  max_mem: 9939M
[01/01 03:30:12] d2.utils.events INFO:  eta: 4:21:29  iter: 1499  total_loss: 0.5583  loss_cls: 0.1246  loss_box_reg: 0.1718  loss_rpn_cls: 0.1268  loss_rpn_loc: 0.1483  time: 0.7045  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:30:26] d2.utils.events INFO:  eta: 4:21:23  iter: 1519  total_loss: 0.5664  loss_cls: 0.1242  loss_box_reg: 0.1891  loss_rpn_cls: 0.1226  loss_rpn_loc: 0.1203  time: 0.7044  data_time: 0.0207  lr: 0.02  max_mem: 9939M
[01/01 03:30:40] d2.utils.events INFO:  eta: 4:21:15  iter: 1539  total_loss: 0.5498  loss_cls: 0.1185  loss_box_reg: 0.1767  loss_rpn_cls: 0.1207  loss_rpn_loc: 0.1367  time: 0.7046  data_time: 0.0148  lr: 0.02  max_mem: 9939M
[01/01 03:30:55] d2.utils.events INFO:  eta: 4:21:11  iter: 1559  total_loss: 0.6052  loss_cls: 0.1412  loss_box_reg: 0.1945  loss_rpn_cls: 0.1131  loss_rpn_loc: 0.1423  time: 0.7049  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:31:09] d2.utils.events INFO:  eta: 4:21:27  iter: 1579  total_loss: 0.5998  loss_cls: 0.151  loss_box_reg: 0.1916  loss_rpn_cls: 0.1217  loss_rpn_loc: 0.1386  time: 0.7049  data_time: 0.0243  lr: 0.02  max_mem: 9939M
[01/01 03:31:23] d2.utils.events INFO:  eta: 4:21:02  iter: 1599  total_loss: 0.5648  loss_cls: 0.1469  loss_box_reg: 0.2023  loss_rpn_cls: 0.1092  loss_rpn_loc: 0.1099  time: 0.7048  data_time: 0.0200  lr: 0.02  max_mem: 9939M
[01/01 03:31:37] d2.utils.events INFO:  eta: 4:20:53  iter: 1619  total_loss: 0.6124  loss_cls: 0.128  loss_box_reg: 0.1822  loss_rpn_cls: 0.1186  loss_rpn_loc: 0.1339  time: 0.7049  data_time: 0.0238  lr: 0.02  max_mem: 9939M
[01/01 03:31:52] d2.utils.events INFO:  eta: 4:20:49  iter: 1639  total_loss: 0.579  loss_cls: 0.1342  loss_box_reg: 0.1821  loss_rpn_cls: 0.1211  loss_rpn_loc: 0.1281  time: 0.7053  data_time: 0.0195  lr: 0.02  max_mem: 9939M
[01/01 03:32:06] d2.utils.events INFO:  eta: 4:20:59  iter: 1659  total_loss: 0.5321  loss_cls: 0.1265  loss_box_reg: 0.1627  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.1249  time: 0.7053  data_time: 0.0180  lr: 0.02  max_mem: 9939M
[01/01 03:32:20] d2.utils.events INFO:  eta: 4:20:54  iter: 1679  total_loss: 0.5713  loss_cls: 0.1229  loss_box_reg: 0.1746  loss_rpn_cls: 0.1158  loss_rpn_loc: 0.1377  time: 0.7053  data_time: 0.0219  lr: 0.02  max_mem: 9939M
[01/01 03:32:34] d2.utils.events INFO:  eta: 4:21:01  iter: 1699  total_loss: 0.5447  loss_cls: 0.1314  loss_box_reg: 0.1864  loss_rpn_cls: 0.1073  loss_rpn_loc: 0.1246  time: 0.7053  data_time: 0.0230  lr: 0.02  max_mem: 9939M
[01/01 03:32:49] d2.utils.events INFO:  eta: 4:20:59  iter: 1719  total_loss: 0.6246  loss_cls: 0.13  loss_box_reg: 0.1851  loss_rpn_cls: 0.1207  loss_rpn_loc: 0.1443  time: 0.7055  data_time: 0.0201  lr: 0.02  max_mem: 9939M
[01/01 03:33:03] d2.utils.events INFO:  eta: 4:20:58  iter: 1739  total_loss: 0.5736  loss_cls: 0.1373  loss_box_reg: 0.1915  loss_rpn_cls: 0.1063  loss_rpn_loc: 0.1279  time: 0.7057  data_time: 0.0155  lr: 0.02  max_mem: 9939M
[01/01 03:33:17] d2.utils.events INFO:  eta: 4:20:44  iter: 1759  total_loss: 0.5627  loss_cls: 0.1336  loss_box_reg: 0.1834  loss_rpn_cls: 0.1222  loss_rpn_loc: 0.1294  time: 0.7057  data_time: 0.0205  lr: 0.02  max_mem: 9939M
[01/01 03:33:31] d2.utils.events INFO:  eta: 4:20:17  iter: 1779  total_loss: 0.5704  loss_cls: 0.1415  loss_box_reg: 0.2023  loss_rpn_cls: 0.1121  loss_rpn_loc: 0.1171  time: 0.7055  data_time: 0.0171  lr: 0.02  max_mem: 9939M
[01/01 03:33:45] d2.utils.events INFO:  eta: 4:20:23  iter: 1799  total_loss: 0.5547  loss_cls: 0.1322  loss_box_reg: 0.1822  loss_rpn_cls: 0.1066  loss_rpn_loc: 0.1287  time: 0.7057  data_time: 0.0212  lr: 0.02  max_mem: 9939M
[01/01 03:34:00] d2.utils.events INFO:  eta: 4:20:22  iter: 1819  total_loss: 0.5209  loss_cls: 0.1276  loss_box_reg: 0.1857  loss_rpn_cls: 0.09544  loss_rpn_loc: 0.1102  time: 0.7058  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:34:14] d2.utils.events INFO:  eta: 4:20:08  iter: 1839  total_loss: 0.6571  loss_cls: 0.1534  loss_box_reg: 0.2203  loss_rpn_cls: 0.1229  loss_rpn_loc: 0.1369  time: 0.7060  data_time: 0.0244  lr: 0.02  max_mem: 9939M
[01/01 03:34:28] d2.utils.events INFO:  eta: 4:19:39  iter: 1859  total_loss: 0.5947  loss_cls: 0.1418  loss_box_reg: 0.2054  loss_rpn_cls: 0.1129  loss_rpn_loc: 0.1214  time: 0.7059  data_time: 0.0148  lr: 0.02  max_mem: 9939M
[01/01 03:34:43] d2.utils.events INFO:  eta: 4:19:27  iter: 1879  total_loss: 0.5858  loss_cls: 0.1502  loss_box_reg: 0.1917  loss_rpn_cls: 0.1154  loss_rpn_loc: 0.1431  time: 0.7061  data_time: 0.0217  lr: 0.02  max_mem: 9939M
[01/01 03:34:57] d2.utils.events INFO:  eta: 4:19:42  iter: 1899  total_loss: 0.5676  loss_cls: 0.1398  loss_box_reg: 0.1925  loss_rpn_cls: 0.1099  loss_rpn_loc: 0.1145  time: 0.7062  data_time: 0.0229  lr: 0.02  max_mem: 9939M
[01/01 03:35:11] d2.utils.events INFO:  eta: 4:19:30  iter: 1919  total_loss: 0.5664  loss_cls: 0.1374  loss_box_reg: 0.1886  loss_rpn_cls: 0.11  loss_rpn_loc: 0.1394  time: 0.7062  data_time: 0.0203  lr: 0.02  max_mem: 9939M
[01/01 03:35:25] d2.utils.events INFO:  eta: 4:19:23  iter: 1939  total_loss: 0.5973  loss_cls: 0.1464  loss_box_reg: 0.2071  loss_rpn_cls: 0.112  loss_rpn_loc: 0.1218  time: 0.7062  data_time: 0.0200  lr: 0.02  max_mem: 9939M
[01/01 03:35:40] d2.utils.events INFO:  eta: 4:19:15  iter: 1959  total_loss: 0.6332  loss_cls: 0.1562  loss_box_reg: 0.2296  loss_rpn_cls: 0.1107  loss_rpn_loc: 0.1239  time: 0.7063  data_time: 0.0239  lr: 0.02  max_mem: 9939M
[01/01 03:35:54] d2.utils.events INFO:  eta: 4:19:14  iter: 1979  total_loss: 0.5968  loss_cls: 0.1465  loss_box_reg: 0.1899  loss_rpn_cls: 0.1032  loss_rpn_loc: 0.1245  time: 0.7064  data_time: 0.0305  lr: 0.02  max_mem: 9939M
[01/01 03:36:08] d2.utils.events INFO:  eta: 4:19:00  iter: 1999  total_loss: 0.6162  loss_cls: 0.1328  loss_box_reg: 0.2037  loss_rpn_cls: 0.1131  loss_rpn_loc: 0.1344  time: 0.7064  data_time: 0.0176  lr: 0.02  max_mem: 9939M
[01/01 03:36:22] d2.utils.events INFO:  eta: 4:18:47  iter: 2019  total_loss: 0.5456  loss_cls: 0.1229  loss_box_reg: 0.1884  loss_rpn_cls: 0.1005  loss_rpn_loc: 0.1292  time: 0.7064  data_time: 0.0218  lr: 0.02  max_mem: 9939M
[01/01 03:36:36] d2.utils.events INFO:  eta: 4:18:34  iter: 2039  total_loss: 0.5274  loss_cls: 0.116  loss_box_reg: 0.176  loss_rpn_cls: 0.103  loss_rpn_loc: 0.121  time: 0.7064  data_time: 0.0166  lr: 0.02  max_mem: 9939M
[01/01 03:36:51] d2.utils.events INFO:  eta: 4:18:28  iter: 2059  total_loss: 0.5819  loss_cls: 0.1287  loss_box_reg: 0.2076  loss_rpn_cls: 0.1151  loss_rpn_loc: 0.1322  time: 0.7065  data_time: 0.0213  lr: 0.02  max_mem: 9939M
[01/01 03:37:05] d2.utils.events INFO:  eta: 4:18:16  iter: 2079  total_loss: 0.5891  loss_cls: 0.1429  loss_box_reg: 0.1974  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1198  time: 0.7067  data_time: 0.0215  lr: 0.02  max_mem: 9939M
[01/01 03:37:19] d2.utils.events INFO:  eta: 4:17:58  iter: 2099  total_loss: 0.5402  loss_cls: 0.1259  loss_box_reg: 0.1994  loss_rpn_cls: 0.1002  loss_rpn_loc: 0.1241  time: 0.7065  data_time: 0.0202  lr: 0.02  max_mem: 9939M
[01/01 03:37:33] d2.utils.events INFO:  eta: 4:17:40  iter: 2119  total_loss: 0.5617  loss_cls: 0.1339  loss_box_reg: 0.1907  loss_rpn_cls: 0.1234  loss_rpn_loc: 0.1223  time: 0.7064  data_time: 0.0251  lr: 0.02  max_mem: 9939M
[01/01 03:37:47] d2.utils.events INFO:  eta: 4:17:34  iter: 2139  total_loss: 0.5447  loss_cls: 0.1291  loss_box_reg: 0.1848  loss_rpn_cls: 0.1138  loss_rpn_loc: 0.1316  time: 0.7066  data_time: 0.0151  lr: 0.02  max_mem: 9939M
[01/01 03:38:02] d2.utils.events INFO:  eta: 4:17:27  iter: 2159  total_loss: 0.6111  loss_cls: 0.1513  loss_box_reg: 0.206  loss_rpn_cls: 0.1118  loss_rpn_loc: 0.1349  time: 0.7067  data_time: 0.0177  lr: 0.02  max_mem: 9939M
[01/01 03:38:16] d2.utils.events INFO:  eta: 4:17:03  iter: 2179  total_loss: 0.518  loss_cls: 0.1259  loss_box_reg: 0.1913  loss_rpn_cls: 0.1143  loss_rpn_loc: 0.1115  time: 0.7067  data_time: 0.0188  lr: 0.02  max_mem: 9939M
[01/01 03:38:30] d2.utils.events INFO:  eta: 4:16:49  iter: 2199  total_loss: 0.5484  loss_cls: 0.1283  loss_box_reg: 0.1878  loss_rpn_cls: 0.1039  loss_rpn_loc: 0.1293  time: 0.7066  data_time: 0.0198  lr: 0.02  max_mem: 9939M
[01/01 03:38:44] d2.utils.events INFO:  eta: 4:16:42  iter: 2219  total_loss: 0.5444  loss_cls: 0.1245  loss_box_reg: 0.1821  loss_rpn_cls: 0.1015  loss_rpn_loc: 0.1079  time: 0.7067  data_time: 0.0207  lr: 0.02  max_mem: 9939M
[01/01 03:38:59] d2.utils.events INFO:  eta: 4:16:54  iter: 2239  total_loss: 0.5835  loss_cls: 0.1487  loss_box_reg: 0.1966  loss_rpn_cls: 0.108  loss_rpn_loc: 0.1252  time: 0.7068  data_time: 0.0188  lr: 0.02  max_mem: 9939M
[01/01 03:39:13] d2.utils.events INFO:  eta: 4:16:33  iter: 2259  total_loss: 0.5939  loss_cls: 0.144  loss_box_reg: 0.2149  loss_rpn_cls: 0.12  loss_rpn_loc: 0.1183  time: 0.7068  data_time: 0.0181  lr: 0.02  max_mem: 9939M
[01/01 03:39:27] d2.utils.events INFO:  eta: 4:16:24  iter: 2279  total_loss: 0.5756  loss_cls: 0.138  loss_box_reg: 0.1829  loss_rpn_cls: 0.09889  loss_rpn_loc: 0.1198  time: 0.7068  data_time: 0.0222  lr: 0.02  max_mem: 9939M
[01/01 03:39:42] d2.utils.events INFO:  eta: 4:16:22  iter: 2299  total_loss: 0.5871  loss_cls: 0.1298  loss_box_reg: 0.2083  loss_rpn_cls: 0.1139  loss_rpn_loc: 0.139  time: 0.7071  data_time: 0.0225  lr: 0.02  max_mem: 9939M
[01/01 03:39:57] d2.utils.events INFO:  eta: 4:16:22  iter: 2319  total_loss: 0.513  loss_cls: 0.1178  loss_box_reg: 0.1794  loss_rpn_cls: 0.111  loss_rpn_loc: 0.1161  time: 0.7074  data_time: 0.0193  lr: 0.02  max_mem: 9939M
[01/01 03:40:11] d2.utils.events INFO:  eta: 4:16:09  iter: 2339  total_loss: 0.6054  loss_cls: 0.1478  loss_box_reg: 0.1882  loss_rpn_cls: 0.1109  loss_rpn_loc: 0.1435  time: 0.7075  data_time: 0.0214  lr: 0.02  max_mem: 9939M
[01/01 03:40:25] d2.utils.events INFO:  eta: 4:15:45  iter: 2359  total_loss: 0.6004  loss_cls: 0.1459  loss_box_reg: 0.198  loss_rpn_cls: 0.1291  loss_rpn_loc: 0.1386  time: 0.7073  data_time: 0.0156  lr: 0.02  max_mem: 9939M
[01/01 03:40:39] d2.utils.events INFO:  eta: 4:15:39  iter: 2379  total_loss: 0.5896  loss_cls: 0.135  loss_box_reg: 0.2091  loss_rpn_cls: 0.1073  loss_rpn_loc: 0.1215  time: 0.7075  data_time: 0.0213  lr: 0.02  max_mem: 9939M
[01/01 03:40:54] d2.utils.events INFO:  eta: 4:15:42  iter: 2399  total_loss: 0.5261  loss_cls: 0.1215  loss_box_reg: 0.1866  loss_rpn_cls: 0.1108  loss_rpn_loc: 0.1229  time: 0.7077  data_time: 0.0192  lr: 0.02  max_mem: 9939M
[01/01 03:41:09] d2.utils.events INFO:  eta: 4:15:35  iter: 2419  total_loss: 0.5843  loss_cls: 0.1281  loss_box_reg: 0.1888  loss_rpn_cls: 0.1144  loss_rpn_loc: 0.1281  time: 0.7079  data_time: 0.0202  lr: 0.02  max_mem: 9939M
[01/01 03:41:23] d2.utils.events INFO:  eta: 4:15:18  iter: 2439  total_loss: 0.6277  loss_cls: 0.1464  loss_box_reg: 0.2167  loss_rpn_cls: 0.1252  loss_rpn_loc: 0.1301  time: 0.7079  data_time: 0.0178  lr: 0.02  max_mem: 9939M
[01/01 03:41:37] d2.utils.events INFO:  eta: 4:15:06  iter: 2459  total_loss: 0.5629  loss_cls: 0.129  loss_box_reg: 0.1997  loss_rpn_cls: 0.12  loss_rpn_loc: 0.1451  time: 0.7080  data_time: 0.0233  lr: 0.02  max_mem: 9939M
[01/01 03:41:52] d2.utils.events INFO:  eta: 4:14:56  iter: 2479  total_loss: 0.5836  loss_cls: 0.1383  loss_box_reg: 0.1952  loss_rpn_cls: 0.1148  loss_rpn_loc: 0.139  time: 0.7082  data_time: 0.0169  lr: 0.02  max_mem: 9939M
[01/01 03:42:06] d2.utils.events INFO:  eta: 4:14:39  iter: 2499  total_loss: 0.5756  loss_cls: 0.1181  loss_box_reg: 0.1752  loss_rpn_cls: 0.09807  loss_rpn_loc: 0.1356  time: 0.7081  data_time: 0.0202  lr: 0.02  max_mem: 9939M
[01/01 03:42:20] d2.utils.events INFO:  eta: 4:14:28  iter: 2519  total_loss: 0.5405  loss_cls: 0.1117  loss_box_reg: 0.1778  loss_rpn_cls: 0.1036  loss_rpn_loc: 0.1207  time: 0.7081  data_time: 0.0176  lr: 0.02  max_mem: 9939M
[01/01 03:42:34] d2.utils.events INFO:  eta: 4:14:12  iter: 2539  total_loss: 0.6056  loss_cls: 0.1401  loss_box_reg: 0.2109  loss_rpn_cls: 0.1192  loss_rpn_loc: 0.1593  time: 0.7081  data_time: 0.0239  lr: 0.02  max_mem: 9939M
[01/01 03:42:49] d2.utils.events INFO:  eta: 4:13:58  iter: 2559  total_loss: 0.5488  loss_cls: 0.1116  loss_box_reg: 0.1729  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.1275  time: 0.7081  data_time: 0.0165  lr: 0.02  max_mem: 9939M
[01/01 03:43:03] d2.utils.events INFO:  eta: 4:13:38  iter: 2579  total_loss: 0.5755  loss_cls: 0.1301  loss_box_reg: 0.1878  loss_rpn_cls: 0.1146  loss_rpn_loc: 0.1319  time: 0.7081  data_time: 0.0181  lr: 0.02  max_mem: 9939M
[01/01 03:43:17] d2.utils.events INFO:  eta: 4:13:24  iter: 2599  total_loss: 0.6225  loss_cls: 0.1443  loss_box_reg: 0.2038  loss_rpn_cls: 0.106  loss_rpn_loc: 0.1252  time: 0.7080  data_time: 0.0146  lr: 0.02  max_mem: 9939M
[01/01 03:43:30] d2.utils.events INFO:  eta: 4:12:59  iter: 2619  total_loss: 0.5537  loss_cls: 0.1176  loss_box_reg: 0.1829  loss_rpn_cls: 0.1137  loss_rpn_loc: 0.14  time: 0.7078  data_time: 0.0221  lr: 0.02  max_mem: 9939M
[01/01 03:43:45] d2.utils.events INFO:  eta: 4:12:40  iter: 2639  total_loss: 0.5199  loss_cls: 0.1227  loss_box_reg: 0.1792  loss_rpn_cls: 0.09903  loss_rpn_loc: 0.1336  time: 0.7079  data_time: 0.0225  lr: 0.02  max_mem: 9939M
[01/01 03:43:59] d2.utils.events INFO:  eta: 4:12:27  iter: 2659  total_loss: 0.5715  loss_cls: 0.1251  loss_box_reg: 0.1964  loss_rpn_cls: 0.1078  loss_rpn_loc: 0.1268  time: 0.7080  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:44:13] d2.utils.events INFO:  eta: 4:12:08  iter: 2679  total_loss: 0.5179  loss_cls: 0.1161  loss_box_reg: 0.1685  loss_rpn_cls: 0.09153  loss_rpn_loc: 0.1194  time: 0.7080  data_time: 0.0236  lr: 0.02  max_mem: 9939M
[01/01 03:44:27] d2.utils.events INFO:  eta: 4:11:54  iter: 2699  total_loss: 0.5577  loss_cls: 0.1285  loss_box_reg: 0.1689  loss_rpn_cls: 0.111  loss_rpn_loc: 0.1402  time: 0.7079  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 03:44:41] d2.utils.events INFO:  eta: 4:11:21  iter: 2719  total_loss: 0.5509  loss_cls: 0.1201  loss_box_reg: 0.1829  loss_rpn_cls: 0.1031  loss_rpn_loc: 0.1335  time: 0.7078  data_time: 0.0211  lr: 0.02  max_mem: 9939M
[01/01 03:44:55] d2.utils.events INFO:  eta: 4:10:59  iter: 2739  total_loss: 0.5454  loss_cls: 0.1237  loss_box_reg: 0.1962  loss_rpn_cls: 0.09915  loss_rpn_loc: 0.108  time: 0.7078  data_time: 0.0225  lr: 0.02  max_mem: 9939M
[01/01 03:45:09] d2.utils.events INFO:  eta: 4:10:50  iter: 2759  total_loss: 0.5172  loss_cls: 0.1187  loss_box_reg: 0.1735  loss_rpn_cls: 0.1052  loss_rpn_loc: 0.1142  time: 0.7078  data_time: 0.0186  lr: 0.02  max_mem: 9939M
[01/01 03:45:23] d2.utils.events INFO:  eta: 4:10:43  iter: 2779  total_loss: 0.5313  loss_cls: 0.1269  loss_box_reg: 0.1747  loss_rpn_cls: 0.09666  loss_rpn_loc: 0.1103  time: 0.7078  data_time: 0.0201  lr: 0.02  max_mem: 9939M
[01/01 03:45:38] d2.utils.events INFO:  eta: 4:10:21  iter: 2799  total_loss: 0.5697  loss_cls: 0.1405  loss_box_reg: 0.2124  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.1161  time: 0.7077  data_time: 0.0222  lr: 0.02  max_mem: 9939M
[01/01 03:45:52] d2.utils.events INFO:  eta: 4:09:59  iter: 2819  total_loss: 0.5087  loss_cls: 0.1184  loss_box_reg: 0.166  loss_rpn_cls: 0.1055  loss_rpn_loc: 0.1089  time: 0.7077  data_time: 0.0203  lr: 0.02  max_mem: 9939M
[01/01 03:46:06] d2.utils.events INFO:  eta: 4:09:44  iter: 2839  total_loss: 0.5003  loss_cls: 0.1237  loss_box_reg: 0.1676  loss_rpn_cls: 0.1026  loss_rpn_loc: 0.1139  time: 0.7076  data_time: 0.0207  lr: 0.02  max_mem: 9939M
[01/01 03:46:20] d2.utils.events INFO:  eta: 4:09:33  iter: 2859  total_loss: 0.5368  loss_cls: 0.1309  loss_box_reg: 0.1724  loss_rpn_cls: 0.1141  loss_rpn_loc: 0.1244  time: 0.7076  data_time: 0.0230  lr: 0.02  max_mem: 9939M
[01/01 03:46:34] d2.utils.events INFO:  eta: 4:09:10  iter: 2879  total_loss: 0.5478  loss_cls: 0.1309  loss_box_reg: 0.1895  loss_rpn_cls: 0.09839  loss_rpn_loc: 0.1203  time: 0.7076  data_time: 0.0226  lr: 0.02  max_mem: 9939M
[01/01 03:46:48] d2.utils.events INFO:  eta: 4:08:45  iter: 2899  total_loss: 0.5811  loss_cls: 0.134  loss_box_reg: 0.1881  loss_rpn_cls: 0.1103  loss_rpn_loc: 0.1252  time: 0.7076  data_time: 0.0190  lr: 0.02  max_mem: 9939M
[01/01 03:47:02] d2.utils.events INFO:  eta: 4:08:28  iter: 2919  total_loss: 0.5335  loss_cls: 0.1192  loss_box_reg: 0.1706  loss_rpn_cls: 0.102  loss_rpn_loc: 0.111  time: 0.7076  data_time: 0.0189  lr: 0.02  max_mem: 9939M
[01/01 03:47:17] d2.utils.events INFO:  eta: 4:08:19  iter: 2939  total_loss: 0.536  loss_cls: 0.1201  loss_box_reg: 0.1722  loss_rpn_cls: 0.102  loss_rpn_loc: 0.1331  time: 0.7077  data_time: 0.0209  lr: 0.02  max_mem: 9939M
[01/01 03:47:31] d2.utils.events INFO:  eta: 4:08:00  iter: 2959  total_loss: 0.5993  loss_cls: 0.136  loss_box_reg: 0.1846  loss_rpn_cls: 0.1164  loss_rpn_loc: 0.1448  time: 0.7078  data_time: 0.0177  lr: 0.02  max_mem: 9939M
[01/01 03:47:45] d2.utils.events INFO:  eta: 4:07:36  iter: 2979  total_loss: 0.5354  loss_cls: 0.132  loss_box_reg: 0.192  loss_rpn_cls: 0.09182  loss_rpn_loc: 0.1125  time: 0.7077  data_time: 0.0175  lr: 0.02  max_mem: 9939M
[01/01 03:47:59] d2.utils.events INFO:  eta: 4:07:28  iter: 2999  total_loss: 0.5699  loss_cls: 0.1359  loss_box_reg: 0.2047  loss_rpn_cls: 0.1102  loss_rpn_loc: 0.1316  time: 0.7078  data_time: 0.0155  lr: 0.02  max_mem: 9939M
[01/01 03:48:13] d2.utils.events INFO:  eta: 4:07:04  iter: 3019  total_loss: 0.4765  loss_cls: 0.1084  loss_box_reg: 0.1561  loss_rpn_cls: 0.08606  loss_rpn_loc: 0.1127  time: 0.7076  data_time: 0.0253  lr: 0.02  max_mem: 9939M
[01/01 03:48:27] d2.utils.events INFO:  eta: 4:06:50  iter: 3039  total_loss: 0.4991  loss_cls: 0.1142  loss_box_reg: 0.1709  loss_rpn_cls: 0.09767  loss_rpn_loc: 0.1174  time: 0.7076  data_time: 0.0172  lr: 0.02  max_mem: 9939M
[01/01 03:48:42] d2.utils.events INFO:  eta: 4:06:29  iter: 3059  total_loss: 0.5769  loss_cls: 0.1314  loss_box_reg: 0.1866  loss_rpn_cls: 0.1123  loss_rpn_loc: 0.1365  time: 0.7077  data_time: 0.0184  lr: 0.02  max_mem: 9939M
[01/01 03:48:56] d2.utils.events INFO:  eta: 4:06:06  iter: 3079  total_loss: 0.5524  loss_cls: 0.1328  loss_box_reg: 0.1961  loss_rpn_cls: 0.1008  loss_rpn_loc: 0.121  time: 0.7077  data_time: 0.0219  lr: 0.02  max_mem: 9939M
[01/01 03:49:10] d2.utils.events INFO:  eta: 4:05:53  iter: 3099  total_loss: 0.5921  loss_cls: 0.146  loss_box_reg: 0.2061  loss_rpn_cls: 0.1139  loss_rpn_loc: 0.1267  time: 0.7076  data_time: 0.0214  lr: 0.02  max_mem: 9939M
[01/01 03:49:23] d2.utils.events INFO:  eta: 4:05:35  iter: 3119  total_loss: 0.5805  loss_cls: 0.1269  loss_box_reg: 0.1946  loss_rpn_cls: 0.102  loss_rpn_loc: 0.1193  time: 0.7074  data_time: 0.0213  lr: 0.02  max_mem: 9939M
[01/01 03:49:37] d2.utils.events INFO:  eta: 4:05:15  iter: 3139  total_loss: 0.5455  loss_cls: 0.1139  loss_box_reg: 0.1836  loss_rpn_cls: 0.09813  loss_rpn_loc: 0.1364  time: 0.7074  data_time: 0.0204  lr: 0.02  max_mem: 9939M
[01/01 03:49:52] d2.utils.events INFO:  eta: 4:04:59  iter: 3159  total_loss: 0.5418  loss_cls: 0.1278  loss_box_reg: 0.1784  loss_rpn_cls: 0.1029  loss_rpn_loc: 0.1187  time: 0.7075  data_time: 0.0241  lr: 0.02  max_mem: 9939M
[01/01 03:50:06] d2.utils.events INFO:  eta: 4:04:38  iter: 3179  total_loss: 0.5245  loss_cls: 0.1244  loss_box_reg: 0.175  loss_rpn_cls: 0.1004  loss_rpn_loc: 0.1241  time: 0.7074  data_time: 0.0139  lr: 0.02  max_mem: 9939M
[01/01 03:50:19] d2.utils.events INFO:  eta: 4:04:11  iter: 3199  total_loss: 0.5304  loss_cls: 0.1272  loss_box_reg: 0.1632  loss_rpn_cls: 0.1022  loss_rpn_loc: 0.117  time: 0.7073  data_time: 0.0178  lr: 0.02  max_mem: 9939M
[01/01 03:50:33] d2.utils.events INFO:  eta: 4:03:43  iter: 3219  total_loss: 0.548  loss_cls: 0.1319  loss_box_reg: 0.165  loss_rpn_cls: 0.09787  loss_rpn_loc: 0.1246  time: 0.7072  data_time: 0.0244  lr: 0.02  max_mem: 9939M
[01/01 03:50:47] d2.utils.events INFO:  eta: 4:03:20  iter: 3239  total_loss: 0.5918  loss_cls: 0.1292  loss_box_reg: 0.177  loss_rpn_cls: 0.1127  loss_rpn_loc: 0.1319  time: 0.7071  data_time: 0.0238  lr: 0.02  max_mem: 9939M
[01/01 03:51:01] d2.utils.events INFO:  eta: 4:03:04  iter: 3259  total_loss: 0.5157  loss_cls: 0.1301  loss_box_reg: 0.1863  loss_rpn_cls: 0.09686  loss_rpn_loc: 0.1136  time: 0.7071  data_time: 0.0184  lr: 0.02  max_mem: 9939M
[01/01 03:51:15] d2.utils.events INFO:  eta: 4:02:42  iter: 3279  total_loss: 0.5192  loss_cls: 0.1191  loss_box_reg: 0.1758  loss_rpn_cls: 0.09715  loss_rpn_loc: 0.1105  time: 0.7071  data_time: 0.0190  lr: 0.02  max_mem: 9939M
[01/01 03:51:29] d2.utils.events INFO:  eta: 4:01:40  iter: 3299  total_loss: 0.5792  loss_cls: 0.1284  loss_box_reg: 0.193  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.1419  time: 0.7069  data_time: 0.0184  lr: 0.02  max_mem: 9939M
[01/01 03:51:43] d2.utils.events INFO:  eta: 4:01:15  iter: 3319  total_loss: 0.4973  loss_cls: 0.1174  loss_box_reg: 0.1748  loss_rpn_cls: 0.08971  loss_rpn_loc: 0.1197  time: 0.7069  data_time: 0.0179  lr: 0.02  max_mem: 9939M
[01/01 03:51:57] d2.utils.events INFO:  eta: 4:00:41  iter: 3339  total_loss: 0.6032  loss_cls: 0.1411  loss_box_reg: 0.2204  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1271  time: 0.7068  data_time: 0.0241  lr: 0.02  max_mem: 9939M
[01/01 03:52:11] d2.utils.events INFO:  eta: 4:00:30  iter: 3359  total_loss: 0.565  loss_cls: 0.1245  loss_box_reg: 0.1839  loss_rpn_cls: 0.09819  loss_rpn_loc: 0.1336  time: 0.7067  data_time: 0.0211  lr: 0.02  max_mem: 9939M
[01/01 03:52:25] d2.utils.events INFO:  eta: 4:00:11  iter: 3379  total_loss: 0.5585  loss_cls: 0.1224  loss_box_reg: 0.1798  loss_rpn_cls: 0.115  loss_rpn_loc: 0.1285  time: 0.7067  data_time: 0.0218  lr: 0.02  max_mem: 9939M
[01/01 03:52:39] d2.utils.events INFO:  eta: 3:59:36  iter: 3399  total_loss: 0.5282  loss_cls: 0.1174  loss_box_reg: 0.1818  loss_rpn_cls: 0.1038  loss_rpn_loc: 0.1306  time: 0.7066  data_time: 0.0180  lr: 0.02  max_mem: 9939M
[01/01 03:52:52] d2.utils.events INFO:  eta: 3:58:59  iter: 3419  total_loss: 0.5621  loss_cls: 0.1213  loss_box_reg: 0.1788  loss_rpn_cls: 0.1105  loss_rpn_loc: 0.1272  time: 0.7064  data_time: 0.0171  lr: 0.02  max_mem: 9939M
[01/01 03:53:06] d2.utils.events INFO:  eta: 3:58:25  iter: 3439  total_loss: 0.5185  loss_cls: 0.114  loss_box_reg: 0.1791  loss_rpn_cls: 0.09227  loss_rpn_loc: 0.1352  time: 0.7064  data_time: 0.0220  lr: 0.02  max_mem: 9939M
[01/01 03:53:20] d2.utils.events INFO:  eta: 3:58:04  iter: 3459  total_loss: 0.5078  loss_cls: 0.1284  loss_box_reg: 0.1879  loss_rpn_cls: 0.09606  loss_rpn_loc: 0.1056  time: 0.7063  data_time: 0.0212  lr: 0.02  max_mem: 9939M
[01/01 03:53:34] d2.utils.events INFO:  eta: 3:57:40  iter: 3479  total_loss: 0.5331  loss_cls: 0.1294  loss_box_reg: 0.1842  loss_rpn_cls: 0.1037  loss_rpn_loc: 0.1323  time: 0.7063  data_time: 0.0243  lr: 0.02  max_mem: 9939M
[01/01 03:53:48] d2.utils.events INFO:  eta: 3:57:26  iter: 3499  total_loss: 0.5723  loss_cls: 0.1342  loss_box_reg: 0.1871  loss_rpn_cls: 0.09803  loss_rpn_loc: 0.138  time: 0.7062  data_time: 0.0135  lr: 0.02  max_mem: 9939M
[01/01 03:54:02] d2.utils.events INFO:  eta: 3:57:02  iter: 3519  total_loss: 0.5068  loss_cls: 0.1248  loss_box_reg: 0.1742  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1038  time: 0.7061  data_time: 0.0213  lr: 0.02  max_mem: 9939M
[01/01 03:54:15] d2.utils.events INFO:  eta: 3:56:36  iter: 3539  total_loss: 0.5315  loss_cls: 0.1227  loss_box_reg: 0.1595  loss_rpn_cls: 0.09678  loss_rpn_loc: 0.1172  time: 0.7059  data_time: 0.0211  lr: 0.02  max_mem: 9939M
[01/01 03:54:29] d2.utils.events INFO:  eta: 3:55:58  iter: 3559  total_loss: 0.5425  loss_cls: 0.1251  loss_box_reg: 0.1767  loss_rpn_cls: 0.09781  loss_rpn_loc: 0.1309  time: 0.7057  data_time: 0.0173  lr: 0.02  max_mem: 9939M
[01/01 03:54:43] d2.utils.events INFO:  eta: 3:55:24  iter: 3579  total_loss: 0.5346  loss_cls: 0.1253  loss_box_reg: 0.1837  loss_rpn_cls: 0.09996  loss_rpn_loc: 0.1297  time: 0.7057  data_time: 0.0152  lr: 0.02  max_mem: 9939M
[01/01 03:54:57] d2.utils.events INFO:  eta: 3:55:15  iter: 3599  total_loss: 0.5526  loss_cls: 0.1266  loss_box_reg: 0.178  loss_rpn_cls: 0.09489  loss_rpn_loc: 0.1403  time: 0.7056  data_time: 0.0202  lr: 0.02  max_mem: 9939M
[01/01 03:55:10] d2.utils.events INFO:  eta: 3:54:48  iter: 3619  total_loss: 0.5498  loss_cls: 0.1223  loss_box_reg: 0.1772  loss_rpn_cls: 0.1024  loss_rpn_loc: 0.1315  time: 0.7054  data_time: 0.0194  lr: 0.02  max_mem: 9939M
[01/01 03:55:24] d2.utils.events INFO:  eta: 3:54:14  iter: 3639  total_loss: 0.503  loss_cls: 0.119  loss_box_reg: 0.1775  loss_rpn_cls: 0.09884  loss_rpn_loc: 0.1152  time: 0.7052  data_time: 0.0231  lr: 0.02  max_mem: 9939M
[01/01 03:55:37] d2.utils.events INFO:  eta: 3:53:37  iter: 3659  total_loss: 0.5365  loss_cls: 0.1286  loss_box_reg: 0.1682  loss_rpn_cls: 0.101  loss_rpn_loc: 0.1345  time: 0.7051  data_time: 0.0208  lr: 0.02  max_mem: 9939M
[01/01 03:55:51] d2.utils.events INFO:  eta: 3:53:15  iter: 3679  total_loss: 0.5081  loss_cls: 0.1219  loss_box_reg: 0.1848  loss_rpn_cls: 0.09718  loss_rpn_loc: 0.1215  time: 0.7050  data_time: 0.0193  lr: 0.02  max_mem: 9939M
[01/01 03:56:04] d2.utils.events INFO:  eta: 3:52:51  iter: 3699  total_loss: 0.593  loss_cls: 0.1373  loss_box_reg: 0.1998  loss_rpn_cls: 0.11  loss_rpn_loc: 0.1267  time: 0.7048  data_time: 0.0212  lr: 0.02  max_mem: 9939M
[01/01 03:56:18] d2.utils.events INFO:  eta: 3:52:25  iter: 3719  total_loss: 0.4921  loss_cls: 0.1164  loss_box_reg: 0.1687  loss_rpn_cls: 0.1035  loss_rpn_loc: 0.1337  time: 0.7046  data_time: 0.0177  lr: 0.02  max_mem: 9939M
[01/01 03:56:31] d2.utils.events INFO:  eta: 3:52:01  iter: 3739  total_loss: 0.5287  loss_cls: 0.1158  loss_box_reg: 0.1874  loss_rpn_cls: 0.1001  loss_rpn_loc: 0.1328  time: 0.7045  data_time: 0.0241  lr: 0.02  max_mem: 9939M
[01/01 03:56:45] d2.utils.events INFO:  eta: 3:51:32  iter: 3759  total_loss: 0.5259  loss_cls: 0.1353  loss_box_reg: 0.1899  loss_rpn_cls: 0.09647  loss_rpn_loc: 0.1233  time: 0.7043  data_time: 0.0202  lr: 0.02  max_mem: 9939M
[01/01 03:56:59] d2.utils.events INFO:  eta: 3:51:09  iter: 3779  total_loss: 0.5183  loss_cls: 0.125  loss_box_reg: 0.1674  loss_rpn_cls: 0.09237  loss_rpn_loc: 0.1197  time: 0.7042  data_time: 0.0212  lr: 0.02  max_mem: 9939M
[01/01 03:57:12] d2.utils.events INFO:  eta: 3:50:39  iter: 3799  total_loss: 0.5074  loss_cls: 0.1179  loss_box_reg: 0.1671  loss_rpn_cls: 0.09367  loss_rpn_loc: 0.133  time: 0.7042  data_time: 0.0220  lr: 0.02  max_mem: 9939M
[01/01 03:57:26] d2.utils.events INFO:  eta: 3:50:25  iter: 3819  total_loss: 0.5827  loss_cls: 0.1388  loss_box_reg: 0.2078  loss_rpn_cls: 0.1057  loss_rpn_loc: 0.1307  time: 0.7041  data_time: 0.0185  lr: 0.02  max_mem: 9939M
[01/01 03:57:40] d2.utils.events INFO:  eta: 3:50:05  iter: 3839  total_loss: 0.5373  loss_cls: 0.116  loss_box_reg: 0.1678  loss_rpn_cls: 0.1027  loss_rpn_loc: 0.1283  time: 0.7040  data_time: 0.0250  lr: 0.02  max_mem: 9939M
[01/01 03:57:53] d2.utils.events INFO:  eta: 3:49:37  iter: 3859  total_loss: 0.488  loss_cls: 0.1202  loss_box_reg: 0.17  loss_rpn_cls: 0.08798  loss_rpn_loc: 0.12  time: 0.7038  data_time: 0.0204  lr: 0.02  max_mem: 9939M
[01/01 03:58:07] d2.utils.events INFO:  eta: 3:49:13  iter: 3879  total_loss: 0.5514  loss_cls: 0.1226  loss_box_reg: 0.1877  loss_rpn_cls: 0.1085  loss_rpn_loc: 0.1161  time: 0.7037  data_time: 0.0194  lr: 0.02  max_mem: 9939M
[01/01 03:58:21] d2.utils.events INFO:  eta: 3:48:51  iter: 3899  total_loss: 0.495  loss_cls: 0.11  loss_box_reg: 0.1675  loss_rpn_cls: 0.08377  loss_rpn_loc: 0.1266  time: 0.7036  data_time: 0.0259  lr: 0.02  max_mem: 9939M
[01/01 03:58:35] d2.utils.events INFO:  eta: 3:48:32  iter: 3919  total_loss: 0.5607  loss_cls: 0.1272  loss_box_reg: 0.2118  loss_rpn_cls: 0.093  loss_rpn_loc: 0.1342  time: 0.7036  data_time: 0.0169  lr: 0.02  max_mem: 9939M
[01/01 03:58:48] d2.utils.events INFO:  eta: 3:48:06  iter: 3939  total_loss: 0.4774  loss_cls: 0.1001  loss_box_reg: 0.1511  loss_rpn_cls: 0.08445  loss_rpn_loc: 0.1274  time: 0.7034  data_time: 0.0183  lr: 0.02  max_mem: 9939M
[01/01 03:59:02] d2.utils.events INFO:  eta: 3:47:32  iter: 3959  total_loss: 0.5516  loss_cls: 0.1284  loss_box_reg: 0.1945  loss_rpn_cls: 0.09978  loss_rpn_loc: 0.1173  time: 0.7033  data_time: 0.0170  lr: 0.02  max_mem: 9939M
[01/01 03:59:15] d2.utils.events INFO:  eta: 3:47:13  iter: 3979  total_loss: 0.4738  loss_cls: 0.09847  loss_box_reg: 0.1728  loss_rpn_cls: 0.08947  loss_rpn_loc: 0.1222  time: 0.7031  data_time: 0.0204  lr: 0.02  max_mem: 9939M
[01/01 03:59:29] d2.utils.events INFO:  eta: 3:46:48  iter: 3999  total_loss: 0.5356  loss_cls: 0.1248  loss_box_reg: 0.1858  loss_rpn_cls: 0.1018  loss_rpn_loc: 0.121  time: 0.7030  data_time: 0.0150  lr: 0.02  max_mem: 9939M
[01/01 03:59:42] d2.utils.events INFO:  eta: 3:46:33  iter: 4019  total_loss: 0.5831  loss_cls: 0.1351  loss_box_reg: 0.2161  loss_rpn_cls: 0.09821  loss_rpn_loc: 0.1322  time: 0.7029  data_time: 0.0200  lr: 0.02  max_mem: 9939M
[01/01 03:59:56] d2.utils.events INFO:  eta: 3:46:15  iter: 4039  total_loss: 0.5641  loss_cls: 0.136  loss_box_reg: 0.1869  loss_rpn_cls: 0.09473  loss_rpn_loc: 0.1191  time: 0.7028  data_time: 0.0171  lr: 0.02  max_mem: 9939M
[01/01 04:00:10] d2.utils.events INFO:  eta: 3:45:53  iter: 4059  total_loss: 0.5168  loss_cls: 0.1225  loss_box_reg: 0.1898  loss_rpn_cls: 0.0959  loss_rpn_loc: 0.116  time: 0.7027  data_time: 0.0232  lr: 0.02  max_mem: 9939M
[01/01 04:00:23] d2.utils.events INFO:  eta: 3:45:23  iter: 4079  total_loss: 0.5231  loss_cls: 0.1225  loss_box_reg: 0.1764  loss_rpn_cls: 0.0994  loss_rpn_loc: 0.1148  time: 0.7026  data_time: 0.0225  lr: 0.02  max_mem: 9939M
[01/01 04:00:37] d2.utils.events INFO:  eta: 3:44:58  iter: 4099  total_loss: 0.5125  loss_cls: 0.1262  loss_box_reg: 0.1905  loss_rpn_cls: 0.0851  loss_rpn_loc: 0.1269  time: 0.7024  data_time: 0.0163  lr: 0.02  max_mem: 9939M
[01/01 04:00:50] d2.utils.events INFO:  eta: 3:44:49  iter: 4119  total_loss: 0.505  loss_cls: 0.118  loss_box_reg: 0.1722  loss_rpn_cls: 0.0833  loss_rpn_loc: 0.1215  time: 0.7023  data_time: 0.0217  lr: 0.02  max_mem: 9939M
[01/01 04:01:04] d2.utils.events INFO:  eta: 3:44:30  iter: 4139  total_loss: 0.5595  loss_cls: 0.1209  loss_box_reg: 0.1928  loss_rpn_cls: 0.1029  loss_rpn_loc: 0.1332  time: 0.7022  data_time: 0.0248  lr: 0.02  max_mem: 9939M
[01/01 04:01:18] d2.utils.events INFO:  eta: 3:44:10  iter: 4159  total_loss: 0.4958  loss_cls: 0.1107  loss_box_reg: 0.1641  loss_rpn_cls: 0.09753  loss_rpn_loc: 0.1239  time: 0.7021  data_time: 0.0179  lr: 0.02  max_mem: 9939M
[01/01 04:01:32] d2.utils.events INFO:  eta: 3:44:00  iter: 4179  total_loss: 0.439  loss_cls: 0.09803  loss_box_reg: 0.1494  loss_rpn_cls: 0.08525  loss_rpn_loc: 0.1159  time: 0.7021  data_time: 0.0163  lr: 0.02  max_mem: 9939M
[01/01 04:01:45] d2.utils.events INFO:  eta: 3:43:47  iter: 4199  total_loss: 0.5214  loss_cls: 0.1202  loss_box_reg: 0.1786  loss_rpn_cls: 0.1002  loss_rpn_loc: 0.1189  time: 0.7020  data_time: 0.0235  lr: 0.02  max_mem: 9939M
[01/01 04:01:59] d2.utils.events INFO:  eta: 3:43:32  iter: 4219  total_loss: 0.5185  loss_cls: 0.1162  loss_box_reg: 0.1764  loss_rpn_cls: 0.09244  loss_rpn_loc: 0.1405  time: 0.7018  data_time: 0.0159  lr: 0.02  max_mem: 9939M
[01/01 04:02:12] d2.utils.events INFO:  eta: 3:42:56  iter: 4239  total_loss: 0.5386  loss_cls: 0.1203  loss_box_reg: 0.1843  loss_rpn_cls: 0.1069  loss_rpn_loc: 0.1258  time: 0.7017  data_time: 0.0225  lr: 0.02  max_mem: 9939M
[01/01 04:02:26] d2.utils.events INFO:  eta: 3:42:26  iter: 4259  total_loss: 0.5307  loss_cls: 0.1161  loss_box_reg: 0.1711  loss_rpn_cls: 0.1129  loss_rpn_loc: 0.1347  time: 0.7016  data_time: 0.0198  lr: 0.02  max_mem: 9939M
[01/01 04:02:39] d2.utils.events INFO:  eta: 3:42:03  iter: 4279  total_loss: 0.4874  loss_cls: 0.1126  loss_box_reg: 0.1745  loss_rpn_cls: 0.09785  loss_rpn_loc: 0.1124  time: 0.7015  data_time: 0.0233  lr: 0.02  max_mem: 9939M
[01/01 04:02:53] d2.utils.events INFO:  eta: 3:41:49  iter: 4299  total_loss: 0.5159  loss_cls: 0.1157  loss_box_reg: 0.1721  loss_rpn_cls: 0.09721  loss_rpn_loc: 0.1237  time: 0.7014  data_time: 0.0192  lr: 0.02  max_mem: 9939M
[01/01 04:03:07] d2.utils.events INFO:  eta: 3:41:32  iter: 4319  total_loss: 0.5221  loss_cls: 0.1055  loss_box_reg: 0.1698  loss_rpn_cls: 0.09923  loss_rpn_loc: 0.1249  time: 0.7014  data_time: 0.0197  lr: 0.02  max_mem: 9939M
[01/01 04:03:20] d2.utils.events INFO:  eta: 3:41:17  iter: 4339  total_loss: 0.498  loss_cls: 0.1047  loss_box_reg: 0.1679  loss_rpn_cls: 0.09863  loss_rpn_loc: 0.131  time: 0.7012  data_time: 0.0206  lr: 0.02  max_mem: 9939M
[01/01 04:03:34] d2.utils.events INFO:  eta: 3:41:00  iter: 4359  total_loss: 0.5097  loss_cls: 0.1121  loss_box_reg: 0.1651  loss_rpn_cls: 0.09606  loss_rpn_loc: 0.1216  time: 0.7011  data_time: 0.0247  lr: 0.02  max_mem: 9939M
[01/01 04:03:47] d2.utils.events INFO:  eta: 3:40:42  iter: 4379  total_loss: 0.5308  loss_cls: 0.1179  loss_box_reg: 0.1745  loss_rpn_cls: 0.09012  loss_rpn_loc: 0.1265  time: 0.7010  data_time: 0.0230  lr: 0.02  max_mem: 9939M
[01/01 04:04:01] d2.utils.events INFO:  eta: 3:40:26  iter: 4399  total_loss: 0.5472  loss_cls: 0.1288  loss_box_reg: 0.1928  loss_rpn_cls: 0.1031  loss_rpn_loc: 0.1171  time: 0.7009  data_time: 0.0184  lr: 0.02  max_mem: 9939M
[01/01 04:04:15] d2.utils.events INFO:  eta: 3:40:12  iter: 4419  total_loss: 0.5251  loss_cls: 0.125  loss_box_reg: 0.1806  loss_rpn_cls: 0.08791  loss_rpn_loc: 0.1283  time: 0.7009  data_time: 0.0181  lr: 0.02  max_mem: 9939M
[01/01 04:04:28] d2.utils.events INFO:  eta: 3:40:01  iter: 4439  total_loss: 0.5332  loss_cls: 0.1151  loss_box_reg: 0.1874  loss_rpn_cls: 0.1047  loss_rpn_loc: 0.1097  time: 0.7008  data_time: 0.0174  lr: 0.02  max_mem: 9939M
[01/01 04:04:42] d2.utils.events INFO:  eta: 3:39:48  iter: 4459  total_loss: 0.5404  loss_cls: 0.1113  loss_box_reg: 0.1792  loss_rpn_cls: 0.09348  loss_rpn_loc: 0.126  time: 0.7008  data_time: 0.0218  lr: 0.02  max_mem: 9939M
[01/01 04:04:56] d2.utils.events INFO:  eta: 3:39:19  iter: 4479  total_loss: 0.51  loss_cls: 0.1169  loss_box_reg: 0.1826  loss_rpn_cls: 0.08878  loss_rpn_loc: 0.1176  time: 0.7006  data_time: 0.0188  lr: 0.02  max_mem: 9939M
[01/01 04:05:10] d2.utils.events INFO:  eta: 3:39:04  iter: 4499  total_loss: 0.5034  loss_cls: 0.1146  loss_box_reg: 0.1657  loss_rpn_cls: 0.101  loss_rpn_loc: 0.1248  time: 0.7006  data_time: 0.0211  lr: 0.02  max_mem: 9939M
[01/01 04:05:23] d2.utils.events INFO:  eta: 3:38:43  iter: 4519  total_loss: 0.5959  loss_cls: 0.1319  loss_box_reg: 0.2201  loss_rpn_cls: 0.1036  loss_rpn_loc: 0.1264  time: 0.7005  data_time: 0.0193  lr: 0.02  max_mem: 9939M
[01/01 04:05:37] d2.utils.events INFO:  eta: 3:38:36  iter: 4539  total_loss: 0.5466  loss_cls: 0.1217  loss_box_reg: 0.1879  loss_rpn_cls: 0.1005  loss_rpn_loc: 0.1146  time: 0.7004  data_time: 0.0182  lr: 0.02  max_mem: 9939M
[01/01 04:05:51] d2.utils.events INFO:  eta: 3:38:29  iter: 4559  total_loss: 0.5092  loss_cls: 0.1093  loss_box_reg: 0.1793  loss_rpn_cls: 0.09892  loss_rpn_loc: 0.1149  time: 0.7003  data_time: 0.0176  lr: 0.02  max_mem: 9939M
[01/01 04:06:04] d2.utils.events INFO:  eta: 3:38:23  iter: 4579  total_loss: 0.5107  loss_cls: 0.1125  loss_box_reg: 0.1663  loss_rpn_cls: 0.09888  loss_rpn_loc: 0.1155  time: 0.7003  data_time: 0.0219  lr: 0.02  max_mem: 9939M
[01/01 04:06:18] d2.utils.events INFO:  eta: 3:37:55  iter: 4599  total_loss: 0.4765  loss_cls: 0.1054  loss_box_reg: 0.1771  loss_rpn_cls: 0.08457  loss_rpn_loc: 0.1078  time: 0.7001  data_time: 0.0233  lr: 0.02  max_mem: 9939M
[01/01 04:06:31] d2.utils.events INFO:  eta: 3:37:34  iter: 4619  total_loss: 0.53  loss_cls: 0.1215  loss_box_reg: 0.1783  loss_rpn_cls: 0.09906  loss_rpn_loc: 0.1179  time: 0.7000  data_time: 0.0197  lr: 0.02  max_mem: 9939M
[01/01 04:06:45] d2.utils.events INFO:  eta: 3:37:16  iter: 4639  total_loss: 0.5048  loss_cls: 0.1125  loss_box_reg: 0.1784  loss_rpn_cls: 0.08945  loss_rpn_loc: 0.1159  time: 0.6999  data_time: 0.0187  lr: 0.02  max_mem: 9939M
[01/01 04:06:58] d2.utils.events INFO:  eta: 3:37:01  iter: 4659  total_loss: 0.5102  loss_cls: 0.1144  loss_box_reg: 0.1812  loss_rpn_cls: 0.09616  loss_rpn_loc: 0.1279  time: 0.6998  data_time: 0.0216  lr: 0.02  max_mem: 9939M
[01/01 04:07:12] d2.utils.events INFO:  eta: 3:36:48  iter: 4679  total_loss: 0.5453  loss_cls: 0.1225  loss_box_reg: 0.1893  loss_rpn_cls: 0.09302  loss_rpn_loc: 0.1394  time: 0.6998  data_time: 0.0198  lr: 0.02  max_mem: 9939M
[01/01 04:07:26] d2.utils.events INFO:  eta: 3:36:37  iter: 4699  total_loss: 0.5732  loss_cls: 0.1281  loss_box_reg: 0.1746  loss_rpn_cls: 0.1062  loss_rpn_loc: 0.1483  time: 0.6997  data_time: 0.0147  lr: 0.02  max_mem: 9939M
[01/01 04:07:39] d2.utils.events INFO:  eta: 3:36:21  iter: 4719  total_loss: 0.4791  loss_cls: 0.1097  loss_box_reg: 0.1629  loss_rpn_cls: 0.08455  loss_rpn_loc: 0.1216  time: 0.6996  data_time: 0.0156  lr: 0.02  max_mem: 9939M
[01/01 04:07:53] d2.utils.events INFO:  eta: 3:36:03  iter: 4739  total_loss: 0.513  loss_cls: 0.1076  loss_box_reg: 0.1841  loss_rpn_cls: 0.09046  loss_rpn_loc: 0.1183  time: 0.6995  data_time: 0.0213  lr: 0.02  max_mem: 9939M
[01/01 04:08:06] d2.utils.events INFO:  eta: 3:35:50  iter: 4759  total_loss: 0.4795  loss_cls: 0.1057  loss_box_reg: 0.1841  loss_rpn_cls: 0.08739  loss_rpn_loc: 0.1271  time: 0.6994  data_time: 0.0196  lr: 0.02  max_mem: 9939M
[01/01 04:08:20] d2.utils.events INFO:  eta: 3:35:30  iter: 4779  total_loss: 0.53  loss_cls: 0.1117  loss_box_reg: 0.1879  loss_rpn_cls: 0.09782  loss_rpn_loc: 0.1181  time: 0.6993  data_time: 0.0201  lr: 0.02  max_mem: 9939M
[01/01 04:08:33] d2.utils.events INFO:  eta: 3:35:08  iter: 4799  total_loss: 0.5213  loss_cls: 0.1224  loss_box_reg: 0.1875  loss_rpn_cls: 0.09623  loss_rpn_loc: 0.1212  time: 0.6992  data_time: 0.0233  lr: 0.02  max_mem: 9939M
[01/01 04:08:47] d2.utils.events INFO:  eta: 3:34:51  iter: 4819  total_loss: 0.5495  loss_cls: 0.1279  loss_box_reg: 0.2028  loss_rpn_cls: 0.09669  loss_rpn_loc: 0.1281  time: 0.6991  data_time: 0.0190  lr: 0.02  max_mem: 9939M
[01/01 04:09:00] d2.utils.events INFO:  eta: 3:34:29  iter: 4839  total_loss: 0.5428  loss_cls: 0.1334  loss_box_reg: 0.1735  loss_rpn_cls: 0.09257  loss_rpn_loc: 0.1325  time: 0.6990  data_time: 0.0165  lr: 0.02  max_mem: 9939M
[01/01 04:09:14] d2.utils.events INFO:  eta: 3:34:15  iter: 4859  total_loss: 0.5335  loss_cls: 0.1245  loss_box_reg: 0.1914  loss_rpn_cls: 0.1005  loss_rpn_loc: 0.1373  time: 0.6988  data_time: 0.0208  lr: 0.02  max_mem: 9939M
[01/01 04:09:27] d2.utils.events INFO:  eta: 3:34:03  iter: 4879  total_loss: 0.5383  loss_cls: 0.1253  loss_box_reg: 0.1928  loss_rpn_cls: 0.0952  loss_rpn_loc: 0.1303  time: 0.6988  data_time: 0.0240  lr: 0.02  max_mem: 9939M
[01/01 04:09:41] d2.utils.events INFO:  eta: 3:33:49  iter: 4899  total_loss: 0.4638  loss_cls: 0.09286  loss_box_reg: 0.1507  loss_rpn_cls: 0.08838  loss_rpn_loc: 0.1278  time: 0.6987  data_time: 0.0197  lr: 0.02  max_mem: 9939M
[01/01 04:09:54] d2.utils.events INFO:  eta: 3:33:36  iter: 4919  total_loss: 0.4844  loss_cls: 0.1082  loss_box_reg: 0.1863  loss_rpn_cls: 0.09091  loss_rpn_loc: 0.116  time: 0.6986  data_time: 0.0178  lr: 0.02  max_mem: 9939M
[01/01 04:10:08] d2.utils.events INFO:  eta: 3:33:21  iter: 4939  total_loss: 0.5169  loss_cls: 0.1149  loss_box_reg: 0.1871  loss_rpn_cls: 0.09242  loss_rpn_loc: 0.1282  time: 0.6985  data_time: 0.0207  lr: 0.02  max_mem: 9939M
[01/01 04:10:21] d2.utils.events INFO:  eta: 3:33:05  iter: 4959  total_loss: 0.504  loss_cls: 0.1147  loss_box_reg: 0.1731  loss_rpn_cls: 0.08452  loss_rpn_loc: 0.1148  time: 0.6984  data_time: 0.0164  lr: 0.02  max_mem: 9939M
[01/01 04:10:35] d2.utils.events INFO:  eta: 3:32:54  iter: 4979  total_loss: 0.5077  loss_cls: 0.1163  loss_box_reg: 0.1749  loss_rpn_cls: 0.09824  loss_rpn_loc: 0.1262  time: 0.6984  data_time: 0.0231  lr: 0.02  max_mem: 9939M
[01/01 04:10:49] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/model_0004999.pth
[01/01 04:10:49] d2.utils.events INFO:  eta: 3:32:42  iter: 4999  total_loss: 0.5262  loss_cls: 0.1151  loss_box_reg: 0.1822  loss_rpn_cls: 0.0925  loss_rpn_loc: 0.1155  time: 0.6983  data_time: 0.0185  lr: 0.02  max_mem: 9939M
[01/01 04:11:03] d2.utils.events INFO:  eta: 3:32:33  iter: 5019  total_loss: 0.4903  loss_cls: 0.1023  loss_box_reg: 0.169  loss_rpn_cls: 0.09617  loss_rpn_loc: 0.1339  time: 0.6982  data_time: 0.0218  lr: 0.02  max_mem: 9939M
[01/01 04:11:16] d2.utils.events INFO:  eta: 3:32:13  iter: 5039  total_loss: 0.5079  loss_cls: 0.1199  loss_box_reg: 0.1782  loss_rpn_cls: 0.09466  loss_rpn_loc: 0.1185  time: 0.6981  data_time: 0.0178  lr: 0.02  max_mem: 9939M
[01/01 17:32:49] detectron2 INFO: Rank of current process: 0. World size: 6
[01/01 17:32:52] detectron2 INFO: Environment info:
----------------------  ---------------------------------------------------------------------------------------------------
sys.platform            linux
Python                  3.9.5 (default, Nov 23 2021, 15:27:38) [GCC 9.3.0]
numpy                   1.24.1
detectron2              0.6 @/tmp/Asrar/detection/DenseCL/benchmarks/detection/detectron2
detectron2._C           not built correctly: No module named 'detectron2._C'
Compiler ($CXX)         c++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
CUDA compiler           Not found
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.13.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torch
PyTorch debug build     False
GPU available           Yes
GPU 0,1,2,3,4,5         NVIDIA GeForce RTX 3090 (arch=8.6)
Driver version          470.161.03
CUDA_HOME               /usr/local/cuda
Pillow                  9.3.0
torchvision             0.14.1+cu117 @/shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision
torchvision arch flags  /shared/home/c_aalrwiqi/.local/lib/python3.9/site-packages/torchvision/_C.so; cannot find cuobjdump
fvcore                  0.1.5.post20221221
iopath                  0.1.10
cv2                     Not found
----------------------  ---------------------------------------------------------------------------------------------------
PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

[01/01 17:32:52] detectron2 INFO: Command line arguments: Namespace(config_file='configs/pascal_voc_R_50_C4_24k_moco.yaml', resume=False, eval_only=False, num_gpus=6, num_machines=1, machine_rank=0, dist_url='tcp://127.0.0.1:52046', opts=['MODEL.WEIGHTS', 'model_resnet50.pkl', 'OUTPUT_DIR', 'output/run_1_voc_R_50_C4_24k_densecl_coco_800ep'])
[01/01 17:32:52] detectron2 INFO: Contents of args.config_file=configs/pascal_voc_R_50_C4_24k_moco.yaml:
_BASE_: "pascal_voc_R_50_C4_24k.yaml"
MODEL:
  PIXEL_MEAN: [123.675, 116.280, 103.530]
  PIXEL_STD: [58.395, 57.120, 57.375]
  WEIGHTS: "See Instructions"
  RESNETS:
    STRIDE_IN_1X1: False
INPUT:
  FORMAT: "RGB"

[01/01 17:32:52] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: false
DATALOADER:
  ASPECT_RATIO_GROUPING: true
  FILTER_EMPTY_ANNOTATIONS: true
  NUM_WORKERS: 20
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: []
  PROPOSAL_FILES_TRAIN: []
  TEST:
  - voc_2007_test
  TRAIN:
  - voc_2007_trainval
  - voc_2012_trainval
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    ENABLED: false
    SIZE:
    - 0.9
    - 0.9
    TYPE: relative_range
  FORMAT: RGB
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1333
  MAX_SIZE_TRAIN: 1333
  MIN_SIZE_TEST: 800
  MIN_SIZE_TRAIN:
  - 480
  - 512
  - 544
  - 576
  - 608
  - 640
  - 672
  - 704
  - 736
  - 768
  - 800
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES:
    - - -90
      - 0
      - 90
    ASPECT_RATIOS:
    - - 0.5
      - 1.0
      - 2.0
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES:
    - - 32
      - 64
      - 128
      - 256
      - 512
  BACKBONE:
    FREEZE_AT: 0
    NAME: build_resnet_backbone
  DEVICE: cuda
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: []
    NORM: ''
    OUT_CHANNELS: 256
  KEYPOINT_ON: false
  LOAD_PROPOSALS: false
  MASK_ON: false
  META_ARCHITECTURE: GeneralizedRCNN
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: true
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN:
  - 123.675
  - 116.28
  - 103.53
  PIXEL_STD:
  - 58.395
  - 57.12
  - 57.375
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: RPN
  RESNETS:
    DEFORM_MODULATED: false
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE:
    - false
    - false
    - false
    - false
    DEPTH: 50
    NORM: SyncBN
    NUM_GROUPS: 1
    OUT_FEATURES:
    - res4
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: false
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: &id002
    - 1.0
    - 1.0
    - 1.0
    - 1.0
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES:
    - p3
    - p4
    - p5
    - p6
    - p7
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.4
    - 0.5
    NMS_THRESH_TEST: 0.5
    NORM: ''
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS:
    - &id001
      - 10.0
      - 10.0
      - 5.0
      - 5.0
    - - 20.0
      - 20.0
      - 10.0
      - 10.0
    - - 30.0
      - 30.0
      - 15.0
      - 15.0
    IOUS:
    - 0.5
    - 0.6
    - 0.7
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id001
    CLS_AGNOSTIC_BBOX_REG: false
    CONV_DIM: 256
    FC_DIM: 1024
    FED_LOSS_FREQ_WEIGHT_POWER: 0.5
    FED_LOSS_NUM_CLASSES: 50
    NAME: ''
    NORM: ''
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: false
    USE_FED_LOSS: false
    USE_SIGMOID_CE: false
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - 1
    IOU_THRESHOLDS:
    - 0.5
    NAME: Res5ROIHeadsExtraNorm
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 20
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: true
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS:
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    - 512
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: true
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: false
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: ''
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: *id002
    BOUNDARY_THRESH: -1
    CONV_DIMS:
    - -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES:
    - res4
    IOU_LABELS:
    - 0
    - -1
    - 1
    IOU_THRESHOLDS:
    - 0.3
    - 0.7
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES:
    - p2
    - p3
    - p4
    - p5
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  WEIGHTS: model_resnet50.pkl
OUTPUT_DIR: output/run_1_voc_R_50_C4_24k_densecl_coco_800ep
SEED: -1
SOLVER:
  AMP:
    ENABLED: false
  BASE_LR: 0.02
  BASE_LR_END: 0.0
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 5000
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: false
    NORM_TYPE: 2.0
  GAMMA: 0.1
  IMS_PER_BATCH: 16
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 24000
  MOMENTUM: 0.9
  NESTEROV: false
  NUM_DECAYS: 3
  REFERENCE_WORLD_SIZE: 0
  RESCALE_INTERVAL: false
  STEPS:
  - 18000
  - 22000
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 100
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: null
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: false
    FLIP: true
    MAX_SIZE: 4000
    MIN_SIZES:
    - 400
    - 500
    - 600
    - 700
    - 800
    - 900
    - 1000
    - 1100
    - 1200
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 0
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: true
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0

[01/01 17:32:52] detectron2 INFO: Full config saved to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/config.yaml
[01/01 17:32:52] d2.utils.env INFO: Using a generated random seed 55638145
[01/01 17:32:53] d2.modeling.roi_heads.roi_heads WARNING: The behavior of _build_res5_block may change. Please do not depend on private methods.
[01/01 17:32:53] d2.engine.defaults INFO: Model:
GeneralizedRCNN(
  (backbone): ResNet(
    (stem): BasicStem(
      (conv1): Conv2d(
        3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False
        (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (res2): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res3): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
    (res4): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (3): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (4): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (5): BottleneckBlock(
        (conv1): Conv2d(
          1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (proposal_generator): RPN(
    (rpn_head): StandardRPNHead(
      (conv): Conv2d(
        1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1)
        (activation): ReLU()
      )
      (objectness_logits): Conv2d(1024, 15, kernel_size=(1, 1), stride=(1, 1))
      (anchor_deltas): Conv2d(1024, 60, kernel_size=(1, 1), stride=(1, 1))
    )
    (anchor_generator): DefaultAnchorGenerator(
      (cell_anchors): BufferList()
    )
  )
  (roi_heads): Res5ROIHeadsExtraNorm(
    (pooler): ROIPooler(
      (level_poolers): ModuleList(
        (0): ROIAlign(output_size=(14, 14), spatial_scale=0.0625, sampling_ratio=0, aligned=True)
      )
    )
    (res5): Sequential(
      (0): BottleneckBlock(
        (shortcut): Conv2d(
          1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv1): Conv2d(
          1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (2): BottleneckBlock(
        (conv1): Conv2d(
          2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv2): Conv2d(
          512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False
          (norm): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (conv3): Conv2d(
          512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False
          (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (norm): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (box_predictor): FastRCNNOutputLayers(
      (cls_score): Linear(in_features=2048, out_features=21, bias=True)
      (bbox_pred): Linear(in_features=2048, out_features=80, bias=True)
    )
  )
)
[01/01 17:32:57] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 17:32:57] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 17:32:57] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 17:32:57] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 17:32:57] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 17:32:58] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 17:33:01] d2.data.build INFO: Removed 0 images with no usable annotations. 23080 images left.
[01/01 17:33:01] d2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800), max_size=1333, sample_style='choice'), RandomFlip()]
[01/01 17:33:01] d2.data.build INFO: Using training sampler TrainingSampler
[01/01 17:33:01] d2.data.common INFO: Serializing the dataset using: <class 'detectron2.data.common.NumpySerializedList'>
[01/01 17:33:01] d2.data.common INFO: Serializing 23080 elements to byte tensors and concatenating them all ...
[01/01 17:33:01] d2.data.common INFO: Serialized dataset takes 10.59 MiB
[01/01 17:33:02] d2.checkpoint.detection_checkpoint INFO: [DetectionCheckpointer] Loading from model_resnet50.pkl ...
[01/01 17:33:02] fvcore.common.checkpoint INFO: [Checkpointer] Loading from model_resnet50.pkl ...
[01/01 17:33:02] fvcore.common.checkpoint INFO: Reading a file from 'OpenSelfSup'
[01/01 17:33:02] d2.checkpoint.c2_model_loading INFO: Following weights matched with model:
| Names in Model              | Names in Checkpoint                                                               | Shapes                                          |
|:----------------------------|:----------------------------------------------------------------------------------|:------------------------------------------------|
| backbone.res2.0.conv1.*     | res2.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,1,1)             |
| backbone.res2.0.conv2.*     | res2.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.0.conv3.*     | res2.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.0.shortcut.*  | res2.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.1.conv1.*     | res2.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.1.conv2.*     | res2.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.1.conv3.*     | res2.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res2.2.conv1.*     | res2.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,256,1,1)            |
| backbone.res2.2.conv2.*     | res2.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (64,) (64,) (64,) (64,) (64,64,3,3)             |
| backbone.res2.2.conv3.*     | res2.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,64,1,1)        |
| backbone.res3.0.conv1.*     | res3.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,256,1,1)       |
| backbone.res3.0.conv2.*     | res3.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.0.conv3.*     | res3.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.0.shortcut.*  | res3.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (512,) (512,) (512,) (512,) (512,256,1,1)       |
| backbone.res3.1.conv1.*     | res3.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.1.conv2.*     | res3.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.1.conv3.*     | res3.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.2.conv1.*     | res3.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.2.conv2.*     | res3.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.2.conv3.*     | res3.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res3.3.conv1.*     | res3.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,512,1,1)       |
| backbone.res3.3.conv2.*     | res3.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (128,) (128,) (128,) (128,) (128,128,3,3)       |
| backbone.res3.3.conv3.*     | res3.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,128,1,1)       |
| backbone.res4.0.conv1.*     | res4.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,512,1,1)       |
| backbone.res4.0.conv2.*     | res4.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.0.conv3.*     | res4.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.0.shortcut.*  | res4.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (1024,) (1024,) (1024,) (1024,) (1024,512,1,1)  |
| backbone.res4.1.conv1.*     | res4.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.1.conv2.*     | res4.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.1.conv3.*     | res4.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.2.conv1.*     | res4.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.2.conv2.*     | res4.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.2.conv3.*     | res4.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.3.conv1.*     | res4.3.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.3.conv2.*     | res4.3.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.3.conv3.*     | res4.3.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.4.conv1.*     | res4.4.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.4.conv2.*     | res4.4.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.4.conv3.*     | res4.4.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.res4.5.conv1.*     | res4.5.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,1024,1,1)      |
| backbone.res4.5.conv2.*     | res4.5.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (256,) (256,) (256,) (256,) (256,256,3,3)       |
| backbone.res4.5.conv3.*     | res4.5.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (1024,) (1024,) (1024,) (1024,) (1024,256,1,1)  |
| backbone.stem.conv1.*       | stem.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}      | (64,) (64,) (64,) (64,) (64,3,7,7)              |
| roi_heads.res5.0.conv1.*    | res5.0.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,1024,1,1)      |
| roi_heads.res5.0.conv2.*    | res5.0.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.0.conv3.*    | res5.0.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.0.shortcut.* | res5.0.shortcut.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight} | (2048,) (2048,) (2048,) (2048,) (2048,1024,1,1) |
| roi_heads.res5.1.conv1.*    | res5.1.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.1.conv2.*    | res5.1.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.1.conv3.*    | res5.1.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
| roi_heads.res5.2.conv1.*    | res5.2.conv1.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,2048,1,1)      |
| roi_heads.res5.2.conv2.*    | res5.2.conv2.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (512,) (512,) (512,) (512,) (512,512,3,3)       |
| roi_heads.res5.2.conv3.*    | res5.2.conv3.{norm.bias,norm.running_mean,norm.running_var,norm.weight,weight}    | (2048,) (2048,) (2048,) (2048,) (2048,512,1,1)  |
[01/01 17:33:02] fvcore.common.checkpoint WARNING: Some model parameters or buffers are not found in the checkpoint:
[34mproposal_generator.rpn_head.anchor_deltas.{bias, weight}[0m
[34mproposal_generator.rpn_head.conv.{bias, weight}[0m
[34mproposal_generator.rpn_head.objectness_logits.{bias, weight}[0m
[34mroi_heads.box_predictor.bbox_pred.{bias, weight}[0m
[34mroi_heads.box_predictor.cls_score.{bias, weight}[0m
[34mroi_heads.res5.norm.{bias, running_mean, running_var, weight}[0m
[01/01 17:33:02] fvcore.common.checkpoint WARNING: The checkpoint state_dict contains keys that are not used by the model:
  [35mstem.fc.{bias, weight}[0m
[01/01 17:33:02] d2.engine.train_loop INFO: Starting training from iteration 0
[01/01 17:34:09] d2.utils.events INFO:  eta: 4:42:21  iter: 19  total_loss: 3.968  loss_cls: 3.031  loss_box_reg: 0.09303  loss_rpn_cls: 0.6911  loss_rpn_loc: 0.1533  time: 0.7144  data_time: 2.5460  lr: 0.0038162  max_mem: 9373M
[01/01 17:34:23] d2.utils.events INFO:  eta: 4:42:07  iter: 39  total_loss: 3.301  loss_cls: 2.289  loss_box_reg: 0.1362  loss_rpn_cls: 0.6725  loss_rpn_loc: 0.1587  time: 0.7095  data_time: 0.0254  lr: 0.0078122  max_mem: 9620M
[01/01 17:34:38] d2.utils.events INFO:  eta: 4:40:50  iter: 59  total_loss: 1.641  loss_cls: 0.8026  loss_box_reg: 0.1322  loss_rpn_cls: 0.62  loss_rpn_loc: 0.1284  time: 0.7095  data_time: 0.0233  lr: 0.011808  max_mem: 9620M
[01/01 17:34:52] d2.utils.events INFO:  eta: 4:40:07  iter: 79  total_loss: 1.051  loss_cls: 0.2203  loss_box_reg: 0.1528  loss_rpn_cls: 0.5313  loss_rpn_loc: 0.1515  time: 0.7091  data_time: 0.0202  lr: 0.015804  max_mem: 9620M
[01/01 17:35:06] d2.utils.events INFO:  eta: 4:40:28  iter: 99  total_loss: 0.9103  loss_cls: 0.1642  loss_box_reg: 0.1405  loss_rpn_cls: 0.3842  loss_rpn_loc: 0.1721  time: 0.7100  data_time: 0.0268  lr: 0.0198  max_mem: 9620M
[01/01 17:35:20] d2.utils.events INFO:  eta: 4:40:52  iter: 119  total_loss: 0.861  loss_cls: 0.1856  loss_box_reg: 0.1446  loss_rpn_cls: 0.3569  loss_rpn_loc: 0.1744  time: 0.7109  data_time: 0.0214  lr: 0.02  max_mem: 9620M
[01/01 17:35:34] d2.utils.events INFO:  eta: 4:40:00  iter: 139  total_loss: 0.8523  loss_cls: 0.1955  loss_box_reg: 0.1611  loss_rpn_cls: 0.3272  loss_rpn_loc: 0.1564  time: 0.7090  data_time: 0.0195  lr: 0.02  max_mem: 9620M
[01/01 17:35:49] d2.utils.events INFO:  eta: 4:41:36  iter: 159  total_loss: 0.7769  loss_cls: 0.1863  loss_box_reg: 0.1603  loss_rpn_cls: 0.2814  loss_rpn_loc: 0.1642  time: 0.7118  data_time: 0.0199  lr: 0.02  max_mem: 9620M
[01/01 17:36:03] d2.utils.events INFO:  eta: 4:41:09  iter: 179  total_loss: 0.7607  loss_cls: 0.2011  loss_box_reg: 0.1943  loss_rpn_cls: 0.2249  loss_rpn_loc: 0.1558  time: 0.7120  data_time: 0.0205  lr: 0.02  max_mem: 9678M
[01/01 17:36:17] d2.utils.events INFO:  eta: 4:40:44  iter: 199  total_loss: 0.7577  loss_cls: 0.1836  loss_box_reg: 0.1975  loss_rpn_cls: 0.1945  loss_rpn_loc: 0.1528  time: 0.7118  data_time: 0.0204  lr: 0.02  max_mem: 9678M
[01/01 17:36:32] d2.utils.events INFO:  eta: 4:40:30  iter: 219  total_loss: 0.6647  loss_cls: 0.1585  loss_box_reg: 0.1834  loss_rpn_cls: 0.1846  loss_rpn_loc: 0.1413  time: 0.7120  data_time: 0.0151  lr: 0.02  max_mem: 9678M
[01/01 17:36:51] d2.utils.events INFO:  eta: 4:41:00  iter: 239  total_loss: 0.7158  loss_cls: 0.1747  loss_box_reg: 0.1993  loss_rpn_cls: 0.2009  loss_rpn_loc: 0.1445  time: 0.7325  data_time: 0.0185  lr: 0.02  max_mem: 9944M
[01/01 17:37:08] d2.utils.events INFO:  eta: 4:41:20  iter: 259  total_loss: 0.6917  loss_cls: 0.1535  loss_box_reg: 0.19  loss_rpn_cls: 0.1783  loss_rpn_loc: 0.1511  time: 0.7440  data_time: 0.0180  lr: 0.02  max_mem: 9944M
[01/01 17:37:26] d2.utils.events INFO:  eta: 4:41:26  iter: 279  total_loss: 0.6795  loss_cls: 0.1613  loss_box_reg: 0.1848  loss_rpn_cls: 0.1821  loss_rpn_loc: 0.164  time: 0.7538  data_time: 0.0164  lr: 0.02  max_mem: 9944M
[01/01 17:37:43] d2.utils.events INFO:  eta: 4:41:11  iter: 299  total_loss: 0.7007  loss_cls: 0.1674  loss_box_reg: 0.2122  loss_rpn_cls: 0.1665  loss_rpn_loc: 0.1505  time: 0.7605  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 17:37:59] d2.utils.events INFO:  eta: 4:40:57  iter: 319  total_loss: 0.7205  loss_cls: 0.1708  loss_box_reg: 0.2276  loss_rpn_cls: 0.1672  loss_rpn_loc: 0.1435  time: 0.7629  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 17:38:13] d2.utils.events INFO:  eta: 4:41:02  iter: 339  total_loss: 0.7171  loss_cls: 0.1501  loss_box_reg: 0.2022  loss_rpn_cls: 0.18  loss_rpn_loc: 0.1369  time: 0.7601  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 17:38:27] d2.utils.events INFO:  eta: 4:39:53  iter: 359  total_loss: 0.6857  loss_cls: 0.1505  loss_box_reg: 0.1995  loss_rpn_cls: 0.1601  loss_rpn_loc: 0.1551  time: 0.7560  data_time: 0.0254  lr: 0.02  max_mem: 9944M
[01/01 17:38:41] d2.utils.events INFO:  eta: 4:38:51  iter: 379  total_loss: 0.6734  loss_cls: 0.1597  loss_box_reg: 0.1996  loss_rpn_cls: 0.1896  loss_rpn_loc: 0.1453  time: 0.7529  data_time: 0.0146  lr: 0.02  max_mem: 9944M
[01/01 17:38:55] d2.utils.events INFO:  eta: 4:38:19  iter: 399  total_loss: 0.6048  loss_cls: 0.1423  loss_box_reg: 0.1808  loss_rpn_cls: 0.1639  loss_rpn_loc: 0.1206  time: 0.7502  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 17:39:09] d2.utils.events INFO:  eta: 4:37:47  iter: 419  total_loss: 0.6081  loss_cls: 0.148  loss_box_reg: 0.1957  loss_rpn_cls: 0.1492  loss_rpn_loc: 0.1338  time: 0.7475  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 17:39:23] d2.utils.events INFO:  eta: 4:36:53  iter: 439  total_loss: 0.6466  loss_cls: 0.1369  loss_box_reg: 0.2038  loss_rpn_cls: 0.1539  loss_rpn_loc: 0.1461  time: 0.7453  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 17:39:37] d2.utils.events INFO:  eta: 4:36:15  iter: 459  total_loss: 0.6618  loss_cls: 0.1521  loss_box_reg: 0.2093  loss_rpn_cls: 0.1562  loss_rpn_loc: 0.1345  time: 0.7431  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 17:39:52] d2.utils.events INFO:  eta: 4:35:43  iter: 479  total_loss: 0.6964  loss_cls: 0.1566  loss_box_reg: 0.2139  loss_rpn_cls: 0.1688  loss_rpn_loc: 0.1357  time: 0.7443  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 17:40:09] d2.utils.events INFO:  eta: 4:35:20  iter: 499  total_loss: 0.6516  loss_cls: 0.1368  loss_box_reg: 0.2076  loss_rpn_cls: 0.1597  loss_rpn_loc: 0.1255  time: 0.7471  data_time: 0.0279  lr: 0.02  max_mem: 9944M
[01/01 17:40:23] d2.utils.events INFO:  eta: 4:35:04  iter: 519  total_loss: 0.6792  loss_cls: 0.158  loss_box_reg: 0.2129  loss_rpn_cls: 0.1521  loss_rpn_loc: 0.1245  time: 0.7451  data_time: 0.0231  lr: 0.02  max_mem: 9944M
[01/01 17:40:37] d2.utils.events INFO:  eta: 4:34:48  iter: 539  total_loss: 0.6453  loss_cls: 0.1391  loss_box_reg: 0.219  loss_rpn_cls: 0.142  loss_rpn_loc: 0.1483  time: 0.7432  data_time: 0.0199  lr: 0.02  max_mem: 9944M
[01/01 17:40:51] d2.utils.events INFO:  eta: 4:34:25  iter: 559  total_loss: 0.6083  loss_cls: 0.1479  loss_box_reg: 0.2045  loss_rpn_cls: 0.1319  loss_rpn_loc: 0.1291  time: 0.7431  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 17:41:06] d2.utils.events INFO:  eta: 4:34:24  iter: 579  total_loss: 0.6602  loss_cls: 0.156  loss_box_reg: 0.2096  loss_rpn_cls: 0.1492  loss_rpn_loc: 0.1236  time: 0.7433  data_time: 0.0217  lr: 0.02  max_mem: 9944M
[01/01 17:41:21] d2.utils.events INFO:  eta: 4:34:05  iter: 599  total_loss: 0.6344  loss_cls: 0.1425  loss_box_reg: 0.1969  loss_rpn_cls: 0.1427  loss_rpn_loc: 0.1431  time: 0.7422  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 17:41:35] d2.utils.events INFO:  eta: 4:33:28  iter: 619  total_loss: 0.7304  loss_cls: 0.1699  loss_box_reg: 0.2213  loss_rpn_cls: 0.1578  loss_rpn_loc: 0.1548  time: 0.7408  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 17:41:48] d2.utils.events INFO:  eta: 4:33:00  iter: 639  total_loss: 0.6785  loss_cls: 0.1616  loss_box_reg: 0.2111  loss_rpn_cls: 0.1652  loss_rpn_loc: 0.1371  time: 0.7394  data_time: 0.0180  lr: 0.02  max_mem: 9944M
[01/01 17:42:03] d2.utils.events INFO:  eta: 4:32:31  iter: 659  total_loss: 0.6359  loss_cls: 0.1571  loss_box_reg: 0.2138  loss_rpn_cls: 0.1325  loss_rpn_loc: 0.1271  time: 0.7386  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 17:42:17] d2.utils.events INFO:  eta: 4:32:04  iter: 679  total_loss: 0.6539  loss_cls: 0.1511  loss_box_reg: 0.1962  loss_rpn_cls: 0.1439  loss_rpn_loc: 0.1415  time: 0.7380  data_time: 0.0225  lr: 0.02  max_mem: 9944M
[01/01 17:42:31] d2.utils.events INFO:  eta: 4:31:23  iter: 699  total_loss: 0.6669  loss_cls: 0.1508  loss_box_reg: 0.2225  loss_rpn_cls: 0.1506  loss_rpn_loc: 0.1267  time: 0.7369  data_time: 0.0172  lr: 0.02  max_mem: 9944M
[01/01 17:42:45] d2.utils.events INFO:  eta: 4:31:09  iter: 719  total_loss: 0.6164  loss_cls: 0.1516  loss_box_reg: 0.2075  loss_rpn_cls: 0.135  loss_rpn_loc: 0.1403  time: 0.7359  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 17:42:59] d2.utils.events INFO:  eta: 4:30:55  iter: 739  total_loss: 0.655  loss_cls: 0.1424  loss_box_reg: 0.1995  loss_rpn_cls: 0.1492  loss_rpn_loc: 0.1412  time: 0.7351  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 17:43:14] d2.utils.events INFO:  eta: 4:30:36  iter: 759  total_loss: 0.6338  loss_cls: 0.1402  loss_box_reg: 0.1905  loss_rpn_cls: 0.1529  loss_rpn_loc: 0.1359  time: 0.7345  data_time: 0.0233  lr: 0.02  max_mem: 9944M
[01/01 17:43:27] d2.utils.events INFO:  eta: 4:30:10  iter: 779  total_loss: 0.6727  loss_cls: 0.1498  loss_box_reg: 0.2013  loss_rpn_cls: 0.1546  loss_rpn_loc: 0.1244  time: 0.7331  data_time: 0.0142  lr: 0.02  max_mem: 9944M
[01/01 17:43:42] d2.utils.events INFO:  eta: 4:29:51  iter: 799  total_loss: 0.6126  loss_cls: 0.1394  loss_box_reg: 0.2001  loss_rpn_cls: 0.1311  loss_rpn_loc: 0.1475  time: 0.7330  data_time: 0.0189  lr: 0.02  max_mem: 9944M
[01/01 17:43:56] d2.utils.events INFO:  eta: 4:29:21  iter: 819  total_loss: 0.6189  loss_cls: 0.1458  loss_box_reg: 0.2175  loss_rpn_cls: 0.1324  loss_rpn_loc: 0.1281  time: 0.7319  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 17:44:10] d2.utils.events INFO:  eta: 4:28:58  iter: 839  total_loss: 0.6662  loss_cls: 0.1561  loss_box_reg: 0.223  loss_rpn_cls: 0.1404  loss_rpn_loc: 0.1479  time: 0.7312  data_time: 0.0171  lr: 0.02  max_mem: 9944M
[01/01 17:44:24] d2.utils.events INFO:  eta: 4:28:44  iter: 859  total_loss: 0.6389  loss_cls: 0.1514  loss_box_reg: 0.2131  loss_rpn_cls: 0.1344  loss_rpn_loc: 0.1448  time: 0.7306  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 17:44:39] d2.utils.events INFO:  eta: 4:28:30  iter: 879  total_loss: 0.5772  loss_cls: 0.1421  loss_box_reg: 0.1816  loss_rpn_cls: 0.1353  loss_rpn_loc: 0.1292  time: 0.7310  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 17:44:53] d2.utils.events INFO:  eta: 4:28:16  iter: 899  total_loss: 0.6372  loss_cls: 0.1471  loss_box_reg: 0.1982  loss_rpn_cls: 0.1432  loss_rpn_loc: 0.1424  time: 0.7303  data_time: 0.0148  lr: 0.02  max_mem: 9944M
[01/01 17:45:08] d2.utils.events INFO:  eta: 4:28:02  iter: 919  total_loss: 0.6334  loss_cls: 0.1565  loss_box_reg: 0.212  loss_rpn_cls: 0.1353  loss_rpn_loc: 0.156  time: 0.7307  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 17:45:24] d2.utils.events INFO:  eta: 4:27:45  iter: 939  total_loss: 0.6016  loss_cls: 0.1507  loss_box_reg: 0.1978  loss_rpn_cls: 0.1197  loss_rpn_loc: 0.1272  time: 0.7319  data_time: 0.0180  lr: 0.02  max_mem: 9944M
[01/01 17:45:37] d2.utils.events INFO:  eta: 4:27:26  iter: 959  total_loss: 0.6757  loss_cls: 0.1671  loss_box_reg: 0.2198  loss_rpn_cls: 0.1458  loss_rpn_loc: 0.1504  time: 0.7310  data_time: 0.0154  lr: 0.02  max_mem: 9944M
[01/01 17:45:51] d2.utils.events INFO:  eta: 4:27:12  iter: 979  total_loss: 0.6072  loss_cls: 0.1463  loss_box_reg: 0.2032  loss_rpn_cls: 0.1403  loss_rpn_loc: 0.1178  time: 0.7303  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 17:46:05] d2.utils.events INFO:  eta: 4:26:51  iter: 999  total_loss: 0.6463  loss_cls: 0.1522  loss_box_reg: 0.1918  loss_rpn_cls: 0.1357  loss_rpn_loc: 0.1472  time: 0.7295  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 17:46:20] d2.utils.events INFO:  eta: 4:26:25  iter: 1019  total_loss: 0.6082  loss_cls: 0.1346  loss_box_reg: 0.1951  loss_rpn_cls: 0.1264  loss_rpn_loc: 0.1417  time: 0.7301  data_time: 0.0275  lr: 0.02  max_mem: 9944M
[01/01 17:46:34] d2.utils.events INFO:  eta: 4:26:01  iter: 1039  total_loss: 0.5974  loss_cls: 0.1494  loss_box_reg: 0.2022  loss_rpn_cls: 0.123  loss_rpn_loc: 0.1257  time: 0.7293  data_time: 0.0162  lr: 0.02  max_mem: 9944M
[01/01 17:46:49] d2.utils.events INFO:  eta: 4:25:32  iter: 1059  total_loss: 0.6288  loss_cls: 0.148  loss_box_reg: 0.2023  loss_rpn_cls: 0.1307  loss_rpn_loc: 0.1292  time: 0.7294  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 17:47:03] d2.utils.events INFO:  eta: 4:25:04  iter: 1079  total_loss: 0.6416  loss_cls: 0.153  loss_box_reg: 0.2032  loss_rpn_cls: 0.1366  loss_rpn_loc: 0.1252  time: 0.7290  data_time: 0.0226  lr: 0.02  max_mem: 9944M
[01/01 17:47:17] d2.utils.events INFO:  eta: 4:24:42  iter: 1099  total_loss: 0.6207  loss_cls: 0.15  loss_box_reg: 0.213  loss_rpn_cls: 0.1293  loss_rpn_loc: 0.1328  time: 0.7284  data_time: 0.0175  lr: 0.02  max_mem: 9944M
[01/01 17:47:31] d2.utils.events INFO:  eta: 4:23:48  iter: 1119  total_loss: 0.5823  loss_cls: 0.144  loss_box_reg: 0.1785  loss_rpn_cls: 0.1186  loss_rpn_loc: 0.1363  time: 0.7277  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 17:47:45] d2.utils.events INFO:  eta: 4:23:34  iter: 1139  total_loss: 0.6779  loss_cls: 0.1676  loss_box_reg: 0.2286  loss_rpn_cls: 0.133  loss_rpn_loc: 0.1531  time: 0.7275  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 17:47:59] d2.utils.events INFO:  eta: 4:22:53  iter: 1159  total_loss: 0.5934  loss_cls: 0.149  loss_box_reg: 0.1892  loss_rpn_cls: 0.1148  loss_rpn_loc: 0.1307  time: 0.7271  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 17:48:13] d2.utils.events INFO:  eta: 4:22:21  iter: 1179  total_loss: 0.5727  loss_cls: 0.1407  loss_box_reg: 0.1808  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1287  time: 0.7263  data_time: 0.0122  lr: 0.02  max_mem: 9944M
[01/01 17:48:27] d2.utils.events INFO:  eta: 4:21:57  iter: 1199  total_loss: 0.6311  loss_cls: 0.1516  loss_box_reg: 0.204  loss_rpn_cls: 0.1203  loss_rpn_loc: 0.1336  time: 0.7262  data_time: 0.0168  lr: 0.02  max_mem: 9944M
[01/01 17:48:41] d2.utils.events INFO:  eta: 4:21:28  iter: 1219  total_loss: 0.5752  loss_cls: 0.1387  loss_box_reg: 0.2021  loss_rpn_cls: 0.1255  loss_rpn_loc: 0.1089  time: 0.7258  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 17:48:55] d2.utils.events INFO:  eta: 4:20:59  iter: 1239  total_loss: 0.5831  loss_cls: 0.1323  loss_box_reg: 0.1997  loss_rpn_cls: 0.1183  loss_rpn_loc: 0.1382  time: 0.7255  data_time: 0.0222  lr: 0.02  max_mem: 9944M
[01/01 17:49:10] d2.utils.events INFO:  eta: 4:20:25  iter: 1259  total_loss: 0.5916  loss_cls: 0.1376  loss_box_reg: 0.1963  loss_rpn_cls: 0.1256  loss_rpn_loc: 0.1257  time: 0.7258  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 17:49:24] d2.utils.events INFO:  eta: 4:19:46  iter: 1279  total_loss: 0.6059  loss_cls: 0.1449  loss_box_reg: 0.1982  loss_rpn_cls: 0.1221  loss_rpn_loc: 0.1289  time: 0.7251  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 17:49:38] d2.utils.events INFO:  eta: 4:19:31  iter: 1299  total_loss: 0.6206  loss_cls: 0.1421  loss_box_reg: 0.2078  loss_rpn_cls: 0.1218  loss_rpn_loc: 0.1338  time: 0.7248  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 17:49:53] d2.utils.events INFO:  eta: 4:19:13  iter: 1319  total_loss: 0.6255  loss_cls: 0.1649  loss_box_reg: 0.2107  loss_rpn_cls: 0.122  loss_rpn_loc: 0.1241  time: 0.7250  data_time: 0.0216  lr: 0.02  max_mem: 9944M
[01/01 17:50:06] d2.utils.events INFO:  eta: 4:18:44  iter: 1339  total_loss: 0.5508  loss_cls: 0.1208  loss_box_reg: 0.1707  loss_rpn_cls: 0.1134  loss_rpn_loc: 0.1383  time: 0.7244  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 17:50:21] d2.utils.events INFO:  eta: 4:18:29  iter: 1359  total_loss: 0.6465  loss_cls: 0.1478  loss_box_reg: 0.2135  loss_rpn_cls: 0.1244  loss_rpn_loc: 0.1428  time: 0.7242  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 17:50:35] d2.utils.events INFO:  eta: 4:18:15  iter: 1379  total_loss: 0.5851  loss_cls: 0.1366  loss_box_reg: 0.1998  loss_rpn_cls: 0.1143  loss_rpn_loc: 0.1257  time: 0.7238  data_time: 0.0150  lr: 0.02  max_mem: 9944M
[01/01 17:50:49] d2.utils.events INFO:  eta: 4:18:00  iter: 1399  total_loss: 0.5793  loss_cls: 0.1318  loss_box_reg: 0.182  loss_rpn_cls: 0.1205  loss_rpn_loc: 0.1353  time: 0.7237  data_time: 0.0229  lr: 0.02  max_mem: 9944M
[01/01 17:51:03] d2.utils.events INFO:  eta: 4:17:47  iter: 1419  total_loss: 0.6403  loss_cls: 0.1516  loss_box_reg: 0.2097  loss_rpn_cls: 0.1204  loss_rpn_loc: 0.1434  time: 0.7233  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 17:51:17] d2.utils.events INFO:  eta: 4:17:31  iter: 1439  total_loss: 0.5599  loss_cls: 0.1163  loss_box_reg: 0.1748  loss_rpn_cls: 0.1127  loss_rpn_loc: 0.1336  time: 0.7233  data_time: 0.0240  lr: 0.02  max_mem: 9944M
[01/01 17:51:32] d2.utils.events INFO:  eta: 4:17:09  iter: 1459  total_loss: 0.6082  loss_cls: 0.1366  loss_box_reg: 0.1943  loss_rpn_cls: 0.1251  loss_rpn_loc: 0.1494  time: 0.7231  data_time: 0.0245  lr: 0.02  max_mem: 9944M
[01/01 17:51:46] d2.utils.events INFO:  eta: 4:16:44  iter: 1479  total_loss: 0.698  loss_cls: 0.1546  loss_box_reg: 0.2271  loss_rpn_cls: 0.123  loss_rpn_loc: 0.1476  time: 0.7228  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 17:52:00] d2.utils.events INFO:  eta: 4:16:28  iter: 1499  total_loss: 0.5654  loss_cls: 0.1355  loss_box_reg: 0.1791  loss_rpn_cls: 0.1088  loss_rpn_loc: 0.1447  time: 0.7227  data_time: 0.0171  lr: 0.02  max_mem: 9944M
[01/01 17:52:15] d2.utils.events INFO:  eta: 4:16:14  iter: 1519  total_loss: 0.6604  loss_cls: 0.1494  loss_box_reg: 0.207  loss_rpn_cls: 0.1189  loss_rpn_loc: 0.1468  time: 0.7232  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 17:52:29] d2.utils.events INFO:  eta: 4:15:59  iter: 1539  total_loss: 0.6462  loss_cls: 0.1441  loss_box_reg: 0.225  loss_rpn_cls: 0.1282  loss_rpn_loc: 0.1458  time: 0.7227  data_time: 0.0199  lr: 0.02  max_mem: 9944M
[01/01 17:52:43] d2.utils.events INFO:  eta: 4:15:41  iter: 1559  total_loss: 0.5895  loss_cls: 0.1372  loss_box_reg: 0.199  loss_rpn_cls: 0.1171  loss_rpn_loc: 0.135  time: 0.7226  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 17:52:57] d2.utils.events INFO:  eta: 4:15:21  iter: 1579  total_loss: 0.5801  loss_cls: 0.1251  loss_box_reg: 0.2073  loss_rpn_cls: 0.1235  loss_rpn_loc: 0.1297  time: 0.7225  data_time: 0.0188  lr: 0.02  max_mem: 9944M
[01/01 17:53:11] d2.utils.events INFO:  eta: 4:15:04  iter: 1599  total_loss: 0.5852  loss_cls: 0.1432  loss_box_reg: 0.1929  loss_rpn_cls: 0.124  loss_rpn_loc: 0.1363  time: 0.7221  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 17:53:25] d2.utils.events INFO:  eta: 4:14:41  iter: 1619  total_loss: 0.6141  loss_cls: 0.1384  loss_box_reg: 0.2011  loss_rpn_cls: 0.1212  loss_rpn_loc: 0.1346  time: 0.7218  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 17:53:41] d2.utils.events INFO:  eta: 4:14:27  iter: 1639  total_loss: 0.6099  loss_cls: 0.15  loss_box_reg: 0.2104  loss_rpn_cls: 0.1224  loss_rpn_loc: 0.1402  time: 0.7223  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 17:53:54] d2.utils.events INFO:  eta: 4:14:10  iter: 1659  total_loss: 0.567  loss_cls: 0.1292  loss_box_reg: 0.1804  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.1271  time: 0.7219  data_time: 0.0159  lr: 0.02  max_mem: 9944M
[01/01 17:54:09] d2.utils.events INFO:  eta: 4:13:54  iter: 1679  total_loss: 0.5784  loss_cls: 0.1409  loss_box_reg: 0.1998  loss_rpn_cls: 0.1223  loss_rpn_loc: 0.1244  time: 0.7218  data_time: 0.0216  lr: 0.02  max_mem: 9944M
[01/01 17:54:23] d2.utils.events INFO:  eta: 4:13:38  iter: 1699  total_loss: 0.6248  loss_cls: 0.1415  loss_box_reg: 0.2253  loss_rpn_cls: 0.119  loss_rpn_loc: 0.1284  time: 0.7218  data_time: 0.0217  lr: 0.02  max_mem: 9944M
[01/01 17:54:38] d2.utils.events INFO:  eta: 4:13:21  iter: 1719  total_loss: 0.6024  loss_cls: 0.1508  loss_box_reg: 0.2121  loss_rpn_cls: 0.1146  loss_rpn_loc: 0.1379  time: 0.7223  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 17:54:52] d2.utils.events INFO:  eta: 4:13:03  iter: 1739  total_loss: 0.6271  loss_cls: 0.1382  loss_box_reg: 0.2044  loss_rpn_cls: 0.1183  loss_rpn_loc: 0.1469  time: 0.7220  data_time: 0.0169  lr: 0.02  max_mem: 9944M
[01/01 17:55:06] d2.utils.events INFO:  eta: 4:12:48  iter: 1759  total_loss: 0.5934  loss_cls: 0.1271  loss_box_reg: 0.185  loss_rpn_cls: 0.1174  loss_rpn_loc: 0.1403  time: 0.7217  data_time: 0.0184  lr: 0.02  max_mem: 9944M
[01/01 17:55:21] d2.utils.events INFO:  eta: 4:12:36  iter: 1779  total_loss: 0.5788  loss_cls: 0.1401  loss_box_reg: 0.1918  loss_rpn_cls: 0.1201  loss_rpn_loc: 0.1401  time: 0.7217  data_time: 0.0248  lr: 0.02  max_mem: 9944M
[01/01 17:55:35] d2.utils.events INFO:  eta: 4:12:22  iter: 1799  total_loss: 0.5993  loss_cls: 0.1521  loss_box_reg: 0.1909  loss_rpn_cls: 0.1135  loss_rpn_loc: 0.1176  time: 0.7218  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 17:55:49] d2.utils.events INFO:  eta: 4:12:19  iter: 1819  total_loss: 0.5768  loss_cls: 0.1347  loss_box_reg: 0.1926  loss_rpn_cls: 0.1146  loss_rpn_loc: 0.1205  time: 0.7216  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 17:56:03] d2.utils.events INFO:  eta: 4:12:05  iter: 1839  total_loss: 0.6036  loss_cls: 0.139  loss_box_reg: 0.2096  loss_rpn_cls: 0.1219  loss_rpn_loc: 0.1525  time: 0.7213  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 17:56:18] d2.utils.events INFO:  eta: 4:11:54  iter: 1859  total_loss: 0.5652  loss_cls: 0.1306  loss_box_reg: 0.1864  loss_rpn_cls: 0.1121  loss_rpn_loc: 0.1233  time: 0.7214  data_time: 0.0189  lr: 0.02  max_mem: 9944M
[01/01 17:56:32] d2.utils.events INFO:  eta: 4:11:37  iter: 1879  total_loss: 0.6309  loss_cls: 0.1455  loss_box_reg: 0.2048  loss_rpn_cls: 0.1199  loss_rpn_loc: 0.147  time: 0.7212  data_time: 0.0211  lr: 0.02  max_mem: 9944M
[01/01 17:56:47] d2.utils.events INFO:  eta: 4:11:30  iter: 1899  total_loss: 0.5795  loss_cls: 0.1366  loss_box_reg: 0.1924  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.1354  time: 0.7213  data_time: 0.0213  lr: 0.02  max_mem: 9944M
[01/01 17:57:06] d2.utils.events INFO:  eta: 4:11:16  iter: 1919  total_loss: 0.5974  loss_cls: 0.1374  loss_box_reg: 0.2036  loss_rpn_cls: 0.1233  loss_rpn_loc: 0.1256  time: 0.7238  data_time: 0.0209  lr: 0.02  max_mem: 9944M
[01/01 17:57:22] d2.utils.events INFO:  eta: 4:11:09  iter: 1939  total_loss: 0.5567  loss_cls: 0.1256  loss_box_reg: 0.1862  loss_rpn_cls: 0.117  loss_rpn_loc: 0.1314  time: 0.7248  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 17:57:38] d2.utils.events INFO:  eta: 4:10:58  iter: 1959  total_loss: 0.585  loss_cls: 0.1361  loss_box_reg: 0.1925  loss_rpn_cls: 0.1052  loss_rpn_loc: 0.1198  time: 0.7253  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 17:57:54] d2.utils.events INFO:  eta: 4:10:49  iter: 1979  total_loss: 0.6317  loss_cls: 0.1305  loss_box_reg: 0.2089  loss_rpn_cls: 0.1061  loss_rpn_loc: 0.1386  time: 0.7260  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 17:58:09] d2.utils.events INFO:  eta: 4:10:40  iter: 1999  total_loss: 0.5313  loss_cls: 0.1186  loss_box_reg: 0.181  loss_rpn_cls: 0.098  loss_rpn_loc: 0.1199  time: 0.7264  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 17:58:23] d2.utils.events INFO:  eta: 4:10:40  iter: 2019  total_loss: 0.5529  loss_cls: 0.1276  loss_box_reg: 0.1888  loss_rpn_cls: 0.1134  loss_rpn_loc: 0.1116  time: 0.7262  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 17:58:38] d2.utils.events INFO:  eta: 4:10:41  iter: 2039  total_loss: 0.6036  loss_cls: 0.1292  loss_box_reg: 0.1854  loss_rpn_cls: 0.1006  loss_rpn_loc: 0.1526  time: 0.7262  data_time: 0.0253  lr: 0.02  max_mem: 9944M
[01/01 17:58:52] d2.utils.events INFO:  eta: 4:10:30  iter: 2059  total_loss: 0.6015  loss_cls: 0.1291  loss_box_reg: 0.208  loss_rpn_cls: 0.1058  loss_rpn_loc: 0.1446  time: 0.7262  data_time: 0.0228  lr: 0.02  max_mem: 9944M
[01/01 17:59:07] d2.utils.events INFO:  eta: 4:10:28  iter: 2079  total_loss: 0.5672  loss_cls: 0.1227  loss_box_reg: 0.1899  loss_rpn_cls: 0.109  loss_rpn_loc: 0.1203  time: 0.7263  data_time: 0.0217  lr: 0.02  max_mem: 9944M
[01/01 17:59:21] d2.utils.events INFO:  eta: 4:10:19  iter: 2099  total_loss: 0.6096  loss_cls: 0.1502  loss_box_reg: 0.2084  loss_rpn_cls: 0.1219  loss_rpn_loc: 0.1519  time: 0.7262  data_time: 0.0195  lr: 0.02  max_mem: 9944M
[01/01 17:59:35] d2.utils.events INFO:  eta: 4:10:12  iter: 2119  total_loss: 0.574  loss_cls: 0.139  loss_box_reg: 0.203  loss_rpn_cls: 0.1118  loss_rpn_loc: 0.1296  time: 0.7260  data_time: 0.0202  lr: 0.02  max_mem: 9944M
[01/01 17:59:51] d2.utils.events INFO:  eta: 4:09:54  iter: 2139  total_loss: 0.5822  loss_cls: 0.1314  loss_box_reg: 0.193  loss_rpn_cls: 0.114  loss_rpn_loc: 0.1448  time: 0.7264  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 18:00:05] d2.utils.events INFO:  eta: 4:10:00  iter: 2159  total_loss: 0.5843  loss_cls: 0.1386  loss_box_reg: 0.1912  loss_rpn_cls: 0.1075  loss_rpn_loc: 0.1226  time: 0.7262  data_time: 0.0239  lr: 0.02  max_mem: 9944M
[01/01 18:00:20] d2.utils.events INFO:  eta: 4:09:54  iter: 2179  total_loss: 0.59  loss_cls: 0.1302  loss_box_reg: 0.216  loss_rpn_cls: 0.1041  loss_rpn_loc: 0.1209  time: 0.7265  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 18:00:35] d2.utils.events INFO:  eta: 4:09:48  iter: 2199  total_loss: 0.5315  loss_cls: 0.1165  loss_box_reg: 0.1734  loss_rpn_cls: 0.1018  loss_rpn_loc: 0.1338  time: 0.7267  data_time: 0.0277  lr: 0.02  max_mem: 9944M
[01/01 18:00:49] d2.utils.events INFO:  eta: 4:09:37  iter: 2219  total_loss: 0.5345  loss_cls: 0.1309  loss_box_reg: 0.2026  loss_rpn_cls: 0.1087  loss_rpn_loc: 0.1226  time: 0.7264  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 18:01:04] d2.utils.events INFO:  eta: 4:09:22  iter: 2239  total_loss: 0.5553  loss_cls: 0.1279  loss_box_reg: 0.1946  loss_rpn_cls: 0.1116  loss_rpn_loc: 0.1397  time: 0.7264  data_time: 0.0252  lr: 0.02  max_mem: 9944M
[01/01 18:01:24] d2.utils.events INFO:  eta: 4:09:20  iter: 2259  total_loss: 0.5326  loss_cls: 0.1255  loss_box_reg: 0.1795  loss_rpn_cls: 0.1091  loss_rpn_loc: 0.1319  time: 0.7289  data_time: 0.0199  lr: 0.02  max_mem: 9944M
[01/01 18:01:43] d2.utils.events INFO:  eta: 4:09:26  iter: 2279  total_loss: 0.5243  loss_cls: 0.1251  loss_box_reg: 0.1698  loss_rpn_cls: 0.1059  loss_rpn_loc: 0.1236  time: 0.7311  data_time: 0.0253  lr: 0.02  max_mem: 9944M
[01/01 18:01:59] d2.utils.events INFO:  eta: 4:09:13  iter: 2299  total_loss: 0.5851  loss_cls: 0.1377  loss_box_reg: 0.1999  loss_rpn_cls: 0.1203  loss_rpn_loc: 0.1305  time: 0.7316  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 18:02:14] d2.utils.events INFO:  eta: 4:09:09  iter: 2319  total_loss: 0.5693  loss_cls: 0.1284  loss_box_reg: 0.1992  loss_rpn_cls: 0.1111  loss_rpn_loc: 0.1243  time: 0.7315  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 18:02:29] d2.utils.events INFO:  eta: 4:08:59  iter: 2339  total_loss: 0.5526  loss_cls: 0.1196  loss_box_reg: 0.1851  loss_rpn_cls: 0.1115  loss_rpn_loc: 0.1255  time: 0.7317  data_time: 0.0250  lr: 0.02  max_mem: 9944M
[01/01 18:02:43] d2.utils.events INFO:  eta: 4:08:54  iter: 2359  total_loss: 0.5841  loss_cls: 0.1232  loss_box_reg: 0.1929  loss_rpn_cls: 0.1152  loss_rpn_loc: 0.1274  time: 0.7315  data_time: 0.0263  lr: 0.02  max_mem: 9944M
[01/01 18:02:57] d2.utils.events INFO:  eta: 4:08:40  iter: 2379  total_loss: 0.5936  loss_cls: 0.1297  loss_box_reg: 0.198  loss_rpn_cls: 0.1088  loss_rpn_loc: 0.1306  time: 0.7314  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:03:12] d2.utils.events INFO:  eta: 4:08:35  iter: 2399  total_loss: 0.578  loss_cls: 0.1371  loss_box_reg: 0.1903  loss_rpn_cls: 0.1108  loss_rpn_loc: 0.1313  time: 0.7316  data_time: 0.0297  lr: 0.02  max_mem: 9944M
[01/01 18:03:27] d2.utils.events INFO:  eta: 4:08:25  iter: 2419  total_loss: 0.525  loss_cls: 0.1283  loss_box_reg: 0.1825  loss_rpn_cls: 0.1055  loss_rpn_loc: 0.1204  time: 0.7317  data_time: 0.0229  lr: 0.02  max_mem: 9944M
[01/01 18:03:42] d2.utils.events INFO:  eta: 4:08:14  iter: 2439  total_loss: 0.5977  loss_cls: 0.141  loss_box_reg: 0.1987  loss_rpn_cls: 0.1121  loss_rpn_loc: 0.1327  time: 0.7318  data_time: 0.0207  lr: 0.02  max_mem: 9944M
[01/01 18:03:57] d2.utils.events INFO:  eta: 4:08:03  iter: 2459  total_loss: 0.5503  loss_cls: 0.1351  loss_box_reg: 0.2002  loss_rpn_cls: 0.1104  loss_rpn_loc: 0.114  time: 0.7317  data_time: 0.0198  lr: 0.02  max_mem: 9944M
[01/01 18:04:11] d2.utils.events INFO:  eta: 4:07:52  iter: 2479  total_loss: 0.5903  loss_cls: 0.1354  loss_box_reg: 0.2084  loss_rpn_cls: 0.09775  loss_rpn_loc: 0.1269  time: 0.7316  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:04:26] d2.utils.events INFO:  eta: 4:07:37  iter: 2499  total_loss: 0.5755  loss_cls: 0.1262  loss_box_reg: 0.174  loss_rpn_cls: 0.1198  loss_rpn_loc: 0.1333  time: 0.7319  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 18:04:40] d2.utils.events INFO:  eta: 4:07:22  iter: 2519  total_loss: 0.5404  loss_cls: 0.1222  loss_box_reg: 0.2012  loss_rpn_cls: 0.09716  loss_rpn_loc: 0.1333  time: 0.7316  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 18:04:56] d2.utils.events INFO:  eta: 4:07:01  iter: 2539  total_loss: 0.5898  loss_cls: 0.1447  loss_box_reg: 0.1879  loss_rpn_cls: 0.1097  loss_rpn_loc: 0.1333  time: 0.7319  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 18:05:10] d2.utils.events INFO:  eta: 4:06:51  iter: 2559  total_loss: 0.543  loss_cls: 0.1366  loss_box_reg: 0.1918  loss_rpn_cls: 0.09477  loss_rpn_loc: 0.1257  time: 0.7318  data_time: 0.0156  lr: 0.02  max_mem: 9944M
[01/01 18:05:25] d2.utils.events INFO:  eta: 4:06:33  iter: 2579  total_loss: 0.5506  loss_cls: 0.1289  loss_box_reg: 0.1972  loss_rpn_cls: 0.1071  loss_rpn_loc: 0.1108  time: 0.7320  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 18:05:43] d2.utils.events INFO:  eta: 4:06:23  iter: 2599  total_loss: 0.5434  loss_cls: 0.1193  loss_box_reg: 0.193  loss_rpn_cls: 0.1148  loss_rpn_loc: 0.1182  time: 0.7331  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 18:06:03] d2.utils.events INFO:  eta: 4:06:14  iter: 2619  total_loss: 0.5114  loss_cls: 0.1254  loss_box_reg: 0.1678  loss_rpn_cls: 0.09818  loss_rpn_loc: 0.1179  time: 0.7353  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 18:06:17] d2.utils.events INFO:  eta: 4:05:58  iter: 2639  total_loss: 0.5892  loss_cls: 0.1399  loss_box_reg: 0.2026  loss_rpn_cls: 0.1082  loss_rpn_loc: 0.1333  time: 0.7349  data_time: 0.0198  lr: 0.02  max_mem: 9944M
[01/01 18:06:30] d2.utils.events INFO:  eta: 4:05:42  iter: 2659  total_loss: 0.5783  loss_cls: 0.1371  loss_box_reg: 0.2067  loss_rpn_cls: 0.1143  loss_rpn_loc: 0.1321  time: 0.7345  data_time: 0.0198  lr: 0.02  max_mem: 9944M
[01/01 18:06:45] d2.utils.events INFO:  eta: 4:05:25  iter: 2679  total_loss: 0.5536  loss_cls: 0.1354  loss_box_reg: 0.1873  loss_rpn_cls: 0.108  loss_rpn_loc: 0.1278  time: 0.7343  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 18:06:59] d2.utils.events INFO:  eta: 4:05:12  iter: 2699  total_loss: 0.5733  loss_cls: 0.1364  loss_box_reg: 0.2025  loss_rpn_cls: 0.09694  loss_rpn_loc: 0.1269  time: 0.7343  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 18:07:14] d2.utils.events INFO:  eta: 4:05:00  iter: 2719  total_loss: 0.5708  loss_cls: 0.1426  loss_box_reg: 0.2126  loss_rpn_cls: 0.09941  loss_rpn_loc: 0.1171  time: 0.7341  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 18:07:29] d2.utils.events INFO:  eta: 4:04:28  iter: 2739  total_loss: 0.5451  loss_cls: 0.1189  loss_box_reg: 0.1803  loss_rpn_cls: 0.1082  loss_rpn_loc: 0.1328  time: 0.7342  data_time: 0.0232  lr: 0.02  max_mem: 9944M
[01/01 18:07:42] d2.utils.events INFO:  eta: 4:03:53  iter: 2759  total_loss: 0.5563  loss_cls: 0.1316  loss_box_reg: 0.1845  loss_rpn_cls: 0.1103  loss_rpn_loc: 0.1254  time: 0.7339  data_time: 0.0261  lr: 0.02  max_mem: 9944M
[01/01 18:07:57] d2.utils.events INFO:  eta: 4:03:25  iter: 2779  total_loss: 0.4908  loss_cls: 0.1104  loss_box_reg: 0.1643  loss_rpn_cls: 0.1021  loss_rpn_loc: 0.1305  time: 0.7340  data_time: 0.0229  lr: 0.02  max_mem: 9944M
[01/01 18:08:11] d2.utils.events INFO:  eta: 4:02:51  iter: 2799  total_loss: 0.5191  loss_cls: 0.1165  loss_box_reg: 0.1785  loss_rpn_cls: 0.09884  loss_rpn_loc: 0.1167  time: 0.7336  data_time: 0.0207  lr: 0.02  max_mem: 9944M
[01/01 18:08:26] d2.utils.events INFO:  eta: 4:02:33  iter: 2819  total_loss: 0.5545  loss_cls: 0.1216  loss_box_reg: 0.1802  loss_rpn_cls: 0.1015  loss_rpn_loc: 0.1424  time: 0.7337  data_time: 0.0196  lr: 0.02  max_mem: 9944M
[01/01 18:08:42] d2.utils.events INFO:  eta: 4:02:12  iter: 2839  total_loss: 0.5382  loss_cls: 0.1318  loss_box_reg: 0.2003  loss_rpn_cls: 0.1177  loss_rpn_loc: 0.1094  time: 0.7342  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 18:08:56] d2.utils.events INFO:  eta: 4:01:59  iter: 2859  total_loss: 0.5448  loss_cls: 0.1353  loss_box_reg: 0.2107  loss_rpn_cls: 0.117  loss_rpn_loc: 0.121  time: 0.7339  data_time: 0.0211  lr: 0.02  max_mem: 9944M
[01/01 18:09:10] d2.utils.events INFO:  eta: 4:01:34  iter: 2879  total_loss: 0.488  loss_cls: 0.1127  loss_box_reg: 0.1693  loss_rpn_cls: 0.09935  loss_rpn_loc: 0.1216  time: 0.7338  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 18:09:25] d2.utils.events INFO:  eta: 4:00:51  iter: 2899  total_loss: 0.56  loss_cls: 0.1358  loss_box_reg: 0.1991  loss_rpn_cls: 0.09972  loss_rpn_loc: 0.1216  time: 0.7338  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 18:09:39] d2.utils.events INFO:  eta: 4:00:31  iter: 2919  total_loss: 0.5373  loss_cls: 0.1324  loss_box_reg: 0.1769  loss_rpn_cls: 0.106  loss_rpn_loc: 0.1272  time: 0.7337  data_time: 0.0144  lr: 0.02  max_mem: 9944M
[01/01 18:09:54] d2.utils.events INFO:  eta: 3:59:53  iter: 2939  total_loss: 0.5547  loss_cls: 0.1263  loss_box_reg: 0.181  loss_rpn_cls: 0.1023  loss_rpn_loc: 0.116  time: 0.7337  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 18:10:08] d2.utils.events INFO:  eta: 3:59:31  iter: 2959  total_loss: 0.5327  loss_cls: 0.1264  loss_box_reg: 0.1806  loss_rpn_cls: 0.09219  loss_rpn_loc: 0.1382  time: 0.7335  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 18:10:22] d2.utils.events INFO:  eta: 3:58:42  iter: 2979  total_loss: 0.5139  loss_cls: 0.1204  loss_box_reg: 0.1695  loss_rpn_cls: 0.09578  loss_rpn_loc: 0.1293  time: 0.7334  data_time: 0.0195  lr: 0.02  max_mem: 9944M
[01/01 18:10:39] d2.utils.events INFO:  eta: 3:58:01  iter: 2999  total_loss: 0.5516  loss_cls: 0.1319  loss_box_reg: 0.1872  loss_rpn_cls: 0.1101  loss_rpn_loc: 0.1187  time: 0.7339  data_time: 0.0170  lr: 0.02  max_mem: 9944M
[01/01 18:10:52] d2.utils.events INFO:  eta: 3:57:35  iter: 3019  total_loss: 0.5679  loss_cls: 0.1315  loss_box_reg: 0.1717  loss_rpn_cls: 0.1079  loss_rpn_loc: 0.1329  time: 0.7336  data_time: 0.0209  lr: 0.02  max_mem: 9944M
[01/01 18:11:09] d2.utils.events INFO:  eta: 3:57:16  iter: 3039  total_loss: 0.5563  loss_cls: 0.1212  loss_box_reg: 0.1767  loss_rpn_cls: 0.1004  loss_rpn_loc: 0.1335  time: 0.7342  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 18:11:23] d2.utils.events INFO:  eta: 3:56:53  iter: 3059  total_loss: 0.5789  loss_cls: 0.1403  loss_box_reg: 0.1963  loss_rpn_cls: 0.1138  loss_rpn_loc: 0.1181  time: 0.7339  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 18:11:37] d2.utils.events INFO:  eta: 3:56:32  iter: 3079  total_loss: 0.5151  loss_cls: 0.1151  loss_box_reg: 0.1879  loss_rpn_cls: 0.1024  loss_rpn_loc: 0.1137  time: 0.7337  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 18:11:52] d2.utils.events INFO:  eta: 3:56:12  iter: 3099  total_loss: 0.5866  loss_cls: 0.13  loss_box_reg: 0.1925  loss_rpn_cls: 0.1046  loss_rpn_loc: 0.1314  time: 0.7338  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 18:12:07] d2.utils.events INFO:  eta: 3:55:57  iter: 3119  total_loss: 0.4986  loss_cls: 0.1101  loss_box_reg: 0.1608  loss_rpn_cls: 0.091  loss_rpn_loc: 0.1201  time: 0.7338  data_time: 0.0257  lr: 0.02  max_mem: 9944M
[01/01 18:12:21] d2.utils.events INFO:  eta: 3:55:43  iter: 3139  total_loss: 0.6029  loss_cls: 0.1391  loss_box_reg: 0.1942  loss_rpn_cls: 0.1069  loss_rpn_loc: 0.139  time: 0.7337  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 18:12:36] d2.utils.events INFO:  eta: 3:55:20  iter: 3159  total_loss: 0.5803  loss_cls: 0.1348  loss_box_reg: 0.2026  loss_rpn_cls: 0.1089  loss_rpn_loc: 0.138  time: 0.7337  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 18:12:51] d2.utils.events INFO:  eta: 3:54:58  iter: 3179  total_loss: 0.5405  loss_cls: 0.12  loss_box_reg: 0.1607  loss_rpn_cls: 0.1036  loss_rpn_loc: 0.1325  time: 0.7339  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 18:13:05] d2.utils.events INFO:  eta: 3:54:36  iter: 3199  total_loss: 0.5556  loss_cls: 0.1376  loss_box_reg: 0.197  loss_rpn_cls: 0.09734  loss_rpn_loc: 0.1262  time: 0.7336  data_time: 0.0229  lr: 0.02  max_mem: 9944M
[01/01 18:13:20] d2.utils.events INFO:  eta: 3:54:18  iter: 3219  total_loss: 0.5484  loss_cls: 0.1368  loss_box_reg: 0.177  loss_rpn_cls: 0.103  loss_rpn_loc: 0.1303  time: 0.7338  data_time: 0.0184  lr: 0.02  max_mem: 9944M
[01/01 18:13:35] d2.utils.events INFO:  eta: 3:54:03  iter: 3239  total_loss: 0.5135  loss_cls: 0.1155  loss_box_reg: 0.1757  loss_rpn_cls: 0.09818  loss_rpn_loc: 0.1154  time: 0.7338  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 18:13:49] d2.utils.events INFO:  eta: 3:53:37  iter: 3259  total_loss: 0.5882  loss_cls: 0.1448  loss_box_reg: 0.2059  loss_rpn_cls: 0.102  loss_rpn_loc: 0.1325  time: 0.7338  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:14:03] d2.utils.events INFO:  eta: 3:53:11  iter: 3279  total_loss: 0.5493  loss_cls: 0.1262  loss_box_reg: 0.1821  loss_rpn_cls: 0.1041  loss_rpn_loc: 0.1336  time: 0.7336  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 18:14:18] d2.utils.events INFO:  eta: 3:53:01  iter: 3299  total_loss: 0.535  loss_cls: 0.1207  loss_box_reg: 0.188  loss_rpn_cls: 0.1028  loss_rpn_loc: 0.142  time: 0.7337  data_time: 0.0216  lr: 0.02  max_mem: 9944M
[01/01 18:14:33] d2.utils.events INFO:  eta: 3:52:38  iter: 3319  total_loss: 0.5118  loss_cls: 0.1166  loss_box_reg: 0.1697  loss_rpn_cls: 0.09591  loss_rpn_loc: 0.1238  time: 0.7336  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:14:48] d2.utils.events INFO:  eta: 3:52:20  iter: 3339  total_loss: 0.5485  loss_cls: 0.1205  loss_box_reg: 0.1915  loss_rpn_cls: 0.09941  loss_rpn_loc: 0.1336  time: 0.7337  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:15:03] d2.utils.events INFO:  eta: 3:52:00  iter: 3359  total_loss: 0.5198  loss_cls: 0.1068  loss_box_reg: 0.1666  loss_rpn_cls: 0.1117  loss_rpn_loc: 0.1291  time: 0.7337  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 18:15:18] d2.utils.events INFO:  eta: 3:51:42  iter: 3379  total_loss: 0.5579  loss_cls: 0.138  loss_box_reg: 0.1915  loss_rpn_cls: 0.09714  loss_rpn_loc: 0.1099  time: 0.7338  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 18:15:32] d2.utils.events INFO:  eta: 3:51:09  iter: 3399  total_loss: 0.5507  loss_cls: 0.132  loss_box_reg: 0.2013  loss_rpn_cls: 0.104  loss_rpn_loc: 0.1132  time: 0.7338  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 18:15:47] d2.utils.events INFO:  eta: 3:50:51  iter: 3419  total_loss: 0.5426  loss_cls: 0.1247  loss_box_reg: 0.1912  loss_rpn_cls: 0.1041  loss_rpn_loc: 0.1233  time: 0.7337  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 18:16:01] d2.utils.events INFO:  eta: 3:50:38  iter: 3439  total_loss: 0.5215  loss_cls: 0.1207  loss_box_reg: 0.1904  loss_rpn_cls: 0.09459  loss_rpn_loc: 0.1176  time: 0.7337  data_time: 0.0226  lr: 0.02  max_mem: 9944M
[01/01 18:16:15] d2.utils.events INFO:  eta: 3:50:24  iter: 3459  total_loss: 0.5486  loss_cls: 0.1329  loss_box_reg: 0.1746  loss_rpn_cls: 0.0997  loss_rpn_loc: 0.1112  time: 0.7335  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 18:16:30] d2.utils.events INFO:  eta: 3:50:15  iter: 3479  total_loss: 0.5085  loss_cls: 0.1184  loss_box_reg: 0.1777  loss_rpn_cls: 0.09764  loss_rpn_loc: 0.1266  time: 0.7336  data_time: 0.0233  lr: 0.02  max_mem: 9944M
[01/01 18:16:45] d2.utils.events INFO:  eta: 3:49:59  iter: 3499  total_loss: 0.5949  loss_cls: 0.1469  loss_box_reg: 0.1995  loss_rpn_cls: 0.1077  loss_rpn_loc: 0.1214  time: 0.7335  data_time: 0.0160  lr: 0.02  max_mem: 9944M
[01/01 18:16:59] d2.utils.events INFO:  eta: 3:49:46  iter: 3519  total_loss: 0.456  loss_cls: 0.09934  loss_box_reg: 0.1396  loss_rpn_cls: 0.1012  loss_rpn_loc: 0.1107  time: 0.7334  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:17:14] d2.utils.events INFO:  eta: 3:49:28  iter: 3539  total_loss: 0.5198  loss_cls: 0.1202  loss_box_reg: 0.1802  loss_rpn_cls: 0.09167  loss_rpn_loc: 0.1253  time: 0.7334  data_time: 0.0167  lr: 0.02  max_mem: 9944M
[01/01 18:17:29] d2.utils.events INFO:  eta: 3:49:15  iter: 3559  total_loss: 0.5016  loss_cls: 0.1148  loss_box_reg: 0.1826  loss_rpn_cls: 0.09053  loss_rpn_loc: 0.1206  time: 0.7335  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 18:17:44] d2.utils.events INFO:  eta: 3:49:01  iter: 3579  total_loss: 0.5231  loss_cls: 0.1231  loss_box_reg: 0.1657  loss_rpn_cls: 0.1099  loss_rpn_loc: 0.1219  time: 0.7337  data_time: 0.0276  lr: 0.02  max_mem: 9944M
[01/01 18:18:00] d2.utils.events INFO:  eta: 3:48:52  iter: 3599  total_loss: 0.5471  loss_cls: 0.1205  loss_box_reg: 0.1717  loss_rpn_cls: 0.09793  loss_rpn_loc: 0.1222  time: 0.7340  data_time: 0.0224  lr: 0.02  max_mem: 9944M
[01/01 18:18:22] d2.utils.events INFO:  eta: 3:48:32  iter: 3619  total_loss: 0.5207  loss_cls: 0.1191  loss_box_reg: 0.1756  loss_rpn_cls: 0.1026  loss_rpn_loc: 0.1459  time: 0.7362  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 18:18:36] d2.utils.events INFO:  eta: 3:48:25  iter: 3639  total_loss: 0.5652  loss_cls: 0.1274  loss_box_reg: 0.1829  loss_rpn_cls: 0.1089  loss_rpn_loc: 0.1231  time: 0.7359  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 18:18:50] d2.utils.events INFO:  eta: 3:48:14  iter: 3659  total_loss: 0.5429  loss_cls: 0.1333  loss_box_reg: 0.1867  loss_rpn_cls: 0.1076  loss_rpn_loc: 0.1234  time: 0.7356  data_time: 0.0239  lr: 0.02  max_mem: 9944M
[01/01 18:19:03] d2.utils.events INFO:  eta: 3:47:56  iter: 3679  total_loss: 0.5435  loss_cls: 0.1331  loss_box_reg: 0.1851  loss_rpn_cls: 0.09254  loss_rpn_loc: 0.1176  time: 0.7353  data_time: 0.0196  lr: 0.02  max_mem: 9944M
[01/01 18:19:17] d2.utils.events INFO:  eta: 3:47:39  iter: 3699  total_loss: 0.5101  loss_cls: 0.1217  loss_box_reg: 0.1667  loss_rpn_cls: 0.09253  loss_rpn_loc: 0.1294  time: 0.7350  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 18:19:32] d2.utils.events INFO:  eta: 3:47:25  iter: 3719  total_loss: 0.6045  loss_cls: 0.1424  loss_box_reg: 0.1968  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1382  time: 0.7352  data_time: 0.0195  lr: 0.02  max_mem: 9944M
[01/01 18:19:47] d2.utils.events INFO:  eta: 3:47:17  iter: 3739  total_loss: 0.5334  loss_cls: 0.12  loss_box_reg: 0.1731  loss_rpn_cls: 0.09389  loss_rpn_loc: 0.133  time: 0.7350  data_time: 0.0246  lr: 0.02  max_mem: 9944M
[01/01 18:20:01] d2.utils.events INFO:  eta: 3:47:05  iter: 3759  total_loss: 0.5913  loss_cls: 0.1341  loss_box_reg: 0.1932  loss_rpn_cls: 0.1017  loss_rpn_loc: 0.1303  time: 0.7349  data_time: 0.0228  lr: 0.02  max_mem: 9944M
[01/01 18:20:15] d2.utils.events INFO:  eta: 3:46:59  iter: 3779  total_loss: 0.5329  loss_cls: 0.1186  loss_box_reg: 0.1733  loss_rpn_cls: 0.09069  loss_rpn_loc: 0.1226  time: 0.7348  data_time: 0.0240  lr: 0.02  max_mem: 9944M
[01/01 18:20:30] d2.utils.events INFO:  eta: 3:46:53  iter: 3799  total_loss: 0.5431  loss_cls: 0.1266  loss_box_reg: 0.1671  loss_rpn_cls: 0.1108  loss_rpn_loc: 0.1207  time: 0.7347  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 18:20:45] d2.utils.events INFO:  eta: 3:46:37  iter: 3819  total_loss: 0.5721  loss_cls: 0.1346  loss_box_reg: 0.1936  loss_rpn_cls: 0.09883  loss_rpn_loc: 0.1328  time: 0.7348  data_time: 0.0180  lr: 0.02  max_mem: 9944M
[01/01 18:20:59] d2.utils.events INFO:  eta: 3:46:21  iter: 3839  total_loss: 0.5483  loss_cls: 0.1317  loss_box_reg: 0.1942  loss_rpn_cls: 0.09996  loss_rpn_loc: 0.1185  time: 0.7348  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 18:21:13] d2.utils.events INFO:  eta: 3:46:02  iter: 3859  total_loss: 0.5105  loss_cls: 0.1276  loss_box_reg: 0.1821  loss_rpn_cls: 0.09734  loss_rpn_loc: 0.1103  time: 0.7345  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:21:29] d2.utils.events INFO:  eta: 3:45:55  iter: 3879  total_loss: 0.485  loss_cls: 0.1164  loss_box_reg: 0.1755  loss_rpn_cls: 0.0994  loss_rpn_loc: 0.1091  time: 0.7348  data_time: 0.0145  lr: 0.02  max_mem: 9944M
[01/01 18:21:43] d2.utils.events INFO:  eta: 3:45:45  iter: 3899  total_loss: 0.5394  loss_cls: 0.1237  loss_box_reg: 0.192  loss_rpn_cls: 0.09707  loss_rpn_loc: 0.1126  time: 0.7347  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 18:21:57] d2.utils.events INFO:  eta: 3:45:36  iter: 3919  total_loss: 0.4889  loss_cls: 0.1151  loss_box_reg: 0.1781  loss_rpn_cls: 0.08637  loss_rpn_loc: 0.1118  time: 0.7346  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 18:22:12] d2.utils.events INFO:  eta: 3:45:25  iter: 3939  total_loss: 0.4541  loss_cls: 0.1103  loss_box_reg: 0.1527  loss_rpn_cls: 0.09253  loss_rpn_loc: 0.1075  time: 0.7347  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 18:22:27] d2.utils.events INFO:  eta: 3:45:16  iter: 3959  total_loss: 0.4969  loss_cls: 0.1159  loss_box_reg: 0.1895  loss_rpn_cls: 0.1033  loss_rpn_loc: 0.1167  time: 0.7348  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:22:42] d2.utils.events INFO:  eta: 3:45:12  iter: 3979  total_loss: 0.5524  loss_cls: 0.1185  loss_box_reg: 0.1926  loss_rpn_cls: 0.1066  loss_rpn_loc: 0.1386  time: 0.7347  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 18:22:56] d2.utils.events INFO:  eta: 3:45:02  iter: 3999  total_loss: 0.5313  loss_cls: 0.119  loss_box_reg: 0.1895  loss_rpn_cls: 0.09551  loss_rpn_loc: 0.1153  time: 0.7346  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 18:23:11] d2.utils.events INFO:  eta: 3:44:49  iter: 4019  total_loss: 0.5364  loss_cls: 0.112  loss_box_reg: 0.1875  loss_rpn_cls: 0.1119  loss_rpn_loc: 0.1268  time: 0.7347  data_time: 0.0185  lr: 0.02  max_mem: 9944M
[01/01 18:23:26] d2.utils.events INFO:  eta: 3:44:42  iter: 4039  total_loss: 0.5286  loss_cls: 0.1128  loss_box_reg: 0.1729  loss_rpn_cls: 0.1028  loss_rpn_loc: 0.1261  time: 0.7346  data_time: 0.0231  lr: 0.02  max_mem: 9944M
[01/01 18:23:40] d2.utils.events INFO:  eta: 3:44:46  iter: 4059  total_loss: 0.5057  loss_cls: 0.1211  loss_box_reg: 0.1652  loss_rpn_cls: 0.0893  loss_rpn_loc: 0.1254  time: 0.7346  data_time: 0.0398  lr: 0.02  max_mem: 9944M
[01/01 18:23:55] d2.utils.events INFO:  eta: 3:45:03  iter: 4079  total_loss: 0.4828  loss_cls: 0.1187  loss_box_reg: 0.1715  loss_rpn_cls: 0.107  loss_rpn_loc: 0.1169  time: 0.7347  data_time: 0.0247  lr: 0.02  max_mem: 9944M
[01/01 18:24:10] d2.utils.events INFO:  eta: 3:45:13  iter: 4099  total_loss: 0.5003  loss_cls: 0.1081  loss_box_reg: 0.1624  loss_rpn_cls: 0.0988  loss_rpn_loc: 0.1297  time: 0.7347  data_time: 0.0371  lr: 0.02  max_mem: 9944M
[01/01 18:24:25] d2.utils.events INFO:  eta: 3:45:09  iter: 4119  total_loss: 0.5039  loss_cls: 0.1138  loss_box_reg: 0.1639  loss_rpn_cls: 0.0988  loss_rpn_loc: 0.1218  time: 0.7347  data_time: 0.0231  lr: 0.02  max_mem: 9944M
[01/01 18:24:51] d2.utils.events INFO:  eta: 3:45:11  iter: 4139  total_loss: 0.5606  loss_cls: 0.1265  loss_box_reg: 0.1984  loss_rpn_cls: 0.09605  loss_rpn_loc: 0.1301  time: 0.7375  data_time: 0.0298  lr: 0.02  max_mem: 9944M
[01/01 18:25:05] d2.utils.events INFO:  eta: 3:44:54  iter: 4159  total_loss: 0.5124  loss_cls: 0.11  loss_box_reg: 0.181  loss_rpn_cls: 0.08782  loss_rpn_loc: 0.1267  time: 0.7372  data_time: 0.0207  lr: 0.02  max_mem: 9944M
[01/01 18:25:18] d2.utils.events INFO:  eta: 3:44:33  iter: 4179  total_loss: 0.4806  loss_cls: 0.09948  loss_box_reg: 0.1824  loss_rpn_cls: 0.08277  loss_rpn_loc: 0.1186  time: 0.7369  data_time: 0.0155  lr: 0.02  max_mem: 9944M
[01/01 18:25:31] d2.utils.events INFO:  eta: 3:44:13  iter: 4199  total_loss: 0.5406  loss_cls: 0.114  loss_box_reg: 0.1768  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.1237  time: 0.7365  data_time: 0.0173  lr: 0.02  max_mem: 9944M
[01/01 18:25:45] d2.utils.events INFO:  eta: 3:43:59  iter: 4219  total_loss: 0.5223  loss_cls: 0.1138  loss_box_reg: 0.1829  loss_rpn_cls: 0.0974  loss_rpn_loc: 0.1265  time: 0.7363  data_time: 0.0260  lr: 0.02  max_mem: 9944M
[01/01 18:25:58] d2.utils.events INFO:  eta: 3:43:29  iter: 4239  total_loss: 0.5419  loss_cls: 0.1265  loss_box_reg: 0.1788  loss_rpn_cls: 0.09491  loss_rpn_loc: 0.1313  time: 0.7359  data_time: 0.0261  lr: 0.02  max_mem: 9944M
[01/01 18:26:12] d2.utils.events INFO:  eta: 3:43:07  iter: 4259  total_loss: 0.5332  loss_cls: 0.1207  loss_box_reg: 0.1821  loss_rpn_cls: 0.1031  loss_rpn_loc: 0.1137  time: 0.7358  data_time: 0.0280  lr: 0.02  max_mem: 9944M
[01/01 18:26:27] d2.utils.events INFO:  eta: 3:42:48  iter: 4279  total_loss: 0.543  loss_cls: 0.1179  loss_box_reg: 0.1806  loss_rpn_cls: 0.09928  loss_rpn_loc: 0.1201  time: 0.7357  data_time: 0.0211  lr: 0.02  max_mem: 9944M
[01/01 18:26:41] d2.utils.events INFO:  eta: 3:42:10  iter: 4299  total_loss: 0.568  loss_cls: 0.1299  loss_box_reg: 0.2028  loss_rpn_cls: 0.1052  loss_rpn_loc: 0.1269  time: 0.7357  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 18:26:56] d2.utils.events INFO:  eta: 3:41:56  iter: 4319  total_loss: 0.5232  loss_cls: 0.1093  loss_box_reg: 0.179  loss_rpn_cls: 0.09236  loss_rpn_loc: 0.1303  time: 0.7356  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 18:27:10] d2.utils.events INFO:  eta: 3:41:38  iter: 4339  total_loss: 0.5115  loss_cls: 0.1122  loss_box_reg: 0.1686  loss_rpn_cls: 0.08996  loss_rpn_loc: 0.1128  time: 0.7356  data_time: 0.0196  lr: 0.02  max_mem: 9944M
[01/01 18:27:24] d2.utils.events INFO:  eta: 3:41:16  iter: 4359  total_loss: 0.521  loss_cls: 0.1171  loss_box_reg: 0.1625  loss_rpn_cls: 0.1078  loss_rpn_loc: 0.1146  time: 0.7354  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 18:27:41] d2.utils.events INFO:  eta: 3:41:03  iter: 4379  total_loss: 0.4969  loss_cls: 0.1162  loss_box_reg: 0.1799  loss_rpn_cls: 0.08838  loss_rpn_loc: 0.1224  time: 0.7358  data_time: 0.0212  lr: 0.02  max_mem: 9944M
[01/01 18:27:54] d2.utils.events INFO:  eta: 3:40:33  iter: 4399  total_loss: 0.4772  loss_cls: 0.1027  loss_box_reg: 0.1635  loss_rpn_cls: 0.0846  loss_rpn_loc: 0.1203  time: 0.7355  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 18:28:10] d2.utils.events INFO:  eta: 3:40:20  iter: 4419  total_loss: 0.5475  loss_cls: 0.1297  loss_box_reg: 0.1861  loss_rpn_cls: 0.1058  loss_rpn_loc: 0.1335  time: 0.7357  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:28:24] d2.utils.events INFO:  eta: 3:40:05  iter: 4439  total_loss: 0.5294  loss_cls: 0.1184  loss_box_reg: 0.1851  loss_rpn_cls: 0.09383  loss_rpn_loc: 0.122  time: 0.7356  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 18:28:40] d2.utils.events INFO:  eta: 3:39:53  iter: 4459  total_loss: 0.5199  loss_cls: 0.124  loss_box_reg: 0.1844  loss_rpn_cls: 0.08526  loss_rpn_loc: 0.1231  time: 0.7358  data_time: 0.0121  lr: 0.02  max_mem: 9944M
[01/01 18:28:55] d2.utils.events INFO:  eta: 3:39:31  iter: 4479  total_loss: 0.5588  loss_cls: 0.1215  loss_box_reg: 0.1892  loss_rpn_cls: 0.08956  loss_rpn_loc: 0.1194  time: 0.7358  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 18:29:09] d2.utils.events INFO:  eta: 3:39:18  iter: 4499  total_loss: 0.5142  loss_cls: 0.1101  loss_box_reg: 0.1684  loss_rpn_cls: 0.09357  loss_rpn_loc: 0.136  time: 0.7357  data_time: 0.0188  lr: 0.02  max_mem: 9944M
[01/01 18:29:24] d2.utils.events INFO:  eta: 3:39:09  iter: 4519  total_loss: 0.5227  loss_cls: 0.1163  loss_box_reg: 0.1832  loss_rpn_cls: 0.09125  loss_rpn_loc: 0.1224  time: 0.7358  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 18:29:39] d2.utils.events INFO:  eta: 3:38:58  iter: 4539  total_loss: 0.5158  loss_cls: 0.1185  loss_box_reg: 0.1734  loss_rpn_cls: 0.08963  loss_rpn_loc: 0.1195  time: 0.7358  data_time: 0.0123  lr: 0.02  max_mem: 9944M
[01/01 18:29:52] d2.utils.events INFO:  eta: 3:38:43  iter: 4559  total_loss: 0.4811  loss_cls: 0.1147  loss_box_reg: 0.1582  loss_rpn_cls: 0.08216  loss_rpn_loc: 0.1171  time: 0.7355  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 18:30:07] d2.utils.events INFO:  eta: 3:38:26  iter: 4579  total_loss: 0.5008  loss_cls: 0.1074  loss_box_reg: 0.1723  loss_rpn_cls: 0.08325  loss_rpn_loc: 0.1138  time: 0.7355  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 18:30:23] d2.utils.events INFO:  eta: 3:38:06  iter: 4599  total_loss: 0.5152  loss_cls: 0.1151  loss_box_reg: 0.1661  loss_rpn_cls: 0.08532  loss_rpn_loc: 0.1302  time: 0.7357  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 18:30:37] d2.utils.events INFO:  eta: 3:37:45  iter: 4619  total_loss: 0.5015  loss_cls: 0.1208  loss_box_reg: 0.164  loss_rpn_cls: 0.09415  loss_rpn_loc: 0.1227  time: 0.7357  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:30:52] d2.utils.events INFO:  eta: 3:37:37  iter: 4639  total_loss: 0.54  loss_cls: 0.1263  loss_box_reg: 0.1705  loss_rpn_cls: 0.1138  loss_rpn_loc: 0.1347  time: 0.7357  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 18:31:06] d2.utils.events INFO:  eta: 3:37:29  iter: 4659  total_loss: 0.5304  loss_cls: 0.1233  loss_box_reg: 0.1891  loss_rpn_cls: 0.0993  loss_rpn_loc: 0.129  time: 0.7356  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 18:31:21] d2.utils.events INFO:  eta: 3:37:16  iter: 4679  total_loss: 0.5258  loss_cls: 0.1248  loss_box_reg: 0.1794  loss_rpn_cls: 0.1008  loss_rpn_loc: 0.1378  time: 0.7356  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 18:31:35] d2.utils.events INFO:  eta: 3:37:03  iter: 4699  total_loss: 0.5281  loss_cls: 0.1145  loss_box_reg: 0.1782  loss_rpn_cls: 0.08939  loss_rpn_loc: 0.1481  time: 0.7354  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 18:31:50] d2.utils.events INFO:  eta: 3:36:50  iter: 4719  total_loss: 0.6058  loss_cls: 0.1421  loss_box_reg: 0.2163  loss_rpn_cls: 0.1012  loss_rpn_loc: 0.1225  time: 0.7355  data_time: 0.0152  lr: 0.02  max_mem: 9944M
[01/01 18:32:04] d2.utils.events INFO:  eta: 3:36:39  iter: 4739  total_loss: 0.5114  loss_cls: 0.1187  loss_box_reg: 0.1579  loss_rpn_cls: 0.08549  loss_rpn_loc: 0.1362  time: 0.7354  data_time: 0.0148  lr: 0.02  max_mem: 9944M
[01/01 18:32:19] d2.utils.events INFO:  eta: 3:36:24  iter: 4759  total_loss: 0.5096  loss_cls: 0.1194  loss_box_reg: 0.1756  loss_rpn_cls: 0.0942  loss_rpn_loc: 0.124  time: 0.7355  data_time: 0.0170  lr: 0.02  max_mem: 9944M
[01/01 18:32:34] d2.utils.events INFO:  eta: 3:36:12  iter: 4779  total_loss: 0.4821  loss_cls: 0.109  loss_box_reg: 0.1613  loss_rpn_cls: 0.08824  loss_rpn_loc: 0.1319  time: 0.7354  data_time: 0.0185  lr: 0.02  max_mem: 9944M
[01/01 18:32:48] d2.utils.events INFO:  eta: 3:35:57  iter: 4799  total_loss: 0.5343  loss_cls: 0.12  loss_box_reg: 0.1844  loss_rpn_cls: 0.09254  loss_rpn_loc: 0.1354  time: 0.7354  data_time: 0.0191  lr: 0.02  max_mem: 9944M
[01/01 18:33:03] d2.utils.events INFO:  eta: 3:35:42  iter: 4819  total_loss: 0.4821  loss_cls: 0.112  loss_box_reg: 0.1716  loss_rpn_cls: 0.08546  loss_rpn_loc: 0.1234  time: 0.7354  data_time: 0.0175  lr: 0.02  max_mem: 9944M
[01/01 18:33:17] d2.utils.events INFO:  eta: 3:35:29  iter: 4839  total_loss: 0.5145  loss_cls: 0.1082  loss_box_reg: 0.1676  loss_rpn_cls: 0.09358  loss_rpn_loc: 0.1152  time: 0.7353  data_time: 0.0251  lr: 0.02  max_mem: 9944M
[01/01 18:33:33] d2.utils.events INFO:  eta: 3:35:14  iter: 4859  total_loss: 0.5313  loss_cls: 0.1213  loss_box_reg: 0.1865  loss_rpn_cls: 0.1046  loss_rpn_loc: 0.1154  time: 0.7354  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 18:33:47] d2.utils.events INFO:  eta: 3:34:57  iter: 4879  total_loss: 0.5221  loss_cls: 0.126  loss_box_reg: 0.1936  loss_rpn_cls: 0.09449  loss_rpn_loc: 0.1295  time: 0.7354  data_time: 0.0167  lr: 0.02  max_mem: 9944M
[01/01 18:34:02] d2.utils.events INFO:  eta: 3:34:44  iter: 4899  total_loss: 0.5453  loss_cls: 0.1274  loss_box_reg: 0.1803  loss_rpn_cls: 0.1009  loss_rpn_loc: 0.1126  time: 0.7354  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 18:34:16] d2.utils.events INFO:  eta: 3:34:30  iter: 4919  total_loss: 0.5156  loss_cls: 0.1119  loss_box_reg: 0.1961  loss_rpn_cls: 0.0948  loss_rpn_loc: 0.1263  time: 0.7353  data_time: 0.0243  lr: 0.02  max_mem: 9944M
[01/01 18:34:31] d2.utils.events INFO:  eta: 3:34:09  iter: 4939  total_loss: 0.4433  loss_cls: 0.09589  loss_box_reg: 0.1524  loss_rpn_cls: 0.08776  loss_rpn_loc: 0.1097  time: 0.7352  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 18:34:45] d2.utils.events INFO:  eta: 3:33:56  iter: 4959  total_loss: 0.506  loss_cls: 0.1176  loss_box_reg: 0.184  loss_rpn_cls: 0.0925  loss_rpn_loc: 0.1189  time: 0.7352  data_time: 0.0212  lr: 0.02  max_mem: 9944M
[01/01 18:35:00] d2.utils.events INFO:  eta: 3:33:39  iter: 4979  total_loss: 0.512  loss_cls: 0.1201  loss_box_reg: 0.1784  loss_rpn_cls: 0.09019  loss_rpn_loc: 0.1154  time: 0.7352  data_time: 0.0159  lr: 0.02  max_mem: 9944M
[01/01 18:35:14] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/model_0004999.pth
[01/01 18:35:15] d2.utils.events INFO:  eta: 3:33:28  iter: 4999  total_loss: 0.5573  loss_cls: 0.1233  loss_box_reg: 0.1887  loss_rpn_cls: 0.09295  loss_rpn_loc: 0.1308  time: 0.7352  data_time: 0.0191  lr: 0.02  max_mem: 9944M
[01/01 18:35:30] d2.utils.events INFO:  eta: 3:33:11  iter: 5019  total_loss: 0.5145  loss_cls: 0.118  loss_box_reg: 0.1697  loss_rpn_cls: 0.09352  loss_rpn_loc: 0.1152  time: 0.7352  data_time: 0.0169  lr: 0.02  max_mem: 9944M
[01/01 18:35:44] d2.utils.events INFO:  eta: 3:32:48  iter: 5039  total_loss: 0.4727  loss_cls: 0.1088  loss_box_reg: 0.1631  loss_rpn_cls: 0.09822  loss_rpn_loc: 0.115  time: 0.7351  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 18:35:58] d2.utils.events INFO:  eta: 3:32:20  iter: 5059  total_loss: 0.5199  loss_cls: 0.1187  loss_box_reg: 0.1868  loss_rpn_cls: 0.08869  loss_rpn_loc: 0.1293  time: 0.7349  data_time: 0.0162  lr: 0.02  max_mem: 9944M
[01/01 18:36:13] d2.utils.events INFO:  eta: 3:31:47  iter: 5079  total_loss: 0.5479  loss_cls: 0.1292  loss_box_reg: 0.1744  loss_rpn_cls: 0.1007  loss_rpn_loc: 0.1275  time: 0.7349  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 18:36:27] d2.utils.events INFO:  eta: 3:31:15  iter: 5099  total_loss: 0.5124  loss_cls: 0.1287  loss_box_reg: 0.1816  loss_rpn_cls: 0.1022  loss_rpn_loc: 0.1214  time: 0.7349  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 18:36:42] d2.utils.events INFO:  eta: 3:30:51  iter: 5119  total_loss: 0.4937  loss_cls: 0.1114  loss_box_reg: 0.1714  loss_rpn_cls: 0.0874  loss_rpn_loc: 0.1091  time: 0.7349  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 18:36:56] d2.utils.events INFO:  eta: 3:30:15  iter: 5139  total_loss: 0.5404  loss_cls: 0.1249  loss_box_reg: 0.1889  loss_rpn_cls: 0.1003  loss_rpn_loc: 0.1321  time: 0.7348  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 18:37:11] d2.utils.events INFO:  eta: 3:30:17  iter: 5159  total_loss: 0.475  loss_cls: 0.1059  loss_box_reg: 0.1581  loss_rpn_cls: 0.09228  loss_rpn_loc: 0.1278  time: 0.7348  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 18:37:26] d2.utils.events INFO:  eta: 3:30:06  iter: 5179  total_loss: 0.4858  loss_cls: 0.1109  loss_box_reg: 0.1574  loss_rpn_cls: 0.09471  loss_rpn_loc: 0.1311  time: 0.7349  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 18:37:40] d2.utils.events INFO:  eta: 3:30:01  iter: 5199  total_loss: 0.5119  loss_cls: 0.1249  loss_box_reg: 0.1787  loss_rpn_cls: 0.09719  loss_rpn_loc: 0.1158  time: 0.7348  data_time: 0.0174  lr: 0.02  max_mem: 9944M
[01/01 18:37:55] d2.utils.events INFO:  eta: 3:29:43  iter: 5219  total_loss: 0.4829  loss_cls: 0.1121  loss_box_reg: 0.1561  loss_rpn_cls: 0.08434  loss_rpn_loc: 0.1159  time: 0.7347  data_time: 0.0141  lr: 0.02  max_mem: 9944M
[01/01 18:38:09] d2.utils.events INFO:  eta: 3:29:37  iter: 5239  total_loss: 0.5446  loss_cls: 0.1134  loss_box_reg: 0.1741  loss_rpn_cls: 0.1036  loss_rpn_loc: 0.1367  time: 0.7347  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 18:38:25] d2.utils.events INFO:  eta: 3:29:28  iter: 5259  total_loss: 0.4801  loss_cls: 0.1166  loss_box_reg: 0.1644  loss_rpn_cls: 0.09118  loss_rpn_loc: 0.1227  time: 0.7348  data_time: 0.0189  lr: 0.02  max_mem: 9944M
[01/01 18:38:39] d2.utils.events INFO:  eta: 3:29:26  iter: 5279  total_loss: 0.5241  loss_cls: 0.1174  loss_box_reg: 0.1767  loss_rpn_cls: 0.09568  loss_rpn_loc: 0.1431  time: 0.7348  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 18:38:54] d2.utils.events INFO:  eta: 3:29:15  iter: 5299  total_loss: 0.4837  loss_cls: 0.1054  loss_box_reg: 0.1638  loss_rpn_cls: 0.08313  loss_rpn_loc: 0.1244  time: 0.7347  data_time: 0.0189  lr: 0.02  max_mem: 9944M
[01/01 18:39:08] d2.utils.events INFO:  eta: 3:29:09  iter: 5319  total_loss: 0.5781  loss_cls: 0.1314  loss_box_reg: 0.1995  loss_rpn_cls: 0.09921  loss_rpn_loc: 0.121  time: 0.7347  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 18:39:24] d2.utils.events INFO:  eta: 3:29:04  iter: 5339  total_loss: 0.5227  loss_cls: 0.1184  loss_box_reg: 0.2007  loss_rpn_cls: 0.09636  loss_rpn_loc: 0.1081  time: 0.7349  data_time: 0.0158  lr: 0.02  max_mem: 9944M
[01/01 18:39:37] d2.utils.events INFO:  eta: 3:28:56  iter: 5359  total_loss: 0.5306  loss_cls: 0.1236  loss_box_reg: 0.1881  loss_rpn_cls: 0.09473  loss_rpn_loc: 0.1371  time: 0.7347  data_time: 0.0249  lr: 0.02  max_mem: 9944M
[01/01 18:39:52] d2.utils.events INFO:  eta: 3:28:40  iter: 5379  total_loss: 0.5411  loss_cls: 0.1261  loss_box_reg: 0.1717  loss_rpn_cls: 0.1017  loss_rpn_loc: 0.1394  time: 0.7348  data_time: 0.0166  lr: 0.02  max_mem: 9944M
[01/01 18:40:07] d2.utils.events INFO:  eta: 3:28:36  iter: 5399  total_loss: 0.4667  loss_cls: 0.09521  loss_box_reg: 0.1487  loss_rpn_cls: 0.09098  loss_rpn_loc: 0.1183  time: 0.7347  data_time: 0.0217  lr: 0.02  max_mem: 9944M
[01/01 18:40:21] d2.utils.events INFO:  eta: 3:28:20  iter: 5419  total_loss: 0.4923  loss_cls: 0.1102  loss_box_reg: 0.158  loss_rpn_cls: 0.09154  loss_rpn_loc: 0.1264  time: 0.7346  data_time: 0.0148  lr: 0.02  max_mem: 9944M
[01/01 18:40:37] d2.utils.events INFO:  eta: 3:28:07  iter: 5439  total_loss: 0.5311  loss_cls: 0.1249  loss_box_reg: 0.1713  loss_rpn_cls: 0.09818  loss_rpn_loc: 0.1303  time: 0.7349  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 18:40:51] d2.utils.events INFO:  eta: 3:27:43  iter: 5459  total_loss: 0.5012  loss_cls: 0.1142  loss_box_reg: 0.1806  loss_rpn_cls: 0.09097  loss_rpn_loc: 0.1164  time: 0.7347  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 18:41:07] d2.utils.events INFO:  eta: 3:27:35  iter: 5479  total_loss: 0.5391  loss_cls: 0.1272  loss_box_reg: 0.1851  loss_rpn_cls: 0.09012  loss_rpn_loc: 0.1265  time: 0.7350  data_time: 0.0166  lr: 0.02  max_mem: 9944M
[01/01 18:41:21] d2.utils.events INFO:  eta: 3:27:20  iter: 5499  total_loss: 0.4821  loss_cls: 0.1101  loss_box_reg: 0.1617  loss_rpn_cls: 0.09427  loss_rpn_loc: 0.1204  time: 0.7348  data_time: 0.0254  lr: 0.02  max_mem: 9944M
[01/01 18:41:35] d2.utils.events INFO:  eta: 3:26:59  iter: 5519  total_loss: 0.5118  loss_cls: 0.1108  loss_box_reg: 0.1742  loss_rpn_cls: 0.08826  loss_rpn_loc: 0.1247  time: 0.7347  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 18:41:50] d2.utils.events INFO:  eta: 3:26:41  iter: 5539  total_loss: 0.5548  loss_cls: 0.1211  loss_box_reg: 0.2065  loss_rpn_cls: 0.09615  loss_rpn_loc: 0.1316  time: 0.7348  data_time: 0.0208  lr: 0.02  max_mem: 9944M
[01/01 18:42:05] d2.utils.events INFO:  eta: 3:26:36  iter: 5559  total_loss: 0.5011  loss_cls: 0.1179  loss_box_reg: 0.1868  loss_rpn_cls: 0.08831  loss_rpn_loc: 0.1069  time: 0.7348  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 18:42:19] d2.utils.events INFO:  eta: 3:26:22  iter: 5579  total_loss: 0.5077  loss_cls: 0.1085  loss_box_reg: 0.1693  loss_rpn_cls: 0.09951  loss_rpn_loc: 0.1197  time: 0.7347  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 18:42:34] d2.utils.events INFO:  eta: 3:26:09  iter: 5599  total_loss: 0.5063  loss_cls: 0.1207  loss_box_reg: 0.1787  loss_rpn_cls: 0.09126  loss_rpn_loc: 0.1325  time: 0.7346  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 18:42:47] d2.utils.events INFO:  eta: 3:25:56  iter: 5619  total_loss: 0.4901  loss_cls: 0.1154  loss_box_reg: 0.1655  loss_rpn_cls: 0.08659  loss_rpn_loc: 0.1147  time: 0.7345  data_time: 0.0212  lr: 0.02  max_mem: 9944M
[01/01 18:43:02] d2.utils.events INFO:  eta: 3:25:31  iter: 5639  total_loss: 0.526  loss_cls: 0.1129  loss_box_reg: 0.1804  loss_rpn_cls: 0.09283  loss_rpn_loc: 0.1331  time: 0.7345  data_time: 0.0166  lr: 0.02  max_mem: 9944M
[01/01 18:43:16] d2.utils.events INFO:  eta: 3:25:17  iter: 5659  total_loss: 0.4625  loss_cls: 0.1118  loss_box_reg: 0.1638  loss_rpn_cls: 0.08192  loss_rpn_loc: 0.1145  time: 0.7344  data_time: 0.0188  lr: 0.02  max_mem: 9944M
[01/01 18:43:32] d2.utils.events INFO:  eta: 3:25:19  iter: 5679  total_loss: 0.4936  loss_cls: 0.1119  loss_box_reg: 0.1771  loss_rpn_cls: 0.1019  loss_rpn_loc: 0.1264  time: 0.7345  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 18:43:46] d2.utils.events INFO:  eta: 3:25:24  iter: 5699  total_loss: 0.4987  loss_cls: 0.1114  loss_box_reg: 0.1709  loss_rpn_cls: 0.08098  loss_rpn_loc: 0.1332  time: 0.7345  data_time: 0.0359  lr: 0.02  max_mem: 9944M
[01/01 18:44:01] d2.utils.events INFO:  eta: 3:25:16  iter: 5719  total_loss: 0.5136  loss_cls: 0.1136  loss_box_reg: 0.1721  loss_rpn_cls: 0.09353  loss_rpn_loc: 0.1271  time: 0.7345  data_time: 0.0314  lr: 0.02  max_mem: 9944M
[01/01 18:44:16] d2.utils.events INFO:  eta: 3:25:17  iter: 5739  total_loss: 0.464  loss_cls: 0.09831  loss_box_reg: 0.1687  loss_rpn_cls: 0.0826  loss_rpn_loc: 0.1136  time: 0.7346  data_time: 0.0379  lr: 0.02  max_mem: 9944M
[01/01 18:44:46] d2.utils.events INFO:  eta: 3:25:15  iter: 5759  total_loss: 0.4366  loss_cls: 0.08684  loss_box_reg: 0.136  loss_rpn_cls: 0.09396  loss_rpn_loc: 0.1213  time: 0.7373  data_time: 0.0268  lr: 0.02  max_mem: 9944M
[01/01 18:45:00] d2.utils.events INFO:  eta: 3:25:00  iter: 5779  total_loss: 0.4817  loss_cls: 0.1018  loss_box_reg: 0.1604  loss_rpn_cls: 0.09552  loss_rpn_loc: 0.1099  time: 0.7371  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 18:45:15] d2.utils.events INFO:  eta: 3:25:01  iter: 5799  total_loss: 0.4646  loss_cls: 0.1064  loss_box_reg: 0.1648  loss_rpn_cls: 0.08097  loss_rpn_loc: 0.1139  time: 0.7370  data_time: 0.0301  lr: 0.02  max_mem: 9944M
[01/01 18:45:29] d2.utils.events INFO:  eta: 3:25:10  iter: 5819  total_loss: 0.4829  loss_cls: 0.09613  loss_box_reg: 0.1565  loss_rpn_cls: 0.09226  loss_rpn_loc: 0.09714  time: 0.7370  data_time: 0.0370  lr: 0.02  max_mem: 9944M
[01/01 18:45:44] d2.utils.events INFO:  eta: 3:25:15  iter: 5839  total_loss: 0.4992  loss_cls: 0.1032  loss_box_reg: 0.1679  loss_rpn_cls: 0.08887  loss_rpn_loc: 0.1339  time: 0.7371  data_time: 0.0295  lr: 0.02  max_mem: 9944M
[01/01 18:46:03] d2.utils.events INFO:  eta: 3:25:20  iter: 5859  total_loss: 0.4327  loss_cls: 0.09617  loss_box_reg: 0.1583  loss_rpn_cls: 0.0814  loss_rpn_loc: 0.1048  time: 0.7377  data_time: 0.0304  lr: 0.02  max_mem: 9944M
[01/01 18:46:31] d2.utils.events INFO:  eta: 3:25:35  iter: 5879  total_loss: 0.4773  loss_cls: 0.1003  loss_box_reg: 0.1594  loss_rpn_cls: 0.07533  loss_rpn_loc: 0.1214  time: 0.7400  data_time: 0.0403  lr: 0.02  max_mem: 9944M
[01/01 18:46:48] d2.utils.events INFO:  eta: 3:25:41  iter: 5899  total_loss: 0.4558  loss_cls: 0.1037  loss_box_reg: 0.1735  loss_rpn_cls: 0.0827  loss_rpn_loc: 0.1093  time: 0.7404  data_time: 0.0357  lr: 0.02  max_mem: 9944M
[01/01 18:47:23] d2.utils.events INFO:  eta: 3:25:46  iter: 5919  total_loss: 0.5178  loss_cls: 0.1224  loss_box_reg: 0.1927  loss_rpn_cls: 0.08589  loss_rpn_loc: 0.1121  time: 0.7437  data_time: 0.0305  lr: 0.02  max_mem: 9944M
[01/01 18:47:54] d2.utils.events INFO:  eta: 3:26:02  iter: 5939  total_loss: 0.5281  loss_cls: 0.1163  loss_box_reg: 0.177  loss_rpn_cls: 0.08919  loss_rpn_loc: 0.1048  time: 0.7464  data_time: 0.0391  lr: 0.02  max_mem: 9944M
[01/01 18:48:30] d2.utils.events INFO:  eta: 3:26:04  iter: 5959  total_loss: 0.4976  loss_cls: 0.1148  loss_box_reg: 0.1875  loss_rpn_cls: 0.08317  loss_rpn_loc: 0.1275  time: 0.7500  data_time: 0.0383  lr: 0.02  max_mem: 9944M
[01/01 18:49:04] d2.utils.events INFO:  eta: 3:26:31  iter: 5979  total_loss: 0.4924  loss_cls: 0.1119  loss_box_reg: 0.1804  loss_rpn_cls: 0.07987  loss_rpn_loc: 0.1038  time: 0.7532  data_time: 0.0355  lr: 0.02  max_mem: 9944M
[01/01 18:49:40] d2.utils.events INFO:  eta: 3:26:39  iter: 5999  total_loss: 0.4662  loss_cls: 0.09132  loss_box_reg: 0.1653  loss_rpn_cls: 0.09716  loss_rpn_loc: 0.1235  time: 0.7566  data_time: 0.0363  lr: 0.02  max_mem: 9944M
[01/01 18:50:15] d2.utils.events INFO:  eta: 3:27:09  iter: 6019  total_loss: 0.4672  loss_cls: 0.1129  loss_box_reg: 0.1852  loss_rpn_cls: 0.0803  loss_rpn_loc: 0.1167  time: 0.7599  data_time: 0.0396  lr: 0.02  max_mem: 9944M
[01/01 18:50:47] d2.utils.events INFO:  eta: 3:28:14  iter: 6039  total_loss: 0.4876  loss_cls: 0.1062  loss_box_reg: 0.159  loss_rpn_cls: 0.08426  loss_rpn_loc: 0.1148  time: 0.7628  data_time: 0.0388  lr: 0.02  max_mem: 9944M
[01/01 18:51:22] d2.utils.events INFO:  eta: 3:29:41  iter: 6059  total_loss: 0.4904  loss_cls: 0.1133  loss_box_reg: 0.164  loss_rpn_cls: 0.08353  loss_rpn_loc: 0.1227  time: 0.7660  data_time: 0.0390  lr: 0.02  max_mem: 9944M
[01/01 18:51:54] d2.utils.events INFO:  eta: 3:30:28  iter: 6079  total_loss: 0.4617  loss_cls: 0.107  loss_box_reg: 0.1659  loss_rpn_cls: 0.08331  loss_rpn_loc: 0.1126  time: 0.7688  data_time: 0.0371  lr: 0.02  max_mem: 9944M
[01/01 18:52:28] d2.utils.events INFO:  eta: 3:31:14  iter: 6099  total_loss: 0.5069  loss_cls: 0.1072  loss_box_reg: 0.1756  loss_rpn_cls: 0.08256  loss_rpn_loc: 0.1311  time: 0.7717  data_time: 0.0297  lr: 0.02  max_mem: 9944M
[01/01 18:52:58] d2.utils.events INFO:  eta: 3:32:16  iter: 6119  total_loss: 0.5124  loss_cls: 0.1028  loss_box_reg: 0.1676  loss_rpn_cls: 0.09006  loss_rpn_loc: 0.1242  time: 0.7742  data_time: 0.0237  lr: 0.02  max_mem: 9944M
[01/01 18:53:14] d2.utils.events INFO:  eta: 3:32:10  iter: 6139  total_loss: 0.4649  loss_cls: 0.1027  loss_box_reg: 0.1683  loss_rpn_cls: 0.08663  loss_rpn_loc: 0.1235  time: 0.7743  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 18:53:28] d2.utils.events INFO:  eta: 3:31:51  iter: 6159  total_loss: 0.5477  loss_cls: 0.1233  loss_box_reg: 0.1963  loss_rpn_cls: 0.0915  loss_rpn_loc: 0.1311  time: 0.7740  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 18:53:43] d2.utils.events INFO:  eta: 3:31:41  iter: 6179  total_loss: 0.4589  loss_cls: 0.1074  loss_box_reg: 0.1657  loss_rpn_cls: 0.08498  loss_rpn_loc: 0.1248  time: 0.7739  data_time: 0.0228  lr: 0.02  max_mem: 9944M
[01/01 18:53:58] d2.utils.events INFO:  eta: 3:32:03  iter: 6199  total_loss: 0.4989  loss_cls: 0.1116  loss_box_reg: 0.1846  loss_rpn_cls: 0.08208  loss_rpn_loc: 0.1158  time: 0.7738  data_time: 0.0314  lr: 0.02  max_mem: 9944M
[01/01 18:54:13] d2.utils.events INFO:  eta: 3:32:43  iter: 6219  total_loss: 0.5089  loss_cls: 0.1118  loss_box_reg: 0.1744  loss_rpn_cls: 0.09443  loss_rpn_loc: 0.1102  time: 0.7737  data_time: 0.0359  lr: 0.02  max_mem: 9944M
[01/01 18:54:28] d2.utils.events INFO:  eta: 3:33:20  iter: 6239  total_loss: 0.5063  loss_cls: 0.1157  loss_box_reg: 0.1521  loss_rpn_cls: 0.09709  loss_rpn_loc: 0.1255  time: 0.7737  data_time: 0.0278  lr: 0.02  max_mem: 9944M
[01/01 18:55:02] d2.utils.events INFO:  eta: 3:34:25  iter: 6259  total_loss: 0.4828  loss_cls: 0.11  loss_box_reg: 0.182  loss_rpn_cls: 0.08386  loss_rpn_loc: 0.1116  time: 0.7767  data_time: 0.0386  lr: 0.02  max_mem: 9944M
[01/01 18:55:29] d2.utils.events INFO:  eta: 3:35:20  iter: 6279  total_loss: 0.4868  loss_cls: 0.1118  loss_box_reg: 0.1778  loss_rpn_cls: 0.08895  loss_rpn_loc: 0.1215  time: 0.7784  data_time: 0.0275  lr: 0.02  max_mem: 9944M
[01/01 18:56:04] d2.utils.events INFO:  eta: 3:36:24  iter: 6299  total_loss: 0.4731  loss_cls: 0.1082  loss_box_reg: 0.1666  loss_rpn_cls: 0.09222  loss_rpn_loc: 0.1081  time: 0.7816  data_time: 0.0286  lr: 0.02  max_mem: 9944M
[01/01 18:56:39] d2.utils.events INFO:  eta: 3:37:41  iter: 6319  total_loss: 0.4937  loss_cls: 0.1091  loss_box_reg: 0.1627  loss_rpn_cls: 0.0917  loss_rpn_loc: 0.1209  time: 0.7847  data_time: 0.0328  lr: 0.02  max_mem: 9944M
[01/01 18:57:15] d2.utils.events INFO:  eta: 3:39:03  iter: 6339  total_loss: 0.5135  loss_cls: 0.106  loss_box_reg: 0.1864  loss_rpn_cls: 0.09559  loss_rpn_loc: 0.1307  time: 0.7879  data_time: 0.0339  lr: 0.02  max_mem: 9944M
[01/01 18:57:52] d2.utils.events INFO:  eta: 3:40:17  iter: 6359  total_loss: 0.4975  loss_cls: 0.1036  loss_box_reg: 0.181  loss_rpn_cls: 0.0864  loss_rpn_loc: 0.1187  time: 0.7912  data_time: 0.0293  lr: 0.02  max_mem: 9944M
[01/01 18:58:15] d2.utils.events INFO:  eta: 3:40:59  iter: 6379  total_loss: 0.5353  loss_cls: 0.1158  loss_box_reg: 0.1752  loss_rpn_cls: 0.08592  loss_rpn_loc: 0.1295  time: 0.7923  data_time: 0.0280  lr: 0.02  max_mem: 9944M
[01/01 18:58:29] d2.utils.events INFO:  eta: 3:40:23  iter: 6399  total_loss: 0.5476  loss_cls: 0.1185  loss_box_reg: 0.185  loss_rpn_cls: 0.09202  loss_rpn_loc: 0.1262  time: 0.7919  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 18:58:43] d2.utils.events INFO:  eta: 3:40:29  iter: 6419  total_loss: 0.5232  loss_cls: 0.1138  loss_box_reg: 0.1826  loss_rpn_cls: 0.08846  loss_rpn_loc: 0.1341  time: 0.7916  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 18:58:58] d2.utils.events INFO:  eta: 3:40:28  iter: 6439  total_loss: 0.5164  loss_cls: 0.1205  loss_box_reg: 0.1837  loss_rpn_cls: 0.09074  loss_rpn_loc: 0.1113  time: 0.7915  data_time: 0.0279  lr: 0.02  max_mem: 9944M
[01/01 18:59:12] d2.utils.events INFO:  eta: 3:40:32  iter: 6459  total_loss: 0.5022  loss_cls: 0.1154  loss_box_reg: 0.1669  loss_rpn_cls: 0.0971  loss_rpn_loc: 0.1167  time: 0.7913  data_time: 0.0261  lr: 0.02  max_mem: 9944M
[01/01 18:59:27] d2.utils.events INFO:  eta: 3:40:17  iter: 6479  total_loss: 0.469  loss_cls: 0.104  loss_box_reg: 0.1648  loss_rpn_cls: 0.08323  loss_rpn_loc: 0.1151  time: 0.7911  data_time: 0.0302  lr: 0.02  max_mem: 9944M
[01/01 18:59:44] d2.utils.events INFO:  eta: 3:41:25  iter: 6499  total_loss: 0.5034  loss_cls: 0.1125  loss_box_reg: 0.1728  loss_rpn_cls: 0.08342  loss_rpn_loc: 0.1165  time: 0.7913  data_time: 0.0331  lr: 0.02  max_mem: 9944M
[01/01 19:00:17] d2.utils.events INFO:  eta: 3:43:08  iter: 6519  total_loss: 0.4906  loss_cls: 0.1136  loss_box_reg: 0.1761  loss_rpn_cls: 0.08345  loss_rpn_loc: 0.1116  time: 0.7939  data_time: 0.0310  lr: 0.02  max_mem: 9944M
[01/01 19:00:48] d2.utils.events INFO:  eta: 3:45:18  iter: 6539  total_loss: 0.4793  loss_cls: 0.101  loss_box_reg: 0.1601  loss_rpn_cls: 0.08659  loss_rpn_loc: 0.1173  time: 0.7962  data_time: 0.0292  lr: 0.02  max_mem: 9944M
[01/01 19:01:16] d2.utils.events INFO:  eta: 3:48:03  iter: 6559  total_loss: 0.4671  loss_cls: 0.1015  loss_box_reg: 0.1602  loss_rpn_cls: 0.08695  loss_rpn_loc: 0.1187  time: 0.7981  data_time: 0.0313  lr: 0.02  max_mem: 9944M
[01/01 19:01:54] d2.utils.events INFO:  eta: 3:53:22  iter: 6579  total_loss: 0.4877  loss_cls: 0.1119  loss_box_reg: 0.1754  loss_rpn_cls: 0.0895  loss_rpn_loc: 0.1044  time: 0.8015  data_time: 0.0283  lr: 0.02  max_mem: 9944M
[01/01 19:02:31] d2.utils.events INFO:  eta: 4:02:55  iter: 6599  total_loss: 0.4497  loss_cls: 0.1045  loss_box_reg: 0.1617  loss_rpn_cls: 0.07477  loss_rpn_loc: 0.1198  time: 0.8046  data_time: 0.0362  lr: 0.02  max_mem: 9944M
[01/01 19:03:07] d2.utils.events INFO:  eta: 4:15:46  iter: 6619  total_loss: 0.5169  loss_cls: 0.1082  loss_box_reg: 0.1779  loss_rpn_cls: 0.08744  loss_rpn_loc: 0.1182  time: 0.8077  data_time: 0.0298  lr: 0.02  max_mem: 9944M
[01/01 19:03:45] d2.utils.events INFO:  eta: 6:03:42  iter: 6639  total_loss: 0.4535  loss_cls: 0.09965  loss_box_reg: 0.1649  loss_rpn_cls: 0.07816  loss_rpn_loc: 0.1084  time: 0.8109  data_time: 0.0336  lr: 0.02  max_mem: 9944M
[01/01 19:04:21] d2.utils.events INFO:  eta: 7:07:27  iter: 6659  total_loss: 0.4662  loss_cls: 0.0946  loss_box_reg: 0.1561  loss_rpn_cls: 0.08005  loss_rpn_loc: 0.123  time: 0.8139  data_time: 0.0295  lr: 0.02  max_mem: 9944M
[01/01 19:04:58] d2.utils.events INFO:  eta: 7:13:34  iter: 6679  total_loss: 0.514  loss_cls: 0.1081  loss_box_reg: 0.1802  loss_rpn_cls: 0.08947  loss_rpn_loc: 0.115  time: 0.8171  data_time: 0.0299  lr: 0.02  max_mem: 9944M
[01/01 19:05:35] d2.utils.events INFO:  eta: 7:18:03  iter: 6699  total_loss: 0.495  loss_cls: 0.1031  loss_box_reg: 0.1783  loss_rpn_cls: 0.08141  loss_rpn_loc: 0.1241  time: 0.8200  data_time: 0.0265  lr: 0.02  max_mem: 9944M
[01/01 19:06:11] d2.utils.events INFO:  eta: 7:23:55  iter: 6719  total_loss: 0.3992  loss_cls: 0.0886  loss_box_reg: 0.1479  loss_rpn_cls: 0.07451  loss_rpn_loc: 0.1043  time: 0.8229  data_time: 0.0322  lr: 0.02  max_mem: 9944M
[01/01 19:06:47] d2.utils.events INFO:  eta: 7:32:00  iter: 6739  total_loss: 0.4844  loss_cls: 0.09764  loss_box_reg: 0.1634  loss_rpn_cls: 0.08573  loss_rpn_loc: 0.1254  time: 0.8259  data_time: 0.0242  lr: 0.02  max_mem: 9944M
[01/01 19:07:24] d2.utils.events INFO:  eta: 7:36:44  iter: 6759  total_loss: 0.4967  loss_cls: 0.1049  loss_box_reg: 0.1766  loss_rpn_cls: 0.08662  loss_rpn_loc: 0.1286  time: 0.8289  data_time: 0.0292  lr: 0.02  max_mem: 9944M
[01/01 19:08:00] d2.utils.events INFO:  eta: 7:46:49  iter: 6779  total_loss: 0.4523  loss_cls: 0.09892  loss_box_reg: 0.1458  loss_rpn_cls: 0.07983  loss_rpn_loc: 0.1218  time: 0.8318  data_time: 0.0296  lr: 0.02  max_mem: 9944M
[01/01 19:08:26] d2.utils.events INFO:  eta: 7:50:40  iter: 6799  total_loss: 0.4911  loss_cls: 0.1049  loss_box_reg: 0.1738  loss_rpn_cls: 0.08599  loss_rpn_loc: 0.1246  time: 0.8331  data_time: 0.0287  lr: 0.02  max_mem: 9944M
[01/01 19:08:39] d2.utils.events INFO:  eta: 7:50:07  iter: 6819  total_loss: 0.4355  loss_cls: 0.1001  loss_box_reg: 0.153  loss_rpn_cls: 0.07093  loss_rpn_loc: 0.1123  time: 0.8327  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 19:08:53] d2.utils.events INFO:  eta: 7:49:35  iter: 6839  total_loss: 0.4907  loss_cls: 0.1185  loss_box_reg: 0.1991  loss_rpn_cls: 0.08374  loss_rpn_loc: 0.1257  time: 0.8322  data_time: 0.0207  lr: 0.02  max_mem: 9944M
[01/01 19:09:07] d2.utils.events INFO:  eta: 7:48:22  iter: 6859  total_loss: 0.5062  loss_cls: 0.1139  loss_box_reg: 0.1739  loss_rpn_cls: 0.09381  loss_rpn_loc: 0.1104  time: 0.8318  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 19:09:20] d2.utils.events INFO:  eta: 7:43:00  iter: 6879  total_loss: 0.4769  loss_cls: 0.09998  loss_box_reg: 0.1541  loss_rpn_cls: 0.09197  loss_rpn_loc: 0.1219  time: 0.8314  data_time: 0.0208  lr: 0.02  max_mem: 9944M
[01/01 19:09:34] d2.utils.events INFO:  eta: 7:42:28  iter: 6899  total_loss: 0.4928  loss_cls: 0.1083  loss_box_reg: 0.1651  loss_rpn_cls: 0.07692  loss_rpn_loc: 0.1114  time: 0.8309  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 19:09:48] d2.utils.events INFO:  eta: 7:32:29  iter: 6919  total_loss: 0.5173  loss_cls: 0.09733  loss_box_reg: 0.1685  loss_rpn_cls: 0.07948  loss_rpn_loc: 0.133  time: 0.8305  data_time: 0.0216  lr: 0.02  max_mem: 9944M
[01/01 19:10:01] d2.utils.events INFO:  eta: 7:25:56  iter: 6939  total_loss: 0.4929  loss_cls: 0.1102  loss_box_reg: 0.1693  loss_rpn_cls: 0.07942  loss_rpn_loc: 0.1241  time: 0.8301  data_time: 0.0176  lr: 0.02  max_mem: 9944M
[01/01 19:10:15] d2.utils.events INFO:  eta: 7:16:37  iter: 6959  total_loss: 0.5046  loss_cls: 0.1113  loss_box_reg: 0.1987  loss_rpn_cls: 0.08322  loss_rpn_loc: 0.1114  time: 0.8296  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 19:10:29] d2.utils.events INFO:  eta: 7:09:06  iter: 6979  total_loss: 0.4946  loss_cls: 0.11  loss_box_reg: 0.1654  loss_rpn_cls: 0.08957  loss_rpn_loc: 0.1297  time: 0.8293  data_time: 0.0173  lr: 0.02  max_mem: 9944M
[01/01 19:10:44] d2.utils.events INFO:  eta: 7:00:02  iter: 6999  total_loss: 0.4767  loss_cls: 0.1087  loss_box_reg: 0.1532  loss_rpn_cls: 0.08604  loss_rpn_loc: 0.132  time: 0.8290  data_time: 0.0179  lr: 0.02  max_mem: 9944M
[01/01 19:10:58] d2.utils.events INFO:  eta: 5:15:31  iter: 7019  total_loss: 0.4994  loss_cls: 0.1177  loss_box_reg: 0.1648  loss_rpn_cls: 0.08628  loss_rpn_loc: 0.1259  time: 0.8287  data_time: 0.0168  lr: 0.02  max_mem: 9944M
[01/01 19:11:13] d2.utils.events INFO:  eta: 4:00:22  iter: 7039  total_loss: 0.4644  loss_cls: 0.09677  loss_box_reg: 0.1535  loss_rpn_cls: 0.0777  loss_rpn_loc: 0.1198  time: 0.8284  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 19:11:27] d2.utils.events INFO:  eta: 3:43:58  iter: 7059  total_loss: 0.5126  loss_cls: 0.1044  loss_box_reg: 0.1619  loss_rpn_cls: 0.09724  loss_rpn_loc: 0.1346  time: 0.8281  data_time: 0.0224  lr: 0.02  max_mem: 9944M
[01/01 19:11:41] d2.utils.events INFO:  eta: 3:37:44  iter: 7079  total_loss: 0.4633  loss_cls: 0.1009  loss_box_reg: 0.1512  loss_rpn_cls: 0.08102  loss_rpn_loc: 0.1219  time: 0.8278  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 19:11:56] d2.utils.events INFO:  eta: 3:33:59  iter: 7099  total_loss: 0.4516  loss_cls: 0.1075  loss_box_reg: 0.1808  loss_rpn_cls: 0.07106  loss_rpn_loc: 0.1015  time: 0.8275  data_time: 0.0225  lr: 0.02  max_mem: 9944M
[01/01 19:12:10] d2.utils.events INFO:  eta: 3:31:09  iter: 7119  total_loss: 0.5248  loss_cls: 0.1241  loss_box_reg: 0.1832  loss_rpn_cls: 0.09645  loss_rpn_loc: 0.1375  time: 0.8272  data_time: 0.0156  lr: 0.02  max_mem: 9944M
[01/01 19:12:26] d2.utils.events INFO:  eta: 3:30:39  iter: 7139  total_loss: 0.473  loss_cls: 0.1007  loss_box_reg: 0.1615  loss_rpn_cls: 0.08788  loss_rpn_loc: 0.1163  time: 0.8270  data_time: 0.0211  lr: 0.02  max_mem: 9944M
[01/01 19:12:40] d2.utils.events INFO:  eta: 3:30:44  iter: 7159  total_loss: 0.4909  loss_cls: 0.1092  loss_box_reg: 0.1658  loss_rpn_cls: 0.09695  loss_rpn_loc: 0.1224  time: 0.8267  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 19:12:54] d2.utils.events INFO:  eta: 3:30:35  iter: 7179  total_loss: 0.4675  loss_cls: 0.113  loss_box_reg: 0.1772  loss_rpn_cls: 0.09099  loss_rpn_loc: 0.1027  time: 0.8264  data_time: 0.0245  lr: 0.02  max_mem: 9944M
[01/01 19:13:09] d2.utils.events INFO:  eta: 3:29:22  iter: 7199  total_loss: 0.4545  loss_cls: 0.1023  loss_box_reg: 0.1512  loss_rpn_cls: 0.08184  loss_rpn_loc: 0.1084  time: 0.8262  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 19:13:24] d2.utils.events INFO:  eta: 3:29:07  iter: 7219  total_loss: 0.4567  loss_cls: 0.09686  loss_box_reg: 0.1598  loss_rpn_cls: 0.0882  loss_rpn_loc: 0.1121  time: 0.8259  data_time: 0.0264  lr: 0.02  max_mem: 9944M
[01/01 19:13:39] d2.utils.events INFO:  eta: 3:28:07  iter: 7239  total_loss: 0.5091  loss_cls: 0.1059  loss_box_reg: 0.1844  loss_rpn_cls: 0.08606  loss_rpn_loc: 0.118  time: 0.8257  data_time: 0.0221  lr: 0.02  max_mem: 9944M
[01/01 19:13:54] d2.utils.events INFO:  eta: 3:26:31  iter: 7259  total_loss: 0.4615  loss_cls: 0.09639  loss_box_reg: 0.1598  loss_rpn_cls: 0.09085  loss_rpn_loc: 0.1131  time: 0.8255  data_time: 0.0315  lr: 0.02  max_mem: 9944M
[01/01 19:14:09] d2.utils.events INFO:  eta: 3:24:48  iter: 7279  total_loss: 0.5121  loss_cls: 0.1219  loss_box_reg: 0.1684  loss_rpn_cls: 0.09497  loss_rpn_loc: 0.1089  time: 0.8252  data_time: 0.0282  lr: 0.02  max_mem: 9944M
[01/01 19:14:25] d2.utils.events INFO:  eta: 3:23:45  iter: 7299  total_loss: 0.4503  loss_cls: 0.09999  loss_box_reg: 0.1653  loss_rpn_cls: 0.08911  loss_rpn_loc: 0.119  time: 0.8252  data_time: 0.0348  lr: 0.02  max_mem: 9944M
[01/01 19:14:46] d2.utils.events INFO:  eta: 3:23:03  iter: 7319  total_loss: 0.4742  loss_cls: 0.113  loss_box_reg: 0.1801  loss_rpn_cls: 0.08274  loss_rpn_loc: 0.1043  time: 0.8259  data_time: 0.0262  lr: 0.02  max_mem: 9944M
[01/01 19:15:01] d2.utils.events INFO:  eta: 3:21:18  iter: 7339  total_loss: 0.4547  loss_cls: 0.1129  loss_box_reg: 0.1574  loss_rpn_cls: 0.08364  loss_rpn_loc: 0.1173  time: 0.8256  data_time: 0.0330  lr: 0.02  max_mem: 9944M
[01/01 19:15:15] d2.utils.events INFO:  eta: 3:20:05  iter: 7359  total_loss: 0.5267  loss_cls: 0.1176  loss_box_reg: 0.1694  loss_rpn_cls: 0.08622  loss_rpn_loc: 0.1252  time: 0.8253  data_time: 0.0250  lr: 0.02  max_mem: 9944M
[01/01 19:15:29] d2.utils.events INFO:  eta: 3:19:14  iter: 7379  total_loss: 0.4812  loss_cls: 0.1002  loss_box_reg: 0.1534  loss_rpn_cls: 0.07934  loss_rpn_loc: 0.118  time: 0.8250  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 19:15:43] d2.utils.events INFO:  eta: 3:18:59  iter: 7399  total_loss: 0.4404  loss_cls: 0.09302  loss_box_reg: 0.1529  loss_rpn_cls: 0.07773  loss_rpn_loc: 0.111  time: 0.8246  data_time: 0.0185  lr: 0.02  max_mem: 9944M
[01/01 19:15:56] d2.utils.events INFO:  eta: 3:18:41  iter: 7419  total_loss: 0.4853  loss_cls: 0.108  loss_box_reg: 0.1626  loss_rpn_cls: 0.08896  loss_rpn_loc: 0.115  time: 0.8242  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 19:16:11] d2.utils.events INFO:  eta: 3:17:17  iter: 7439  total_loss: 0.4873  loss_cls: 0.1024  loss_box_reg: 0.1584  loss_rpn_cls: 0.08764  loss_rpn_loc: 0.1217  time: 0.8239  data_time: 0.0196  lr: 0.02  max_mem: 9944M
[01/01 19:16:25] d2.utils.events INFO:  eta: 3:16:07  iter: 7459  total_loss: 0.4364  loss_cls: 0.09391  loss_box_reg: 0.1508  loss_rpn_cls: 0.08316  loss_rpn_loc: 0.1179  time: 0.8236  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 19:16:40] d2.utils.events INFO:  eta: 3:15:16  iter: 7479  total_loss: 0.5228  loss_cls: 0.1169  loss_box_reg: 0.1844  loss_rpn_cls: 0.08169  loss_rpn_loc: 0.12  time: 0.8233  data_time: 0.0188  lr: 0.02  max_mem: 9944M
[01/01 19:16:55] d2.utils.events INFO:  eta: 3:14:27  iter: 7499  total_loss: 0.5038  loss_cls: 0.1081  loss_box_reg: 0.1834  loss_rpn_cls: 0.08391  loss_rpn_loc: 0.1259  time: 0.8232  data_time: 0.0158  lr: 0.02  max_mem: 9944M
[01/01 19:17:14] d2.utils.events INFO:  eta: 3:12:50  iter: 7519  total_loss: 0.5223  loss_cls: 0.1192  loss_box_reg: 0.167  loss_rpn_cls: 0.09942  loss_rpn_loc: 0.1241  time: 0.8235  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 19:17:30] d2.utils.events INFO:  eta: 3:11:43  iter: 7539  total_loss: 0.458  loss_cls: 0.1057  loss_box_reg: 0.1609  loss_rpn_cls: 0.08547  loss_rpn_loc: 0.1061  time: 0.8235  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 19:17:44] d2.utils.events INFO:  eta: 3:10:54  iter: 7559  total_loss: 0.4843  loss_cls: 0.1045  loss_box_reg: 0.1642  loss_rpn_cls: 0.08998  loss_rpn_loc: 0.1229  time: 0.8231  data_time: 0.0174  lr: 0.02  max_mem: 9944M
[01/01 19:17:58] d2.utils.events INFO:  eta: 3:10:03  iter: 7579  total_loss: 0.5109  loss_cls: 0.0983  loss_box_reg: 0.1618  loss_rpn_cls: 0.08975  loss_rpn_loc: 0.137  time: 0.8228  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 19:18:11] d2.utils.events INFO:  eta: 3:09:05  iter: 7599  total_loss: 0.486  loss_cls: 0.1028  loss_box_reg: 0.16  loss_rpn_cls: 0.08303  loss_rpn_loc: 0.1197  time: 0.8224  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 19:18:26] d2.utils.events INFO:  eta: 3:08:22  iter: 7619  total_loss: 0.5281  loss_cls: 0.1201  loss_box_reg: 0.1786  loss_rpn_cls: 0.09622  loss_rpn_loc: 0.1415  time: 0.8222  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 19:18:41] d2.utils.events INFO:  eta: 3:07:34  iter: 7639  total_loss: 0.5491  loss_cls: 0.1243  loss_box_reg: 0.2022  loss_rpn_cls: 0.09244  loss_rpn_loc: 0.1297  time: 0.8219  data_time: 0.0174  lr: 0.02  max_mem: 9944M
[01/01 19:18:55] d2.utils.events INFO:  eta: 3:07:04  iter: 7659  total_loss: 0.4907  loss_cls: 0.09617  loss_box_reg: 0.157  loss_rpn_cls: 0.09429  loss_rpn_loc: 0.1115  time: 0.8217  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 19:19:10] d2.utils.events INFO:  eta: 3:06:21  iter: 7679  total_loss: 0.5035  loss_cls: 0.1167  loss_box_reg: 0.1766  loss_rpn_cls: 0.0785  loss_rpn_loc: 0.1112  time: 0.8214  data_time: 0.0159  lr: 0.02  max_mem: 9944M
[01/01 19:19:25] d2.utils.events INFO:  eta: 3:05:41  iter: 7699  total_loss: 0.4828  loss_cls: 0.103  loss_box_reg: 0.1661  loss_rpn_cls: 0.09277  loss_rpn_loc: 0.1281  time: 0.8213  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 19:19:39] d2.utils.events INFO:  eta: 3:04:50  iter: 7719  total_loss: 0.4499  loss_cls: 0.08958  loss_box_reg: 0.1563  loss_rpn_cls: 0.08896  loss_rpn_loc: 0.1406  time: 0.8210  data_time: 0.0159  lr: 0.02  max_mem: 9944M
[01/01 19:19:54] d2.utils.events INFO:  eta: 3:04:32  iter: 7739  total_loss: 0.4735  loss_cls: 0.1058  loss_box_reg: 0.1566  loss_rpn_cls: 0.08077  loss_rpn_loc: 0.109  time: 0.8208  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 19:20:09] d2.utils.events INFO:  eta: 3:04:18  iter: 7759  total_loss: 0.4543  loss_cls: 0.09198  loss_box_reg: 0.1485  loss_rpn_cls: 0.07286  loss_rpn_loc: 0.1334  time: 0.8206  data_time: 0.0357  lr: 0.02  max_mem: 9944M
[01/01 19:20:24] d2.utils.events INFO:  eta: 3:04:03  iter: 7779  total_loss: 0.458  loss_cls: 0.09805  loss_box_reg: 0.1581  loss_rpn_cls: 0.0791  loss_rpn_loc: 0.1219  time: 0.8204  data_time: 0.0317  lr: 0.02  max_mem: 9944M
[01/01 19:20:40] d2.utils.events INFO:  eta: 3:03:53  iter: 7799  total_loss: 0.4595  loss_cls: 0.08504  loss_box_reg: 0.1411  loss_rpn_cls: 0.08733  loss_rpn_loc: 0.1177  time: 0.8203  data_time: 0.0236  lr: 0.02  max_mem: 9944M
[01/01 19:21:14] d2.utils.events INFO:  eta: 3:04:16  iter: 7819  total_loss: 0.4638  loss_cls: 0.09275  loss_box_reg: 0.1648  loss_rpn_cls: 0.08231  loss_rpn_loc: 0.1251  time: 0.8226  data_time: 0.0328  lr: 0.02  max_mem: 9944M
[01/01 19:21:34] d2.utils.events INFO:  eta: 3:04:10  iter: 7839  total_loss: 0.4849  loss_cls: 0.1098  loss_box_reg: 0.1601  loss_rpn_cls: 0.08204  loss_rpn_loc: 0.1138  time: 0.8231  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 19:22:09] d2.utils.events INFO:  eta: 3:04:18  iter: 7859  total_loss: 0.4765  loss_cls: 0.1069  loss_box_reg: 0.173  loss_rpn_cls: 0.083  loss_rpn_loc: 0.1187  time: 0.8255  data_time: 0.0321  lr: 0.02  max_mem: 9944M
[01/01 19:22:40] d2.utils.events INFO:  eta: 3:04:33  iter: 7879  total_loss: 0.4591  loss_cls: 0.1067  loss_box_reg: 0.1806  loss_rpn_cls: 0.07933  loss_rpn_loc: 0.1041  time: 0.8273  data_time: 0.0262  lr: 0.02  max_mem: 9944M
[01/01 19:23:15] d2.utils.events INFO:  eta: 3:04:40  iter: 7899  total_loss: 0.4646  loss_cls: 0.1038  loss_box_reg: 0.1632  loss_rpn_cls: 0.08026  loss_rpn_loc: 0.1102  time: 0.8296  data_time: 0.0330  lr: 0.02  max_mem: 9944M
[01/01 19:23:35] d2.utils.events INFO:  eta: 3:04:37  iter: 7919  total_loss: 0.4926  loss_cls: 0.1018  loss_box_reg: 0.1665  loss_rpn_cls: 0.09143  loss_rpn_loc: 0.1149  time: 0.8301  data_time: 0.0250  lr: 0.02  max_mem: 9944M
[01/01 19:23:49] d2.utils.events INFO:  eta: 3:04:29  iter: 7939  total_loss: 0.4757  loss_cls: 0.1014  loss_box_reg: 0.1798  loss_rpn_cls: 0.08894  loss_rpn_loc: 0.1233  time: 0.8297  data_time: 0.0167  lr: 0.02  max_mem: 9944M
[01/01 19:24:03] d2.utils.events INFO:  eta: 3:04:30  iter: 7959  total_loss: 0.4805  loss_cls: 0.106  loss_box_reg: 0.1754  loss_rpn_cls: 0.08142  loss_rpn_loc: 0.1202  time: 0.8294  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 19:24:17] d2.utils.events INFO:  eta: 3:04:18  iter: 7979  total_loss: 0.4554  loss_cls: 0.09484  loss_box_reg: 0.1692  loss_rpn_cls: 0.07675  loss_rpn_loc: 0.1092  time: 0.8290  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 19:24:30] d2.utils.events INFO:  eta: 3:04:03  iter: 7999  total_loss: 0.4843  loss_cls: 0.1042  loss_box_reg: 0.1634  loss_rpn_cls: 0.09261  loss_rpn_loc: 0.1173  time: 0.8286  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 19:24:44] d2.utils.events INFO:  eta: 3:03:47  iter: 8019  total_loss: 0.4351  loss_cls: 0.09666  loss_box_reg: 0.1537  loss_rpn_cls: 0.07937  loss_rpn_loc: 0.1139  time: 0.8282  data_time: 0.0240  lr: 0.02  max_mem: 9944M
[01/01 19:24:57] d2.utils.events INFO:  eta: 3:03:19  iter: 8039  total_loss: 0.4804  loss_cls: 0.09774  loss_box_reg: 0.1741  loss_rpn_cls: 0.08431  loss_rpn_loc: 0.1119  time: 0.8279  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 19:25:11] d2.utils.events INFO:  eta: 3:03:06  iter: 8059  total_loss: 0.4387  loss_cls: 0.1014  loss_box_reg: 0.1693  loss_rpn_cls: 0.07941  loss_rpn_loc: 0.1096  time: 0.8275  data_time: 0.0202  lr: 0.02  max_mem: 9944M
[01/01 19:25:25] d2.utils.events INFO:  eta: 3:02:52  iter: 8079  total_loss: 0.5041  loss_cls: 0.1122  loss_box_reg: 0.1799  loss_rpn_cls: 0.08391  loss_rpn_loc: 0.1226  time: 0.8271  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 19:25:39] d2.utils.events INFO:  eta: 3:02:33  iter: 8099  total_loss: 0.4837  loss_cls: 0.1009  loss_box_reg: 0.1703  loss_rpn_cls: 0.08179  loss_rpn_loc: 0.1104  time: 0.8269  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 19:25:54] d2.utils.events INFO:  eta: 3:02:19  iter: 8119  total_loss: 0.4597  loss_cls: 0.09918  loss_box_reg: 0.1781  loss_rpn_cls: 0.08807  loss_rpn_loc: 0.1167  time: 0.8266  data_time: 0.0176  lr: 0.02  max_mem: 9944M
[01/01 19:26:09] d2.utils.events INFO:  eta: 3:02:00  iter: 8139  total_loss: 0.4715  loss_cls: 0.1119  loss_box_reg: 0.1846  loss_rpn_cls: 0.08293  loss_rpn_loc: 0.1027  time: 0.8264  data_time: 0.0159  lr: 0.02  max_mem: 9944M
[01/01 19:26:23] d2.utils.events INFO:  eta: 3:01:46  iter: 8159  total_loss: 0.4666  loss_cls: 0.1032  loss_box_reg: 0.1595  loss_rpn_cls: 0.07949  loss_rpn_loc: 0.111  time: 0.8262  data_time: 0.0217  lr: 0.02  max_mem: 9944M
[01/01 19:26:38] d2.utils.events INFO:  eta: 3:01:33  iter: 8179  total_loss: 0.4587  loss_cls: 0.09855  loss_box_reg: 0.1579  loss_rpn_cls: 0.08496  loss_rpn_loc: 0.1259  time: 0.8260  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 19:26:52] d2.utils.events INFO:  eta: 3:01:19  iter: 8199  total_loss: 0.4836  loss_cls: 0.1026  loss_box_reg: 0.1731  loss_rpn_cls: 0.07694  loss_rpn_loc: 0.1141  time: 0.8257  data_time: 0.0152  lr: 0.02  max_mem: 9944M
[01/01 19:27:07] d2.utils.events INFO:  eta: 3:01:03  iter: 8219  total_loss: 0.4833  loss_cls: 0.1111  loss_box_reg: 0.1786  loss_rpn_cls: 0.08817  loss_rpn_loc: 0.1247  time: 0.8254  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 19:27:21] d2.utils.events INFO:  eta: 3:00:32  iter: 8239  total_loss: 0.4909  loss_cls: 0.1121  loss_box_reg: 0.1835  loss_rpn_cls: 0.08481  loss_rpn_loc: 0.1175  time: 0.8252  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 19:27:36] d2.utils.events INFO:  eta: 2:59:44  iter: 8259  total_loss: 0.4322  loss_cls: 0.0823  loss_box_reg: 0.143  loss_rpn_cls: 0.07861  loss_rpn_loc: 0.1142  time: 0.8250  data_time: 0.0170  lr: 0.02  max_mem: 9944M
[01/01 19:27:50] d2.utils.events INFO:  eta: 2:59:15  iter: 8279  total_loss: 0.4645  loss_cls: 0.09739  loss_box_reg: 0.1565  loss_rpn_cls: 0.09004  loss_rpn_loc: 0.1281  time: 0.8247  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 19:28:05] d2.utils.events INFO:  eta: 2:58:47  iter: 8299  total_loss: 0.4543  loss_cls: 0.0897  loss_box_reg: 0.1569  loss_rpn_cls: 0.07735  loss_rpn_loc: 0.1232  time: 0.8245  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 19:28:20] d2.utils.events INFO:  eta: 2:58:07  iter: 8319  total_loss: 0.4319  loss_cls: 0.08634  loss_box_reg: 0.1454  loss_rpn_cls: 0.09329  loss_rpn_loc: 0.1174  time: 0.8243  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 19:28:34] d2.utils.events INFO:  eta: 2:57:45  iter: 8339  total_loss: 0.5112  loss_cls: 0.1033  loss_box_reg: 0.1732  loss_rpn_cls: 0.08889  loss_rpn_loc: 0.1384  time: 0.8240  data_time: 0.0167  lr: 0.02  max_mem: 9944M
[01/01 19:28:49] d2.utils.events INFO:  eta: 2:57:18  iter: 8359  total_loss: 0.4716  loss_cls: 0.1002  loss_box_reg: 0.1708  loss_rpn_cls: 0.0797  loss_rpn_loc: 0.1163  time: 0.8238  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 19:29:04] d2.utils.events INFO:  eta: 2:57:00  iter: 8379  total_loss: 0.5234  loss_cls: 0.1193  loss_box_reg: 0.1933  loss_rpn_cls: 0.08008  loss_rpn_loc: 0.1293  time: 0.8237  data_time: 0.0193  lr: 0.02  max_mem: 9944M
[01/01 19:29:19] d2.utils.events INFO:  eta: 2:56:49  iter: 8399  total_loss: 0.4445  loss_cls: 0.09097  loss_box_reg: 0.1525  loss_rpn_cls: 0.07841  loss_rpn_loc: 0.1121  time: 0.8234  data_time: 0.0213  lr: 0.02  max_mem: 9944M
[01/01 19:29:33] d2.utils.events INFO:  eta: 2:56:34  iter: 8419  total_loss: 0.466  loss_cls: 0.09814  loss_box_reg: 0.1544  loss_rpn_cls: 0.08983  loss_rpn_loc: 0.1243  time: 0.8232  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 19:29:47] d2.utils.events INFO:  eta: 2:56:22  iter: 8439  total_loss: 0.4894  loss_cls: 0.102  loss_box_reg: 0.1599  loss_rpn_cls: 0.0805  loss_rpn_loc: 0.1111  time: 0.8230  data_time: 0.0175  lr: 0.02  max_mem: 9944M
[01/01 19:30:02] d2.utils.events INFO:  eta: 2:56:18  iter: 8459  total_loss: 0.5194  loss_cls: 0.1184  loss_box_reg: 0.1804  loss_rpn_cls: 0.09034  loss_rpn_loc: 0.1212  time: 0.8227  data_time: 0.0184  lr: 0.02  max_mem: 9944M
[01/01 19:30:16] d2.utils.events INFO:  eta: 2:56:25  iter: 8479  total_loss: 0.4404  loss_cls: 0.0992  loss_box_reg: 0.1626  loss_rpn_cls: 0.07518  loss_rpn_loc: 0.1161  time: 0.8225  data_time: 0.0393  lr: 0.02  max_mem: 9944M
[01/01 19:30:31] d2.utils.events INFO:  eta: 2:56:34  iter: 8499  total_loss: 0.452  loss_cls: 0.09731  loss_box_reg: 0.1503  loss_rpn_cls: 0.07727  loss_rpn_loc: 0.1117  time: 0.8223  data_time: 0.0358  lr: 0.02  max_mem: 9944M
[01/01 19:30:46] d2.utils.events INFO:  eta: 2:56:38  iter: 8519  total_loss: 0.4645  loss_cls: 0.1067  loss_box_reg: 0.1688  loss_rpn_cls: 0.07634  loss_rpn_loc: 0.1183  time: 0.8221  data_time: 0.0330  lr: 0.02  max_mem: 9944M
[01/01 19:31:06] d2.utils.events INFO:  eta: 2:56:51  iter: 8539  total_loss: 0.4295  loss_cls: 0.1023  loss_box_reg: 0.1588  loss_rpn_cls: 0.07209  loss_rpn_loc: 0.1226  time: 0.8226  data_time: 0.0259  lr: 0.02  max_mem: 9944M
[01/01 19:31:35] d2.utils.events INFO:  eta: 2:57:11  iter: 8559  total_loss: 0.4875  loss_cls: 0.1088  loss_box_reg: 0.1623  loss_rpn_cls: 0.09273  loss_rpn_loc: 0.1142  time: 0.8239  data_time: 0.0300  lr: 0.02  max_mem: 9944M
[01/01 19:32:08] d2.utils.events INFO:  eta: 2:57:33  iter: 8579  total_loss: 0.4747  loss_cls: 0.1019  loss_box_reg: 0.1679  loss_rpn_cls: 0.08455  loss_rpn_loc: 0.1245  time: 0.8259  data_time: 0.0341  lr: 0.02  max_mem: 9944M
[01/01 19:32:43] d2.utils.events INFO:  eta: 2:57:51  iter: 8599  total_loss: 0.4093  loss_cls: 0.0843  loss_box_reg: 0.1484  loss_rpn_cls: 0.07492  loss_rpn_loc: 0.1058  time: 0.8280  data_time: 0.0295  lr: 0.02  max_mem: 9944M
[01/01 19:33:18] d2.utils.events INFO:  eta: 2:58:17  iter: 8619  total_loss: 0.4977  loss_cls: 0.1036  loss_box_reg: 0.1708  loss_rpn_cls: 0.07756  loss_rpn_loc: 0.1184  time: 0.8301  data_time: 0.0362  lr: 0.02  max_mem: 9944M
[01/01 19:33:53] d2.utils.events INFO:  eta: 2:58:40  iter: 8639  total_loss: 0.4678  loss_cls: 0.0948  loss_box_reg: 0.1715  loss_rpn_cls: 0.08354  loss_rpn_loc: 0.1257  time: 0.8323  data_time: 0.0323  lr: 0.02  max_mem: 9944M
[01/01 19:34:30] d2.utils.events INFO:  eta: 2:59:03  iter: 8659  total_loss: 0.4481  loss_cls: 0.09317  loss_box_reg: 0.1606  loss_rpn_cls: 0.08562  loss_rpn_loc: 0.1028  time: 0.8347  data_time: 0.0275  lr: 0.02  max_mem: 9944M
[01/01 19:35:03] d2.utils.events INFO:  eta: 2:59:59  iter: 8679  total_loss: 0.464  loss_cls: 0.1044  loss_box_reg: 0.1729  loss_rpn_cls: 0.07308  loss_rpn_loc: 0.1167  time: 0.8365  data_time: 0.0274  lr: 0.02  max_mem: 9944M
[01/01 19:35:38] d2.utils.events INFO:  eta: 3:01:13  iter: 8699  total_loss: 0.4899  loss_cls: 0.1073  loss_box_reg: 0.1766  loss_rpn_cls: 0.08022  loss_rpn_loc: 0.1218  time: 0.8387  data_time: 0.0355  lr: 0.02  max_mem: 9944M
[01/01 19:36:11] d2.utils.events INFO:  eta: 3:02:10  iter: 8719  total_loss: 0.5075  loss_cls: 0.1139  loss_box_reg: 0.1734  loss_rpn_cls: 0.09063  loss_rpn_loc: 0.1336  time: 0.8405  data_time: 0.0335  lr: 0.02  max_mem: 9944M
[01/01 19:36:43] d2.utils.events INFO:  eta: 3:02:20  iter: 8739  total_loss: 0.4871  loss_cls: 0.1053  loss_box_reg: 0.1643  loss_rpn_cls: 0.08966  loss_rpn_loc: 0.1217  time: 0.8423  data_time: 0.0343  lr: 0.02  max_mem: 9944M
[01/01 19:37:17] d2.utils.events INFO:  eta: 3:02:30  iter: 8759  total_loss: 0.4488  loss_cls: 0.09468  loss_box_reg: 0.1538  loss_rpn_cls: 0.07967  loss_rpn_loc: 0.1081  time: 0.8442  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 19:37:48] d2.utils.events INFO:  eta: 3:02:30  iter: 8779  total_loss: 0.4531  loss_cls: 0.09379  loss_box_reg: 0.1559  loss_rpn_cls: 0.08135  loss_rpn_loc: 0.1155  time: 0.8457  data_time: 0.0352  lr: 0.02  max_mem: 9944M
[01/01 19:38:23] d2.utils.events INFO:  eta: 3:02:56  iter: 8799  total_loss: 0.4468  loss_cls: 0.09678  loss_box_reg: 0.153  loss_rpn_cls: 0.0817  loss_rpn_loc: 0.1015  time: 0.8478  data_time: 0.0287  lr: 0.02  max_mem: 9944M
[01/01 19:38:55] d2.utils.events INFO:  eta: 3:02:42  iter: 8819  total_loss: 0.4472  loss_cls: 0.09759  loss_box_reg: 0.1498  loss_rpn_cls: 0.07328  loss_rpn_loc: 0.119  time: 0.8495  data_time: 0.0358  lr: 0.02  max_mem: 9944M
[01/01 19:39:30] d2.utils.events INFO:  eta: 3:03:15  iter: 8839  total_loss: 0.4728  loss_cls: 0.1007  loss_box_reg: 0.1622  loss_rpn_cls: 0.07552  loss_rpn_loc: 0.1223  time: 0.8516  data_time: 0.0288  lr: 0.02  max_mem: 9944M
[01/01 19:40:07] d2.utils.events INFO:  eta: 3:03:01  iter: 8859  total_loss: 0.45  loss_cls: 0.1007  loss_box_reg: 0.1617  loss_rpn_cls: 0.09009  loss_rpn_loc: 0.1205  time: 0.8538  data_time: 0.0307  lr: 0.02  max_mem: 9944M
[01/01 19:40:43] d2.utils.events INFO:  eta: 3:02:46  iter: 8879  total_loss: 0.4781  loss_cls: 0.1104  loss_box_reg: 0.1688  loss_rpn_cls: 0.09437  loss_rpn_loc: 0.1237  time: 0.8559  data_time: 0.0278  lr: 0.02  max_mem: 9944M
[01/01 19:41:16] d2.utils.events INFO:  eta: 3:02:32  iter: 8899  total_loss: 0.4903  loss_cls: 0.09634  loss_box_reg: 0.1599  loss_rpn_cls: 0.08593  loss_rpn_loc: 0.1215  time: 0.8578  data_time: 0.0259  lr: 0.02  max_mem: 9944M
[01/01 19:41:53] d2.utils.events INFO:  eta: 3:03:27  iter: 8919  total_loss: 0.4643  loss_cls: 0.101  loss_box_reg: 0.1628  loss_rpn_cls: 0.07929  loss_rpn_loc: 0.109  time: 0.8599  data_time: 0.0252  lr: 0.02  max_mem: 9944M
[01/01 19:42:29] d2.utils.events INFO:  eta: 3:07:11  iter: 8939  total_loss: 0.5011  loss_cls: 0.1188  loss_box_reg: 0.1737  loss_rpn_cls: 0.08237  loss_rpn_loc: 0.122  time: 0.8620  data_time: 0.0305  lr: 0.02  max_mem: 9944M
[01/01 19:43:03] d2.utils.events INFO:  eta: 3:10:28  iter: 8959  total_loss: 0.474  loss_cls: 0.1009  loss_box_reg: 0.1652  loss_rpn_cls: 0.07477  loss_rpn_loc: 0.1215  time: 0.8640  data_time: 0.0325  lr: 0.02  max_mem: 9944M
[01/01 19:43:39] d2.utils.events INFO:  eta: 3:13:27  iter: 8979  total_loss: 0.463  loss_cls: 0.09347  loss_box_reg: 0.1533  loss_rpn_cls: 0.07794  loss_rpn_loc: 0.1273  time: 0.8660  data_time: 0.0282  lr: 0.02  max_mem: 9944M
[01/01 19:44:14] d2.utils.events INFO:  eta: 3:23:45  iter: 8999  total_loss: 0.5067  loss_cls: 0.1083  loss_box_reg: 0.1792  loss_rpn_cls: 0.09325  loss_rpn_loc: 0.1363  time: 0.8680  data_time: 0.0327  lr: 0.02  max_mem: 9944M
[01/01 19:44:48] d2.utils.events INFO:  eta: 4:06:35  iter: 9019  total_loss: 0.4936  loss_cls: 0.1103  loss_box_reg: 0.1838  loss_rpn_cls: 0.07431  loss_rpn_loc: 0.1253  time: 0.8699  data_time: 0.0281  lr: 0.02  max_mem: 9944M
[01/01 19:45:24] d2.utils.events INFO:  eta: 5:52:03  iter: 9039  total_loss: 0.4773  loss_cls: 0.09946  loss_box_reg: 0.1691  loss_rpn_cls: 0.09238  loss_rpn_loc: 0.118  time: 0.8719  data_time: 0.0253  lr: 0.02  max_mem: 9944M
[01/01 19:46:00] d2.utils.events INFO:  eta: 6:10:19  iter: 9059  total_loss: 0.475  loss_cls: 0.09845  loss_box_reg: 0.1664  loss_rpn_cls: 0.08245  loss_rpn_loc: 0.1156  time: 0.8739  data_time: 0.0305  lr: 0.02  max_mem: 9944M
[01/01 19:46:35] d2.utils.events INFO:  eta: 6:13:34  iter: 9079  total_loss: 0.4594  loss_cls: 0.1023  loss_box_reg: 0.1631  loss_rpn_cls: 0.08008  loss_rpn_loc: 0.1024  time: 0.8758  data_time: 0.0268  lr: 0.02  max_mem: 9944M
[01/01 19:47:11] d2.utils.events INFO:  eta: 6:16:05  iter: 9099  total_loss: 0.514  loss_cls: 0.1161  loss_box_reg: 0.1788  loss_rpn_cls: 0.09251  loss_rpn_loc: 0.127  time: 0.8779  data_time: 0.0272  lr: 0.02  max_mem: 9944M
[01/01 19:47:48] d2.utils.events INFO:  eta: 6:18:35  iter: 9119  total_loss: 0.4668  loss_cls: 0.0945  loss_box_reg: 0.148  loss_rpn_cls: 0.0771  loss_rpn_loc: 0.1148  time: 0.8800  data_time: 0.0252  lr: 0.02  max_mem: 9944M
[01/01 19:48:25] d2.utils.events INFO:  eta: 6:22:14  iter: 9139  total_loss: 0.4855  loss_cls: 0.1014  loss_box_reg: 0.1799  loss_rpn_cls: 0.07801  loss_rpn_loc: 0.1281  time: 0.8821  data_time: 0.0284  lr: 0.02  max_mem: 9944M
[01/01 19:48:39] d2.utils.events INFO:  eta: 6:21:44  iter: 9159  total_loss: 0.4911  loss_cls: 0.09956  loss_box_reg: 0.1572  loss_rpn_cls: 0.08019  loss_rpn_loc: 0.1176  time: 0.8817  data_time: 0.0171  lr: 0.02  max_mem: 9944M
[01/01 19:48:52] d2.utils.events INFO:  eta: 6:21:13  iter: 9179  total_loss: 0.4432  loss_cls: 0.09627  loss_box_reg: 0.1503  loss_rpn_cls: 0.07318  loss_rpn_loc: 0.1141  time: 0.8813  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 19:49:06] d2.utils.events INFO:  eta: 6:20:42  iter: 9199  total_loss: 0.4894  loss_cls: 0.1015  loss_box_reg: 0.1783  loss_rpn_cls: 0.08127  loss_rpn_loc: 0.1143  time: 0.8809  data_time: 0.0190  lr: 0.02  max_mem: 9944M
[01/01 19:49:20] d2.utils.events INFO:  eta: 6:20:11  iter: 9219  total_loss: 0.4777  loss_cls: 0.1058  loss_box_reg: 0.1647  loss_rpn_cls: 0.082  loss_rpn_loc: 0.1206  time: 0.8804  data_time: 0.0167  lr: 0.02  max_mem: 9944M
[01/01 19:49:34] d2.utils.events INFO:  eta: 6:19:40  iter: 9239  total_loss: 0.4243  loss_cls: 0.08501  loss_box_reg: 0.1451  loss_rpn_cls: 0.08335  loss_rpn_loc: 0.09861  time: 0.8800  data_time: 0.0279  lr: 0.02  max_mem: 9944M
[01/01 19:49:47] d2.utils.events INFO:  eta: 6:18:40  iter: 9259  total_loss: 0.4954  loss_cls: 0.09736  loss_box_reg: 0.154  loss_rpn_cls: 0.08451  loss_rpn_loc: 0.1159  time: 0.8796  data_time: 0.0156  lr: 0.02  max_mem: 9944M
[01/01 19:50:01] d2.utils.events INFO:  eta: 6:18:09  iter: 9279  total_loss: 0.4438  loss_cls: 0.09175  loss_box_reg: 0.1547  loss_rpn_cls: 0.08521  loss_rpn_loc: 0.1212  time: 0.8792  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 19:50:14] d2.utils.events INFO:  eta: 6:17:27  iter: 9299  total_loss: 0.4762  loss_cls: 0.0948  loss_box_reg: 0.1586  loss_rpn_cls: 0.08299  loss_rpn_loc: 0.1221  time: 0.8787  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 19:50:28] d2.utils.events INFO:  eta: 6:16:56  iter: 9319  total_loss: 0.4263  loss_cls: 0.09073  loss_box_reg: 0.1503  loss_rpn_cls: 0.06738  loss_rpn_loc: 0.1087  time: 0.8783  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 19:50:43] d2.utils.events INFO:  eta: 6:16:25  iter: 9339  total_loss: 0.4576  loss_cls: 0.09898  loss_box_reg: 0.1635  loss_rpn_cls: 0.07363  loss_rpn_loc: 0.1161  time: 0.8780  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 19:50:58] d2.utils.events INFO:  eta: 6:15:55  iter: 9359  total_loss: 0.4403  loss_cls: 0.104  loss_box_reg: 0.1545  loss_rpn_cls: 0.07858  loss_rpn_loc: 0.1161  time: 0.8777  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 19:51:12] d2.utils.events INFO:  eta: 6:15:11  iter: 9379  total_loss: 0.4288  loss_cls: 0.09647  loss_box_reg: 0.1501  loss_rpn_cls: 0.07194  loss_rpn_loc: 0.1112  time: 0.8774  data_time: 0.0236  lr: 0.02  max_mem: 9944M
[01/01 19:51:27] d2.utils.events INFO:  eta: 6:14:53  iter: 9399  total_loss: 0.502  loss_cls: 0.105  loss_box_reg: 0.1725  loss_rpn_cls: 0.08239  loss_rpn_loc: 0.1191  time: 0.8771  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 19:51:42] d2.utils.events INFO:  eta: 6:14:34  iter: 9419  total_loss: 0.4863  loss_cls: 0.1055  loss_box_reg: 0.1673  loss_rpn_cls: 0.08104  loss_rpn_loc: 0.1182  time: 0.8768  data_time: 0.0231  lr: 0.02  max_mem: 9944M
[01/01 19:51:56] d2.utils.events INFO:  eta: 6:14:03  iter: 9439  total_loss: 0.4731  loss_cls: 0.0969  loss_box_reg: 0.1624  loss_rpn_cls: 0.07935  loss_rpn_loc: 0.1134  time: 0.8765  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 19:52:11] d2.utils.events INFO:  eta: 6:14:01  iter: 9459  total_loss: 0.4606  loss_cls: 0.09274  loss_box_reg: 0.1474  loss_rpn_cls: 0.08544  loss_rpn_loc: 0.1309  time: 0.8762  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 19:52:25] d2.utils.events INFO:  eta: 6:13:30  iter: 9479  total_loss: 0.4884  loss_cls: 0.1064  loss_box_reg: 0.1777  loss_rpn_cls: 0.08541  loss_rpn_loc: 0.1189  time: 0.8758  data_time: 0.0170  lr: 0.02  max_mem: 9944M
[01/01 19:52:40] d2.utils.events INFO:  eta: 6:12:59  iter: 9499  total_loss: 0.4504  loss_cls: 0.09554  loss_box_reg: 0.1348  loss_rpn_cls: 0.08891  loss_rpn_loc: 0.1163  time: 0.8756  data_time: 0.0158  lr: 0.02  max_mem: 9944M
[01/01 19:52:54] d2.utils.events INFO:  eta: 6:12:28  iter: 9519  total_loss: 0.4537  loss_cls: 0.08903  loss_box_reg: 0.1531  loss_rpn_cls: 0.08367  loss_rpn_loc: 0.1241  time: 0.8752  data_time: 0.0152  lr: 0.02  max_mem: 9944M
[01/01 19:53:09] d2.utils.events INFO:  eta: 6:10:51  iter: 9539  total_loss: 0.4648  loss_cls: 0.09781  loss_box_reg: 0.1707  loss_rpn_cls: 0.07455  loss_rpn_loc: 0.1178  time: 0.8749  data_time: 0.0191  lr: 0.02  max_mem: 9944M
[01/01 19:53:24] d2.utils.events INFO:  eta: 6:08:16  iter: 9559  total_loss: 0.4928  loss_cls: 0.1044  loss_box_reg: 0.1881  loss_rpn_cls: 0.08278  loss_rpn_loc: 0.1311  time: 0.8746  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 19:53:38] d2.utils.events INFO:  eta: 6:05:28  iter: 9579  total_loss: 0.521  loss_cls: 0.1035  loss_box_reg: 0.1875  loss_rpn_cls: 0.07717  loss_rpn_loc: 0.1217  time: 0.8743  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 19:53:53] d2.utils.events INFO:  eta: 6:00:56  iter: 9599  total_loss: 0.4516  loss_cls: 0.09537  loss_box_reg: 0.1592  loss_rpn_cls: 0.07714  loss_rpn_loc: 0.1155  time: 0.8740  data_time: 0.0142  lr: 0.02  max_mem: 9944M
[01/01 19:54:08] d2.utils.events INFO:  eta: 5:57:18  iter: 9619  total_loss: 0.4496  loss_cls: 0.08812  loss_box_reg: 0.153  loss_rpn_cls: 0.07771  loss_rpn_loc: 0.1085  time: 0.8737  data_time: 0.0149  lr: 0.02  max_mem: 9944M
[01/01 19:54:23] d2.utils.events INFO:  eta: 5:47:40  iter: 9639  total_loss: 0.426  loss_cls: 0.08852  loss_box_reg: 0.1559  loss_rpn_cls: 0.08391  loss_rpn_loc: 0.11  time: 0.8735  data_time: 0.0127  lr: 0.02  max_mem: 9944M
[01/01 19:54:36] d2.utils.events INFO:  eta: 4:07:55  iter: 9659  total_loss: 0.4415  loss_cls: 0.08464  loss_box_reg: 0.1526  loss_rpn_cls: 0.07913  loss_rpn_loc: 0.1131  time: 0.8730  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 19:54:52] d2.utils.events INFO:  eta: 3:07:11  iter: 9679  total_loss: 0.4724  loss_cls: 0.09912  loss_box_reg: 0.164  loss_rpn_cls: 0.07131  loss_rpn_loc: 0.1209  time: 0.8728  data_time: 0.0155  lr: 0.02  max_mem: 9944M
[01/01 19:55:06] d2.utils.events INFO:  eta: 2:59:48  iter: 9699  total_loss: 0.4178  loss_cls: 0.09127  loss_box_reg: 0.1476  loss_rpn_cls: 0.07331  loss_rpn_loc: 0.1095  time: 0.8725  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 19:55:20] d2.utils.events INFO:  eta: 2:54:20  iter: 9719  total_loss: 0.4314  loss_cls: 0.08226  loss_box_reg: 0.1388  loss_rpn_cls: 0.07387  loss_rpn_loc: 0.1044  time: 0.8722  data_time: 0.0174  lr: 0.02  max_mem: 9944M
[01/01 19:55:35] d2.utils.events INFO:  eta: 2:51:22  iter: 9739  total_loss: 0.4851  loss_cls: 0.1032  loss_box_reg: 0.165  loss_rpn_cls: 0.0786  loss_rpn_loc: 0.1163  time: 0.8719  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 19:55:49] d2.utils.events INFO:  eta: 2:48:40  iter: 9759  total_loss: 0.4291  loss_cls: 0.08456  loss_box_reg: 0.1372  loss_rpn_cls: 0.07022  loss_rpn_loc: 0.132  time: 0.8716  data_time: 0.0168  lr: 0.02  max_mem: 9944M
[01/01 19:56:04] d2.utils.events INFO:  eta: 2:46:52  iter: 9779  total_loss: 0.4635  loss_cls: 0.0965  loss_box_reg: 0.164  loss_rpn_cls: 0.08193  loss_rpn_loc: 0.1249  time: 0.8713  data_time: 0.0186  lr: 0.02  max_mem: 9944M
[01/01 19:56:18] d2.utils.events INFO:  eta: 2:45:06  iter: 9799  total_loss: 0.4247  loss_cls: 0.08394  loss_box_reg: 0.1526  loss_rpn_cls: 0.07048  loss_rpn_loc: 0.1144  time: 0.8710  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 19:56:35] d2.utils.events INFO:  eta: 2:44:14  iter: 9819  total_loss: 0.471  loss_cls: 0.09892  loss_box_reg: 0.1665  loss_rpn_cls: 0.07585  loss_rpn_loc: 0.1275  time: 0.8709  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 19:56:48] d2.utils.events INFO:  eta: 2:43:29  iter: 9839  total_loss: 0.4289  loss_cls: 0.08234  loss_box_reg: 0.1342  loss_rpn_cls: 0.07573  loss_rpn_loc: 0.115  time: 0.8705  data_time: 0.0140  lr: 0.02  max_mem: 9944M
[01/01 19:57:03] d2.utils.events INFO:  eta: 2:42:32  iter: 9859  total_loss: 0.4497  loss_cls: 0.09324  loss_box_reg: 0.1464  loss_rpn_cls: 0.08103  loss_rpn_loc: 0.1193  time: 0.8702  data_time: 0.0176  lr: 0.02  max_mem: 9944M
[01/01 19:57:18] d2.utils.events INFO:  eta: 2:41:40  iter: 9879  total_loss: 0.4191  loss_cls: 0.09198  loss_box_reg: 0.1556  loss_rpn_cls: 0.07207  loss_rpn_loc: 0.1156  time: 0.8699  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 19:57:32] d2.utils.events INFO:  eta: 2:40:45  iter: 9899  total_loss: 0.4833  loss_cls: 0.1047  loss_box_reg: 0.1722  loss_rpn_cls: 0.07663  loss_rpn_loc: 0.1207  time: 0.8696  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 19:57:47] d2.utils.events INFO:  eta: 2:40:12  iter: 9919  total_loss: 0.4473  loss_cls: 0.09512  loss_box_reg: 0.1625  loss_rpn_cls: 0.07203  loss_rpn_loc: 0.1134  time: 0.8694  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 19:58:02] d2.utils.events INFO:  eta: 2:39:37  iter: 9939  total_loss: 0.443  loss_cls: 0.08615  loss_box_reg: 0.1519  loss_rpn_cls: 0.07323  loss_rpn_loc: 0.115  time: 0.8691  data_time: 0.0191  lr: 0.02  max_mem: 9944M
[01/01 19:58:19] d2.utils.events INFO:  eta: 2:39:04  iter: 9959  total_loss: 0.4506  loss_cls: 0.09584  loss_box_reg: 0.1593  loss_rpn_cls: 0.07931  loss_rpn_loc: 0.1223  time: 0.8691  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 19:58:33] d2.utils.events INFO:  eta: 2:38:35  iter: 9979  total_loss: 0.4501  loss_cls: 0.08694  loss_box_reg: 0.1274  loss_rpn_cls: 0.08075  loss_rpn_loc: 0.1282  time: 0.8687  data_time: 0.0239  lr: 0.02  max_mem: 9944M
[01/01 19:58:48] fvcore.common.checkpoint INFO: Saving checkpoint to output/run_1_voc_R_50_C4_24k_densecl_coco_800ep/model_0009999.pth
[01/01 19:58:48] d2.utils.events INFO:  eta: 2:38:00  iter: 9999  total_loss: 0.4406  loss_cls: 0.09332  loss_box_reg: 0.1527  loss_rpn_cls: 0.08836  loss_rpn_loc: 0.112  time: 0.8685  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 19:59:02] d2.utils.events INFO:  eta: 2:37:23  iter: 10019  total_loss: 0.4781  loss_cls: 0.1016  loss_box_reg: 0.1683  loss_rpn_cls: 0.0808  loss_rpn_loc: 0.1136  time: 0.8680  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 19:59:17] d2.utils.events INFO:  eta: 2:36:45  iter: 10039  total_loss: 0.4702  loss_cls: 0.09441  loss_box_reg: 0.1686  loss_rpn_cls: 0.0748  loss_rpn_loc: 0.1247  time: 0.8678  data_time: 0.0177  lr: 0.02  max_mem: 9944M
[01/01 19:59:31] d2.utils.events INFO:  eta: 2:36:18  iter: 10059  total_loss: 0.4512  loss_cls: 0.09517  loss_box_reg: 0.154  loss_rpn_cls: 0.08217  loss_rpn_loc: 0.1212  time: 0.8676  data_time: 0.0206  lr: 0.02  max_mem: 9944M
[01/01 19:59:47] d2.utils.events INFO:  eta: 2:35:54  iter: 10079  total_loss: 0.411  loss_cls: 0.0895  loss_box_reg: 0.1637  loss_rpn_cls: 0.06879  loss_rpn_loc: 0.1024  time: 0.8674  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 20:00:02] d2.utils.events INFO:  eta: 2:35:37  iter: 10099  total_loss: 0.4582  loss_cls: 0.09987  loss_box_reg: 0.1544  loss_rpn_cls: 0.07458  loss_rpn_loc: 0.1312  time: 0.8672  data_time: 0.0272  lr: 0.02  max_mem: 9944M
[01/01 20:00:17] d2.utils.events INFO:  eta: 2:35:24  iter: 10119  total_loss: 0.4672  loss_cls: 0.08666  loss_box_reg: 0.1492  loss_rpn_cls: 0.08044  loss_rpn_loc: 0.1335  time: 0.8669  data_time: 0.0248  lr: 0.02  max_mem: 9944M
[01/01 20:00:32] d2.utils.events INFO:  eta: 2:35:09  iter: 10139  total_loss: 0.4342  loss_cls: 0.09005  loss_box_reg: 0.1497  loss_rpn_cls: 0.08087  loss_rpn_loc: 0.1168  time: 0.8667  data_time: 0.0326  lr: 0.02  max_mem: 9944M
[01/01 20:00:48] d2.utils.events INFO:  eta: 2:35:02  iter: 10159  total_loss: 0.4396  loss_cls: 0.09631  loss_box_reg: 0.1626  loss_rpn_cls: 0.08147  loss_rpn_loc: 0.1009  time: 0.8665  data_time: 0.0286  lr: 0.02  max_mem: 9944M
[01/01 20:01:14] d2.utils.events INFO:  eta: 2:34:57  iter: 10179  total_loss: 0.4419  loss_cls: 0.08952  loss_box_reg: 0.1613  loss_rpn_cls: 0.07351  loss_rpn_loc: 0.1162  time: 0.8674  data_time: 0.0307  lr: 0.02  max_mem: 9944M
[01/01 20:01:36] d2.utils.events INFO:  eta: 2:34:53  iter: 10199  total_loss: 0.4552  loss_cls: 0.1006  loss_box_reg: 0.1636  loss_rpn_cls: 0.07849  loss_rpn_loc: 0.09925  time: 0.8678  data_time: 0.0298  lr: 0.02  max_mem: 9944M
[01/01 20:02:00] d2.utils.events INFO:  eta: 2:34:59  iter: 10219  total_loss: 0.4616  loss_cls: 0.09209  loss_box_reg: 0.162  loss_rpn_cls: 0.08079  loss_rpn_loc: 0.1223  time: 0.8685  data_time: 0.0274  lr: 0.02  max_mem: 9944M
[01/01 20:02:25] d2.utils.events INFO:  eta: 2:34:53  iter: 10239  total_loss: 0.4649  loss_cls: 0.08969  loss_box_reg: 0.1626  loss_rpn_cls: 0.09252  loss_rpn_loc: 0.12  time: 0.8693  data_time: 0.0207  lr: 0.02  max_mem: 9944M
[01/01 20:02:39] d2.utils.events INFO:  eta: 2:34:39  iter: 10259  total_loss: 0.4613  loss_cls: 0.09845  loss_box_reg: 0.1646  loss_rpn_cls: 0.08384  loss_rpn_loc: 0.1247  time: 0.8689  data_time: 0.0155  lr: 0.02  max_mem: 9944M
[01/01 20:02:52] d2.utils.events INFO:  eta: 2:34:30  iter: 10279  total_loss: 0.4601  loss_cls: 0.09451  loss_box_reg: 0.1543  loss_rpn_cls: 0.07655  loss_rpn_loc: 0.1377  time: 0.8685  data_time: 0.0153  lr: 0.02  max_mem: 9944M
[01/01 20:03:06] d2.utils.events INFO:  eta: 2:34:22  iter: 10299  total_loss: 0.4611  loss_cls: 0.09726  loss_box_reg: 0.177  loss_rpn_cls: 0.08077  loss_rpn_loc: 0.1146  time: 0.8682  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 20:03:20] d2.utils.events INFO:  eta: 2:34:10  iter: 10319  total_loss: 0.4518  loss_cls: 0.091  loss_box_reg: 0.1403  loss_rpn_cls: 0.08042  loss_rpn_loc: 0.1143  time: 0.8678  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 20:03:33] d2.utils.events INFO:  eta: 2:33:56  iter: 10339  total_loss: 0.4696  loss_cls: 0.09388  loss_box_reg: 0.1606  loss_rpn_cls: 0.08496  loss_rpn_loc: 0.127  time: 0.8674  data_time: 0.0171  lr: 0.02  max_mem: 9944M
[01/01 20:03:47] d2.utils.events INFO:  eta: 2:33:43  iter: 10359  total_loss: 0.4703  loss_cls: 0.09806  loss_box_reg: 0.1705  loss_rpn_cls: 0.078  loss_rpn_loc: 0.1196  time: 0.8671  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 20:04:00] d2.utils.events INFO:  eta: 2:33:28  iter: 10379  total_loss: 0.4632  loss_cls: 0.0964  loss_box_reg: 0.1645  loss_rpn_cls: 0.08572  loss_rpn_loc: 0.1194  time: 0.8667  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 20:04:14] d2.utils.events INFO:  eta: 2:33:17  iter: 10399  total_loss: 0.4354  loss_cls: 0.08542  loss_box_reg: 0.1537  loss_rpn_cls: 0.07852  loss_rpn_loc: 0.119  time: 0.8663  data_time: 0.0225  lr: 0.02  max_mem: 9944M
[01/01 20:04:30] d2.utils.events INFO:  eta: 2:33:05  iter: 10419  total_loss: 0.4518  loss_cls: 0.09165  loss_box_reg: 0.155  loss_rpn_cls: 0.0691  loss_rpn_loc: 0.1321  time: 0.8662  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 20:04:44] d2.utils.events INFO:  eta: 2:32:50  iter: 10439  total_loss: 0.4231  loss_cls: 0.09048  loss_box_reg: 0.1567  loss_rpn_cls: 0.07812  loss_rpn_loc: 0.1076  time: 0.8659  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 20:04:59] d2.utils.events INFO:  eta: 2:32:30  iter: 10459  total_loss: 0.446  loss_cls: 0.09493  loss_box_reg: 0.1508  loss_rpn_cls: 0.09098  loss_rpn_loc: 0.1107  time: 0.8656  data_time: 0.0174  lr: 0.02  max_mem: 9944M
[01/01 20:05:13] d2.utils.events INFO:  eta: 2:32:21  iter: 10479  total_loss: 0.4892  loss_cls: 0.1084  loss_box_reg: 0.1752  loss_rpn_cls: 0.08163  loss_rpn_loc: 0.1223  time: 0.8654  data_time: 0.0233  lr: 0.02  max_mem: 9944M
[01/01 20:05:28] d2.utils.events INFO:  eta: 2:32:06  iter: 10499  total_loss: 0.4797  loss_cls: 0.09943  loss_box_reg: 0.1823  loss_rpn_cls: 0.07774  loss_rpn_loc: 0.1228  time: 0.8651  data_time: 0.0205  lr: 0.02  max_mem: 9944M
[01/01 20:05:43] d2.utils.events INFO:  eta: 2:31:57  iter: 10519  total_loss: 0.446  loss_cls: 0.08642  loss_box_reg: 0.1392  loss_rpn_cls: 0.0724  loss_rpn_loc: 0.132  time: 0.8649  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 20:05:58] d2.utils.events INFO:  eta: 2:31:53  iter: 10539  total_loss: 0.4401  loss_cls: 0.09539  loss_box_reg: 0.1587  loss_rpn_cls: 0.08687  loss_rpn_loc: 0.117  time: 0.8647  data_time: 0.0251  lr: 0.02  max_mem: 9944M
[01/01 20:06:13] d2.utils.events INFO:  eta: 2:31:54  iter: 10559  total_loss: 0.4603  loss_cls: 0.1029  loss_box_reg: 0.166  loss_rpn_cls: 0.07991  loss_rpn_loc: 0.1051  time: 0.8645  data_time: 0.0339  lr: 0.02  max_mem: 9944M
[01/01 20:06:28] d2.utils.events INFO:  eta: 2:31:53  iter: 10579  total_loss: 0.434  loss_cls: 0.08968  loss_box_reg: 0.154  loss_rpn_cls: 0.07084  loss_rpn_loc: 0.1274  time: 0.8642  data_time: 0.0311  lr: 0.02  max_mem: 9944M
[01/01 20:06:51] d2.utils.events INFO:  eta: 2:31:53  iter: 10599  total_loss: 0.4679  loss_cls: 0.09654  loss_box_reg: 0.1595  loss_rpn_cls: 0.07695  loss_rpn_loc: 0.118  time: 0.8648  data_time: 0.0298  lr: 0.02  max_mem: 9944M
[01/01 20:07:23] d2.utils.events INFO:  eta: 2:31:56  iter: 10619  total_loss: 0.4385  loss_cls: 0.09289  loss_box_reg: 0.1488  loss_rpn_cls: 0.07884  loss_rpn_loc: 0.1152  time: 0.8661  data_time: 0.0265  lr: 0.02  max_mem: 9944M
[01/01 20:07:56] d2.utils.events INFO:  eta: 2:31:49  iter: 10639  total_loss: 0.4583  loss_cls: 0.09982  loss_box_reg: 0.1733  loss_rpn_cls: 0.07771  loss_rpn_loc: 0.1158  time: 0.8677  data_time: 0.0329  lr: 0.02  max_mem: 9944M
[01/01 20:08:29] d2.utils.events INFO:  eta: 2:32:18  iter: 10659  total_loss: 0.4322  loss_cls: 0.09173  loss_box_reg: 0.1647  loss_rpn_cls: 0.07735  loss_rpn_loc: 0.1186  time: 0.8691  data_time: 0.0321  lr: 0.02  max_mem: 9944M
[01/01 20:09:04] d2.utils.events INFO:  eta: 2:32:33  iter: 10679  total_loss: 0.4501  loss_cls: 0.08768  loss_box_reg: 0.1408  loss_rpn_cls: 0.08063  loss_rpn_loc: 0.1188  time: 0.8708  data_time: 0.0263  lr: 0.02  max_mem: 9944M
[01/01 20:09:37] d2.utils.events INFO:  eta: 2:32:53  iter: 10699  total_loss: 0.4456  loss_cls: 0.08781  loss_box_reg: 0.1546  loss_rpn_cls: 0.0704  loss_rpn_loc: 0.1194  time: 0.8722  data_time: 0.0304  lr: 0.02  max_mem: 9944M
[01/01 20:10:13] d2.utils.events INFO:  eta: 2:33:09  iter: 10719  total_loss: 0.4904  loss_cls: 0.1058  loss_box_reg: 0.1699  loss_rpn_cls: 0.08044  loss_rpn_loc: 0.1168  time: 0.8739  data_time: 0.0237  lr: 0.02  max_mem: 9944M
[01/01 20:10:46] d2.utils.events INFO:  eta: 2:33:33  iter: 10739  total_loss: 0.4877  loss_cls: 0.09833  loss_box_reg: 0.156  loss_rpn_cls: 0.08151  loss_rpn_loc: 0.1211  time: 0.8754  data_time: 0.0263  lr: 0.02  max_mem: 9944M
[01/01 20:11:20] d2.utils.events INFO:  eta: 2:33:58  iter: 10759  total_loss: 0.4523  loss_cls: 0.1066  loss_box_reg: 0.1659  loss_rpn_cls: 0.07845  loss_rpn_loc: 0.1223  time: 0.8769  data_time: 0.0256  lr: 0.02  max_mem: 9944M
[01/01 20:11:52] d2.utils.events INFO:  eta: 2:34:04  iter: 10779  total_loss: 0.4261  loss_cls: 0.08735  loss_box_reg: 0.1495  loss_rpn_cls: 0.07409  loss_rpn_loc: 0.1103  time: 0.8783  data_time: 0.0273  lr: 0.02  max_mem: 9944M
[01/01 20:12:26] d2.utils.events INFO:  eta: 2:34:44  iter: 10799  total_loss: 0.4304  loss_cls: 0.08886  loss_box_reg: 0.1441  loss_rpn_cls: 0.08658  loss_rpn_loc: 0.1052  time: 0.8798  data_time: 0.0331  lr: 0.02  max_mem: 9944M
[01/01 20:12:59] d2.utils.events INFO:  eta: 2:35:15  iter: 10819  total_loss: 0.4754  loss_cls: 0.0905  loss_box_reg: 0.151  loss_rpn_cls: 0.08322  loss_rpn_loc: 0.1202  time: 0.8812  data_time: 0.0288  lr: 0.02  max_mem: 9944M
[01/01 20:13:36] d2.utils.events INFO:  eta: 2:35:53  iter: 10839  total_loss: 0.4464  loss_cls: 0.09157  loss_box_reg: 0.1567  loss_rpn_cls: 0.08155  loss_rpn_loc: 0.0999  time: 0.8830  data_time: 0.0385  lr: 0.02  max_mem: 9944M
[01/01 20:14:11] d2.utils.events INFO:  eta: 2:37:03  iter: 10859  total_loss: 0.4861  loss_cls: 0.1065  loss_box_reg: 0.18  loss_rpn_cls: 0.08112  loss_rpn_loc: 0.1248  time: 0.8846  data_time: 0.0337  lr: 0.02  max_mem: 9944M
[01/01 20:14:44] d2.utils.events INFO:  eta: 2:37:58  iter: 10879  total_loss: 0.449  loss_cls: 0.08842  loss_box_reg: 0.1583  loss_rpn_cls: 0.06857  loss_rpn_loc: 0.1156  time: 0.8859  data_time: 0.0327  lr: 0.02  max_mem: 9944M
[01/01 20:15:19] d2.utils.events INFO:  eta: 2:38:58  iter: 10899  total_loss: 0.4432  loss_cls: 0.1056  loss_box_reg: 0.1542  loss_rpn_cls: 0.07478  loss_rpn_loc: 0.118  time: 0.8876  data_time: 0.0261  lr: 0.02  max_mem: 9944M
[01/01 20:15:56] d2.utils.events INFO:  eta: 2:39:33  iter: 10919  total_loss: 0.4467  loss_cls: 0.09378  loss_box_reg: 0.1563  loss_rpn_cls: 0.06823  loss_rpn_loc: 0.1089  time: 0.8892  data_time: 0.0303  lr: 0.02  max_mem: 9944M
[01/01 20:16:32] d2.utils.events INFO:  eta: 2:41:30  iter: 10939  total_loss: 0.4551  loss_cls: 0.1009  loss_box_reg: 0.1609  loss_rpn_cls: 0.08232  loss_rpn_loc: 0.1125  time: 0.8909  data_time: 0.0313  lr: 0.02  max_mem: 9944M
[01/01 20:17:17] d2.utils.events INFO:  eta: 2:42:53  iter: 10959  total_loss: 0.4776  loss_cls: 0.09963  loss_box_reg: 0.1555  loss_rpn_cls: 0.06935  loss_rpn_loc: 0.1177  time: 0.8934  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 20:17:57] d2.utils.events INFO:  eta: 2:47:44  iter: 10979  total_loss: 0.4697  loss_cls: 0.09262  loss_box_reg: 0.1538  loss_rpn_cls: 0.08113  loss_rpn_loc: 0.1391  time: 0.8954  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 20:18:31] d2.utils.events INFO:  eta: 2:52:57  iter: 10999  total_loss: 0.4399  loss_cls: 0.1012  loss_box_reg: 0.1494  loss_rpn_cls: 0.07814  loss_rpn_loc: 0.1081  time: 0.8969  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 20:19:07] d2.utils.events INFO:  eta: 3:06:25  iter: 11019  total_loss: 0.4346  loss_cls: 0.08869  loss_box_reg: 0.1469  loss_rpn_cls: 0.08229  loss_rpn_loc: 0.122  time: 0.8985  data_time: 0.0224  lr: 0.02  max_mem: 9944M
[01/01 20:19:53] d2.utils.events INFO:  eta: 4:36:07  iter: 11039  total_loss: 0.443  loss_cls: 0.0912  loss_box_reg: 0.1498  loss_rpn_cls: 0.08069  loss_rpn_loc: 0.1207  time: 0.9010  data_time: 0.0301  lr: 0.02  max_mem: 9944M
[01/01 20:20:27] d2.utils.events INFO:  eta: 5:09:16  iter: 11059  total_loss: 0.4564  loss_cls: 0.09641  loss_box_reg: 0.1814  loss_rpn_cls: 0.08095  loss_rpn_loc: 0.1212  time: 0.9025  data_time: 0.0253  lr: 0.02  max_mem: 9944M
[01/01 20:21:12] d2.utils.events INFO:  eta: 5:18:46  iter: 11079  total_loss: 0.4277  loss_cls: 0.08745  loss_box_reg: 0.141  loss_rpn_cls: 0.07738  loss_rpn_loc: 0.129  time: 0.9049  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 20:21:49] d2.utils.events INFO:  eta: 5:23:30  iter: 11099  total_loss: 0.439  loss_cls: 0.08681  loss_box_reg: 0.1387  loss_rpn_cls: 0.07686  loss_rpn_loc: 0.1222  time: 0.9065  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 20:22:37] d2.utils.events INFO:  eta: 5:26:29  iter: 11119  total_loss: 0.4147  loss_cls: 0.09104  loss_box_reg: 0.1498  loss_rpn_cls: 0.07005  loss_rpn_loc: 0.1039  time: 0.9092  data_time: 0.0352  lr: 0.02  max_mem: 9944M
[01/01 20:23:03] d2.utils.events INFO:  eta: 5:27:10  iter: 11139  total_loss: 0.4615  loss_cls: 0.09404  loss_box_reg: 0.1589  loss_rpn_cls: 0.08508  loss_rpn_loc: 0.1054  time: 0.9099  data_time: 0.0256  lr: 0.02  max_mem: 9944M
[01/01 20:23:16] d2.utils.events INFO:  eta: 5:26:39  iter: 11159  total_loss: 0.5125  loss_cls: 0.1064  loss_box_reg: 0.1712  loss_rpn_cls: 0.08093  loss_rpn_loc: 0.1315  time: 0.9095  data_time: 0.0202  lr: 0.02  max_mem: 9944M
[01/01 20:23:30] d2.utils.events INFO:  eta: 5:24:41  iter: 11179  total_loss: 0.4423  loss_cls: 0.0944  loss_box_reg: 0.1594  loss_rpn_cls: 0.08538  loss_rpn_loc: 0.1168  time: 0.9091  data_time: 0.0165  lr: 0.02  max_mem: 9944M
[01/01 20:23:44] d2.utils.events INFO:  eta: 5:22:23  iter: 11199  total_loss: 0.4282  loss_cls: 0.09061  loss_box_reg: 0.1422  loss_rpn_cls: 0.06743  loss_rpn_loc: 0.121  time: 0.9087  data_time: 0.0161  lr: 0.02  max_mem: 9944M
[01/01 20:24:01] d2.utils.events INFO:  eta: 5:21:24  iter: 11219  total_loss: 0.4897  loss_cls: 0.1117  loss_box_reg: 0.1749  loss_rpn_cls: 0.07847  loss_rpn_loc: 0.1176  time: 0.9086  data_time: 0.0203  lr: 0.02  max_mem: 9944M
[01/01 20:24:18] d2.utils.events INFO:  eta: 5:21:04  iter: 11239  total_loss: 0.4458  loss_cls: 0.09587  loss_box_reg: 0.1544  loss_rpn_cls: 0.06853  loss_rpn_loc: 0.1319  time: 0.9085  data_time: 0.0212  lr: 0.02  max_mem: 9944M
[01/01 20:24:38] d2.utils.events INFO:  eta: 5:21:55  iter: 11259  total_loss: 0.488  loss_cls: 0.1075  loss_box_reg: 0.1813  loss_rpn_cls: 0.07246  loss_rpn_loc: 0.1086  time: 0.9086  data_time: 0.0132  lr: 0.02  max_mem: 9944M
[01/01 20:24:52] d2.utils.events INFO:  eta: 5:21:43  iter: 11279  total_loss: 0.4439  loss_cls: 0.09145  loss_box_reg: 0.1525  loss_rpn_cls: 0.07849  loss_rpn_loc: 0.1077  time: 0.9083  data_time: 0.0208  lr: 0.02  max_mem: 9944M
[01/01 20:25:07] d2.utils.events INFO:  eta: 5:21:12  iter: 11299  total_loss: 0.4541  loss_cls: 0.1055  loss_box_reg: 0.168  loss_rpn_cls: 0.07086  loss_rpn_loc: 0.1211  time: 0.9080  data_time: 0.0155  lr: 0.02  max_mem: 9944M
[01/01 20:25:21] d2.utils.events INFO:  eta: 5:20:42  iter: 11319  total_loss: 0.4353  loss_cls: 0.09761  loss_box_reg: 0.1447  loss_rpn_cls: 0.07275  loss_rpn_loc: 0.1087  time: 0.9077  data_time: 0.0321  lr: 0.02  max_mem: 9944M
[01/01 20:25:36] d2.utils.events INFO:  eta: 5:20:12  iter: 11339  total_loss: 0.4966  loss_cls: 0.1029  loss_box_reg: 0.1579  loss_rpn_cls: 0.08029  loss_rpn_loc: 0.1214  time: 0.9074  data_time: 0.0350  lr: 0.02  max_mem: 9944M
[01/01 20:25:52] d2.utils.events INFO:  eta: 5:19:48  iter: 11359  total_loss: 0.4819  loss_cls: 0.0986  loss_box_reg: 0.163  loss_rpn_cls: 0.09076  loss_rpn_loc: 0.1301  time: 0.9071  data_time: 0.0270  lr: 0.02  max_mem: 9944M
[01/01 20:26:11] d2.utils.events INFO:  eta: 5:19:56  iter: 11379  total_loss: 0.4434  loss_cls: 0.08944  loss_box_reg: 0.1399  loss_rpn_cls: 0.07861  loss_rpn_loc: 0.1263  time: 0.9072  data_time: 0.0290  lr: 0.02  max_mem: 9944M
[01/01 20:26:36] d2.utils.events INFO:  eta: 5:20:35  iter: 11399  total_loss: 0.4891  loss_cls: 0.1098  loss_box_reg: 0.1823  loss_rpn_cls: 0.08545  loss_rpn_loc: 0.11  time: 0.9079  data_time: 0.0255  lr: 0.02  max_mem: 9944M
[01/01 20:26:56] d2.utils.events INFO:  eta: 5:20:24  iter: 11419  total_loss: 0.4527  loss_cls: 0.09089  loss_box_reg: 0.1563  loss_rpn_cls: 0.07906  loss_rpn_loc: 0.1267  time: 0.9080  data_time: 0.0291  lr: 0.02  max_mem: 9944M
[01/01 20:27:24] d2.utils.events INFO:  eta: 5:22:45  iter: 11439  total_loss: 0.4593  loss_cls: 0.09514  loss_box_reg: 0.1624  loss_rpn_cls: 0.08315  loss_rpn_loc: 0.1074  time: 0.9088  data_time: 0.0285  lr: 0.02  max_mem: 9944M
[01/01 20:27:38] d2.utils.events INFO:  eta: 5:22:15  iter: 11459  total_loss: 0.4548  loss_cls: 0.09394  loss_box_reg: 0.158  loss_rpn_cls: 0.07275  loss_rpn_loc: 0.1072  time: 0.9085  data_time: 0.0300  lr: 0.02  max_mem: 9944M
[01/01 20:28:04] d2.utils.events INFO:  eta: 5:23:17  iter: 11479  total_loss: 0.4315  loss_cls: 0.0916  loss_box_reg: 0.1469  loss_rpn_cls: 0.08269  loss_rpn_loc: 0.1153  time: 0.9092  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 20:28:28] d2.utils.events INFO:  eta: 5:23:45  iter: 11499  total_loss: 0.4605  loss_cls: 0.09959  loss_box_reg: 0.1642  loss_rpn_cls: 0.07226  loss_rpn_loc: 0.1069  time: 0.9097  data_time: 0.0301  lr: 0.02  max_mem: 9944M
[01/01 20:28:56] d2.utils.events INFO:  eta: 5:25:05  iter: 11519  total_loss: 0.4106  loss_cls: 0.08892  loss_box_reg: 0.1393  loss_rpn_cls: 0.07594  loss_rpn_loc: 0.1113  time: 0.9106  data_time: 0.0226  lr: 0.02  max_mem: 9944M
[01/01 20:29:26] d2.utils.events INFO:  eta: 5:25:25  iter: 11539  total_loss: 0.4342  loss_cls: 0.09474  loss_box_reg: 0.1561  loss_rpn_cls: 0.07582  loss_rpn_loc: 0.09862  time: 0.9116  data_time: 0.0315  lr: 0.02  max_mem: 9944M
[01/01 20:30:01] d2.utils.events INFO:  eta: 5:27:25  iter: 11559  total_loss: 0.4301  loss_cls: 0.1041  loss_box_reg: 0.1602  loss_rpn_cls: 0.0686  loss_rpn_loc: 0.1102  time: 0.9130  data_time: 0.0277  lr: 0.02  max_mem: 9944M
[01/01 20:30:31] d2.utils.events INFO:  eta: 5:27:47  iter: 11579  total_loss: 0.3996  loss_cls: 0.084  loss_box_reg: 0.1418  loss_rpn_cls: 0.06906  loss_rpn_loc: 0.1179  time: 0.9141  data_time: 0.0321  lr: 0.02  max_mem: 9944M
[01/01 20:31:05] d2.utils.events INFO:  eta: 5:28:24  iter: 11599  total_loss: 0.408  loss_cls: 0.08413  loss_box_reg: 0.1378  loss_rpn_cls: 0.06746  loss_rpn_loc: 0.1192  time: 0.9154  data_time: 0.0282  lr: 0.02  max_mem: 9944M
[01/01 20:31:38] d2.utils.events INFO:  eta: 5:27:40  iter: 11619  total_loss: 0.4208  loss_cls: 0.08987  loss_box_reg: 0.1586  loss_rpn_cls: 0.06099  loss_rpn_loc: 0.1117  time: 0.9167  data_time: 0.0295  lr: 0.02  max_mem: 9944M
[01/01 20:32:09] d2.utils.events INFO:  eta: 5:26:02  iter: 11639  total_loss: 0.4106  loss_cls: 0.08584  loss_box_reg: 0.1492  loss_rpn_cls: 0.06728  loss_rpn_loc: 0.1045  time: 0.9178  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 20:32:43] d2.utils.events INFO:  eta: 5:25:19  iter: 11659  total_loss: 0.4542  loss_cls: 0.09566  loss_box_reg: 0.1589  loss_rpn_cls: 0.08205  loss_rpn_loc: 0.1154  time: 0.9190  data_time: 0.0187  lr: 0.02  max_mem: 9944M
[01/01 20:33:13] d2.utils.events INFO:  eta: 5:25:21  iter: 11679  total_loss: 0.4545  loss_cls: 0.1032  loss_box_reg: 0.1779  loss_rpn_cls: 0.07213  loss_rpn_loc: 0.1134  time: 0.9200  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 20:33:39] d2.utils.events INFO:  eta: 5:23:41  iter: 11699  total_loss: 0.4471  loss_cls: 0.08625  loss_box_reg: 0.1501  loss_rpn_cls: 0.0791  loss_rpn_loc: 0.1099  time: 0.9206  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 20:34:16] d2.utils.events INFO:  eta: 5:22:32  iter: 11719  total_loss: 0.4714  loss_cls: 0.08979  loss_box_reg: 0.1536  loss_rpn_cls: 0.08002  loss_rpn_loc: 0.1293  time: 0.9222  data_time: 0.0298  lr: 0.02  max_mem: 9944M
[01/01 20:34:47] d2.utils.events INFO:  eta: 5:21:24  iter: 11739  total_loss: 0.4225  loss_cls: 0.08534  loss_box_reg: 0.1375  loss_rpn_cls: 0.07434  loss_rpn_loc: 0.1226  time: 0.9233  data_time: 0.0282  lr: 0.02  max_mem: 9944M
[01/01 20:35:24] d2.utils.events INFO:  eta: 5:20:41  iter: 11759  total_loss: 0.4356  loss_cls: 0.08549  loss_box_reg: 0.1472  loss_rpn_cls: 0.07572  loss_rpn_loc: 0.1207  time: 0.9249  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 20:36:20] d2.utils.events INFO:  eta: 5:20:58  iter: 11779  total_loss: 0.4005  loss_cls: 0.08193  loss_box_reg: 0.133  loss_rpn_cls: 0.06544  loss_rpn_loc: 0.1193  time: 0.9281  data_time: 0.0303  lr: 0.02  max_mem: 9944M
[01/01 20:37:14] d2.utils.events INFO:  eta: 5:21:28  iter: 11799  total_loss: 0.4612  loss_cls: 0.09398  loss_box_reg: 0.1699  loss_rpn_cls: 0.07534  loss_rpn_loc: 0.1227  time: 0.9311  data_time: 0.0229  lr: 0.02  max_mem: 9944M
[01/01 20:37:50] d2.utils.events INFO:  eta: 5:23:19  iter: 11819  total_loss: 0.4201  loss_cls: 0.08528  loss_box_reg: 0.1496  loss_rpn_cls: 0.07033  loss_rpn_loc: 0.1148  time: 0.9325  data_time: 0.0266  lr: 0.02  max_mem: 9944M
[01/01 20:38:34] d2.utils.events INFO:  eta: 5:23:48  iter: 11839  total_loss: 0.4423  loss_cls: 0.09146  loss_box_reg: 0.1503  loss_rpn_cls: 0.07381  loss_rpn_loc: 0.1094  time: 0.9347  data_time: 0.0313  lr: 0.02  max_mem: 9944M
[01/01 20:39:18] d2.utils.events INFO:  eta: 5:23:25  iter: 11859  total_loss: 0.4703  loss_cls: 0.09608  loss_box_reg: 0.1665  loss_rpn_cls: 0.07467  loss_rpn_loc: 0.1192  time: 0.9368  data_time: 0.0260  lr: 0.02  max_mem: 9944M
[01/01 20:39:59] d2.utils.events INFO:  eta: 5:25:32  iter: 11879  total_loss: 0.4359  loss_cls: 0.08096  loss_box_reg: 0.1467  loss_rpn_cls: 0.07472  loss_rpn_loc: 0.1197  time: 0.9387  data_time: 0.0281  lr: 0.02  max_mem: 9944M
[01/01 20:40:35] d2.utils.events INFO:  eta: 5:23:42  iter: 11899  total_loss: 0.4576  loss_cls: 0.09549  loss_box_reg: 0.1712  loss_rpn_cls: 0.07574  loss_rpn_loc: 0.1092  time: 0.9401  data_time: 0.0881  lr: 0.02  max_mem: 9944M
[01/01 20:41:11] d2.utils.events INFO:  eta: 5:22:54  iter: 11919  total_loss: 0.4479  loss_cls: 0.09848  loss_box_reg: 0.168  loss_rpn_cls: 0.07965  loss_rpn_loc: 0.1119  time: 0.9416  data_time: 0.0202  lr: 0.02  max_mem: 9944M
[01/01 20:41:49] d2.utils.events INFO:  eta: 5:22:22  iter: 11939  total_loss: 0.4082  loss_cls: 0.08399  loss_box_reg: 0.1393  loss_rpn_cls: 0.05951  loss_rpn_loc: 0.1091  time: 0.9432  data_time: 0.0279  lr: 0.02  max_mem: 9944M
[01/01 20:42:40] d2.utils.events INFO:  eta: 5:21:36  iter: 11959  total_loss: 0.4253  loss_cls: 0.0855  loss_box_reg: 0.1517  loss_rpn_cls: 0.0784  loss_rpn_loc: 0.1256  time: 0.9455  data_time: 0.0250  lr: 0.02  max_mem: 9944M
[01/01 20:43:23] d2.utils.events INFO:  eta: 5:19:41  iter: 11979  total_loss: 0.5168  loss_cls: 0.1051  loss_box_reg: 0.1924  loss_rpn_cls: 0.09165  loss_rpn_loc: 0.1082  time: 0.9475  data_time: 0.0355  lr: 0.02  max_mem: 9944M
[01/01 20:44:07] d2.utils.events INFO:  eta: 5:20:46  iter: 11999  total_loss: 0.4374  loss_cls: 0.08766  loss_box_reg: 0.1506  loss_rpn_cls: 0.07162  loss_rpn_loc: 0.1064  time: 0.9496  data_time: 0.0242  lr: 0.02  max_mem: 9944M
[01/01 20:45:00] d2.utils.events INFO:  eta: 5:20:44  iter: 12019  total_loss: 0.4201  loss_cls: 0.08555  loss_box_reg: 0.1434  loss_rpn_cls: 0.07555  loss_rpn_loc: 0.1188  time: 0.9524  data_time: 0.0292  lr: 0.02  max_mem: 9944M
[01/01 20:45:42] d2.utils.events INFO:  eta: 5:19:35  iter: 12039  total_loss: 0.4486  loss_cls: 0.09276  loss_box_reg: 0.1562  loss_rpn_cls: 0.08033  loss_rpn_loc: 0.1175  time: 0.9543  data_time: 0.0271  lr: 0.02  max_mem: 9944M
[01/01 20:46:18] d2.utils.events INFO:  eta: 5:19:40  iter: 12059  total_loss: 0.4072  loss_cls: 0.08439  loss_box_reg: 0.1538  loss_rpn_cls: 0.07604  loss_rpn_loc: 0.1163  time: 0.9557  data_time: 0.0263  lr: 0.02  max_mem: 9944M
[01/01 20:46:54] d2.utils.events INFO:  eta: 5:19:31  iter: 12079  total_loss: 0.4116  loss_cls: 0.07794  loss_box_reg: 0.1344  loss_rpn_cls: 0.07137  loss_rpn_loc: 0.1211  time: 0.9571  data_time: 0.0245  lr: 0.02  max_mem: 9944M
[01/01 20:47:38] d2.utils.events INFO:  eta: 5:18:59  iter: 12099  total_loss: 0.4248  loss_cls: 0.08873  loss_box_reg: 0.1583  loss_rpn_cls: 0.07364  loss_rpn_loc: 0.1068  time: 0.9591  data_time: 0.0297  lr: 0.02  max_mem: 9944M
[01/01 20:48:15] d2.utils.events INFO:  eta: 5:18:27  iter: 12119  total_loss: 0.4694  loss_cls: 0.1009  loss_box_reg: 0.1705  loss_rpn_cls: 0.07605  loss_rpn_loc: 0.1219  time: 0.9606  data_time: 0.0236  lr: 0.02  max_mem: 9944M
[01/01 20:48:56] d2.utils.events INFO:  eta: 5:19:58  iter: 12139  total_loss: 0.4238  loss_cls: 0.09334  loss_box_reg: 0.1505  loss_rpn_cls: 0.08049  loss_rpn_loc: 0.1052  time: 0.9624  data_time: 0.0347  lr: 0.02  max_mem: 9944M
[01/01 20:49:33] d2.utils.events INFO:  eta: 5:25:44  iter: 12159  total_loss: 0.4052  loss_cls: 0.07487  loss_box_reg: 0.134  loss_rpn_cls: 0.07301  loss_rpn_loc: 0.1154  time: 0.9638  data_time: 0.0304  lr: 0.02  max_mem: 9944M
[01/01 20:50:11] d2.utils.events INFO:  eta: 5:31:24  iter: 12179  total_loss: 0.443  loss_cls: 0.09501  loss_box_reg: 0.1602  loss_rpn_cls: 0.0696  loss_rpn_loc: 0.122  time: 0.9654  data_time: 0.0230  lr: 0.02  max_mem: 9944M
[01/01 20:50:49] d2.utils.events INFO:  eta: 5:38:12  iter: 12199  total_loss: 0.4481  loss_cls: 0.09391  loss_box_reg: 0.1661  loss_rpn_cls: 0.06708  loss_rpn_loc: 0.1188  time: 0.9669  data_time: 0.0297  lr: 0.02  max_mem: 9944M
[01/01 20:51:25] d2.utils.events INFO:  eta: 5:39:17  iter: 12219  total_loss: 0.4214  loss_cls: 0.086  loss_box_reg: 0.1413  loss_rpn_cls: 0.06483  loss_rpn_loc: 0.1155  time: 0.9683  data_time: 0.0263  lr: 0.02  max_mem: 9944M
[01/01 20:52:06] d2.utils.events INFO:  eta: 5:40:48  iter: 12239  total_loss: 0.4875  loss_cls: 0.1067  loss_box_reg: 0.1732  loss_rpn_cls: 0.07584  loss_rpn_loc: 0.1138  time: 0.9700  data_time: 0.0306  lr: 0.02  max_mem: 9944M
[01/01 20:53:01] d2.utils.events INFO:  eta: 5:41:47  iter: 12259  total_loss: 0.4017  loss_cls: 0.09022  loss_box_reg: 0.157  loss_rpn_cls: 0.06895  loss_rpn_loc: 0.1154  time: 0.9729  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 20:53:37] d2.utils.events INFO:  eta: 5:42:08  iter: 12279  total_loss: 0.4383  loss_cls: 0.09236  loss_box_reg: 0.1505  loss_rpn_cls: 0.07484  loss_rpn_loc: 0.1085  time: 0.9742  data_time: 0.0274  lr: 0.02  max_mem: 9944M
[01/01 20:54:13] d2.utils.events INFO:  eta: 5:43:25  iter: 12299  total_loss: 0.4414  loss_cls: 0.08507  loss_box_reg: 0.1507  loss_rpn_cls: 0.07237  loss_rpn_loc: 0.128  time: 0.9756  data_time: 0.0286  lr: 0.02  max_mem: 9944M
[01/01 20:54:53] d2.utils.events INFO:  eta: 5:44:03  iter: 12319  total_loss: 0.4563  loss_cls: 0.09649  loss_box_reg: 0.1568  loss_rpn_cls: 0.07756  loss_rpn_loc: 0.1298  time: 0.9773  data_time: 0.0260  lr: 0.02  max_mem: 9944M
[01/01 20:55:35] d2.utils.events INFO:  eta: 5:44:27  iter: 12339  total_loss: 0.3986  loss_cls: 0.07969  loss_box_reg: 0.1248  loss_rpn_cls: 0.07547  loss_rpn_loc: 0.1032  time: 0.9790  data_time: 0.0338  lr: 0.02  max_mem: 9944M
[01/01 20:56:16] d2.utils.events INFO:  eta: 5:44:22  iter: 12359  total_loss: 0.465  loss_cls: 0.09867  loss_box_reg: 0.1626  loss_rpn_cls: 0.07995  loss_rpn_loc: 0.124  time: 0.9808  data_time: 0.0262  lr: 0.02  max_mem: 9944M
[01/01 20:56:52] d2.utils.events INFO:  eta: 5:44:09  iter: 12379  total_loss: 0.4448  loss_cls: 0.09494  loss_box_reg: 0.1587  loss_rpn_cls: 0.07025  loss_rpn_loc: 0.09955  time: 0.9821  data_time: 0.0175  lr: 0.02  max_mem: 9944M
[01/01 20:57:29] d2.utils.events INFO:  eta: 5:43:58  iter: 12399  total_loss: 0.4315  loss_cls: 0.09236  loss_box_reg: 0.152  loss_rpn_cls: 0.0721  loss_rpn_loc: 0.1218  time: 0.9834  data_time: 0.0215  lr: 0.02  max_mem: 9944M
[01/01 20:58:05] d2.utils.events INFO:  eta: 5:43:39  iter: 12419  total_loss: 0.4721  loss_cls: 0.1003  loss_box_reg: 0.1662  loss_rpn_cls: 0.07885  loss_rpn_loc: 0.1036  time: 0.9848  data_time: 0.0219  lr: 0.02  max_mem: 9944M
[01/01 20:58:38] d2.utils.events INFO:  eta: 5:42:46  iter: 12439  total_loss: 0.4572  loss_cls: 0.09635  loss_box_reg: 0.1502  loss_rpn_cls: 0.07579  loss_rpn_loc: 0.1246  time: 0.9859  data_time: 0.0201  lr: 0.02  max_mem: 9944M
[01/01 20:59:11] d2.utils.events INFO:  eta: 5:42:14  iter: 12459  total_loss: 0.4556  loss_cls: 0.107  loss_box_reg: 0.1583  loss_rpn_cls: 0.07877  loss_rpn_loc: 0.1291  time: 0.9869  data_time: 0.0182  lr: 0.02  max_mem: 9944M
[01/01 20:59:43] d2.utils.events INFO:  eta: 5:41:19  iter: 12479  total_loss: 0.4269  loss_cls: 0.09104  loss_box_reg: 0.1706  loss_rpn_cls: 0.07116  loss_rpn_loc: 0.1073  time: 0.9879  data_time: 0.0181  lr: 0.02  max_mem: 9944M
[01/01 21:00:16] d2.utils.events INFO:  eta: 5:40:27  iter: 12499  total_loss: 0.455  loss_cls: 0.09013  loss_box_reg: 0.1569  loss_rpn_cls: 0.07338  loss_rpn_loc: 0.119  time: 0.9890  data_time: 0.0195  lr: 0.02  max_mem: 9944M
[01/01 21:00:51] d2.utils.events INFO:  eta: 5:39:44  iter: 12519  total_loss: 0.443  loss_cls: 0.09877  loss_box_reg: 0.1731  loss_rpn_cls: 0.06781  loss_rpn_loc: 0.1039  time: 0.9901  data_time: 0.0232  lr: 0.02  max_mem: 9944M
[01/01 21:01:24] d2.utils.events INFO:  eta: 5:38:59  iter: 12539  total_loss: 0.4431  loss_cls: 0.08825  loss_box_reg: 0.1495  loss_rpn_cls: 0.07469  loss_rpn_loc: 0.1191  time: 0.9912  data_time: 0.0294  lr: 0.02  max_mem: 9944M
[01/01 21:01:59] d2.utils.events INFO:  eta: 5:38:10  iter: 12559  total_loss: 0.4722  loss_cls: 0.0889  loss_box_reg: 0.1681  loss_rpn_cls: 0.07893  loss_rpn_loc: 0.1195  time: 0.9924  data_time: 0.0247  lr: 0.02  max_mem: 9944M
[01/01 21:02:32] d2.utils.events INFO:  eta: 5:37:32  iter: 12579  total_loss: 0.4055  loss_cls: 0.09134  loss_box_reg: 0.1475  loss_rpn_cls: 0.07283  loss_rpn_loc: 0.1042  time: 0.9934  data_time: 0.0178  lr: 0.02  max_mem: 9944M
[01/01 21:03:06] d2.utils.events INFO:  eta: 5:36:54  iter: 12599  total_loss: 0.4155  loss_cls: 0.09531  loss_box_reg: 0.1535  loss_rpn_cls: 0.07313  loss_rpn_loc: 0.09586  time: 0.9945  data_time: 0.0188  lr: 0.02  max_mem: 9944M
[01/01 21:03:41] d2.utils.events INFO:  eta: 5:36:21  iter: 12619  total_loss: 0.4251  loss_cls: 0.09207  loss_box_reg: 0.1632  loss_rpn_cls: 0.07417  loss_rpn_loc: 0.1255  time: 0.9958  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 21:04:13] d2.utils.events INFO:  eta: 5:35:45  iter: 12639  total_loss: 0.4074  loss_cls: 0.08378  loss_box_reg: 0.1303  loss_rpn_cls: 0.07044  loss_rpn_loc: 0.1267  time: 0.9967  data_time: 0.0176  lr: 0.02  max_mem: 9944M
[01/01 21:04:46] d2.utils.events INFO:  eta: 5:34:59  iter: 12659  total_loss: 0.417  loss_cls: 0.08908  loss_box_reg: 0.1522  loss_rpn_cls: 0.07132  loss_rpn_loc: 0.1032  time: 0.9977  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 21:05:20] d2.utils.events INFO:  eta: 5:34:27  iter: 12679  total_loss: 0.4179  loss_cls: 0.08526  loss_box_reg: 0.1461  loss_rpn_cls: 0.07365  loss_rpn_loc: 0.1188  time: 0.9989  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 21:05:55] d2.utils.events INFO:  eta: 5:33:54  iter: 12699  total_loss: 0.4455  loss_cls: 0.09637  loss_box_reg: 0.1741  loss_rpn_cls: 0.0681  loss_rpn_loc: 0.09709  time: 1.0000  data_time: 0.0247  lr: 0.02  max_mem: 9944M
[01/01 21:06:31] d2.utils.events INFO:  eta: 5:33:26  iter: 12719  total_loss: 0.4659  loss_cls: 0.09043  loss_box_reg: 0.1776  loss_rpn_cls: 0.07001  loss_rpn_loc: 0.11  time: 1.0012  data_time: 0.0184  lr: 0.02  max_mem: 9944M
[01/01 21:07:06] d2.utils.events INFO:  eta: 5:33:20  iter: 12739  total_loss: 0.4409  loss_cls: 0.08503  loss_box_reg: 0.1417  loss_rpn_cls: 0.08322  loss_rpn_loc: 0.1309  time: 1.0025  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 21:07:42] d2.utils.events INFO:  eta: 5:32:54  iter: 12759  total_loss: 0.4359  loss_cls: 0.08741  loss_box_reg: 0.1534  loss_rpn_cls: 0.0763  loss_rpn_loc: 0.1283  time: 1.0037  data_time: 0.0158  lr: 0.02  max_mem: 9944M
[01/01 21:08:17] d2.utils.events INFO:  eta: 5:32:06  iter: 12779  total_loss: 0.4561  loss_cls: 0.0917  loss_box_reg: 0.1596  loss_rpn_cls: 0.07186  loss_rpn_loc: 0.1291  time: 1.0049  data_time: 0.0157  lr: 0.02  max_mem: 9944M
[01/01 21:08:54] d2.utils.events INFO:  eta: 5:31:34  iter: 12799  total_loss: 0.4273  loss_cls: 0.09418  loss_box_reg: 0.1592  loss_rpn_cls: 0.06921  loss_rpn_loc: 0.1178  time: 1.0062  data_time: 0.0163  lr: 0.02  max_mem: 9944M
[01/01 21:09:32] d2.utils.events INFO:  eta: 5:30:57  iter: 12819  total_loss: 0.4146  loss_cls: 0.0765  loss_box_reg: 0.1467  loss_rpn_cls: 0.07293  loss_rpn_loc: 0.1088  time: 1.0076  data_time: 0.0227  lr: 0.02  max_mem: 9944M
[01/01 21:10:10] d2.utils.events INFO:  eta: 5:30:17  iter: 12839  total_loss: 0.4747  loss_cls: 0.08802  loss_box_reg: 0.1754  loss_rpn_cls: 0.08742  loss_rpn_loc: 0.116  time: 1.0089  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 21:10:48] d2.utils.events INFO:  eta: 5:29:46  iter: 12859  total_loss: 0.4088  loss_cls: 0.08771  loss_box_reg: 0.1454  loss_rpn_cls: 0.07226  loss_rpn_loc: 0.09976  time: 1.0103  data_time: 0.0232  lr: 0.02  max_mem: 9944M
[01/01 21:11:24] d2.utils.events INFO:  eta: 5:29:02  iter: 12879  total_loss: 0.4534  loss_cls: 0.101  loss_box_reg: 0.1577  loss_rpn_cls: 0.08077  loss_rpn_loc: 0.1185  time: 1.0115  data_time: 0.0225  lr: 0.02  max_mem: 9944M
[01/01 21:12:00] d2.utils.events INFO:  eta: 5:28:33  iter: 12899  total_loss: 0.4227  loss_cls: 0.08813  loss_box_reg: 0.1471  loss_rpn_cls: 0.07591  loss_rpn_loc: 0.112  time: 1.0127  data_time: 0.0271  lr: 0.02  max_mem: 9944M
[01/01 21:12:36] d2.utils.events INFO:  eta: 5:28:00  iter: 12919  total_loss: 0.4604  loss_cls: 0.0974  loss_box_reg: 0.1636  loss_rpn_cls: 0.0803  loss_rpn_loc: 0.1183  time: 1.0140  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 21:13:18] d2.utils.events INFO:  eta: 5:27:10  iter: 12939  total_loss: 0.3958  loss_cls: 0.08199  loss_box_reg: 0.1487  loss_rpn_cls: 0.07182  loss_rpn_loc: 0.111  time: 1.0156  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 21:13:55] d2.utils.events INFO:  eta: 5:26:34  iter: 12959  total_loss: 0.461  loss_cls: 0.09138  loss_box_reg: 0.1571  loss_rpn_cls: 0.07092  loss_rpn_loc: 0.1071  time: 1.0169  data_time: 0.0236  lr: 0.02  max_mem: 9944M
[01/01 21:14:30] d2.utils.events INFO:  eta: 5:26:08  iter: 12979  total_loss: 0.3939  loss_cls: 0.07785  loss_box_reg: 0.1366  loss_rpn_cls: 0.06983  loss_rpn_loc: 0.1093  time: 1.0181  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 21:15:06] d2.utils.events INFO:  eta: 5:25:13  iter: 12999  total_loss: 0.4414  loss_cls: 0.09182  loss_box_reg: 0.158  loss_rpn_cls: 0.06503  loss_rpn_loc: 0.111  time: 1.0192  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 21:15:46] d2.utils.events INFO:  eta: 5:24:28  iter: 13019  total_loss: 0.5124  loss_cls: 0.1087  loss_box_reg: 0.1676  loss_rpn_cls: 0.08476  loss_rpn_loc: 0.1062  time: 1.0207  data_time: 0.0262  lr: 0.02  max_mem: 9944M
[01/01 21:16:22] d2.utils.events INFO:  eta: 5:23:48  iter: 13039  total_loss: 0.4211  loss_cls: 0.08311  loss_box_reg: 0.1497  loss_rpn_cls: 0.07162  loss_rpn_loc: 0.1147  time: 1.0220  data_time: 0.0225  lr: 0.02  max_mem: 9944M
[01/01 21:16:58] d2.utils.events INFO:  eta: 5:23:07  iter: 13059  total_loss: 0.431  loss_cls: 0.09036  loss_box_reg: 0.1581  loss_rpn_cls: 0.06571  loss_rpn_loc: 0.11  time: 1.0232  data_time: 0.0247  lr: 0.02  max_mem: 9944M
[01/01 21:17:34] d2.utils.events INFO:  eta: 5:22:25  iter: 13079  total_loss: 0.3812  loss_cls: 0.0763  loss_box_reg: 0.1277  loss_rpn_cls: 0.07683  loss_rpn_loc: 0.1063  time: 1.0243  data_time: 0.0210  lr: 0.02  max_mem: 9944M
[01/01 21:18:12] d2.utils.events INFO:  eta: 5:21:44  iter: 13099  total_loss: 0.4265  loss_cls: 0.09433  loss_box_reg: 0.1579  loss_rpn_cls: 0.0755  loss_rpn_loc: 0.1137  time: 1.0257  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 21:18:56] d2.utils.events INFO:  eta: 5:21:00  iter: 13119  total_loss: 0.4347  loss_cls: 0.09112  loss_box_reg: 0.1542  loss_rpn_cls: 0.07637  loss_rpn_loc: 0.1194  time: 1.0274  data_time: 0.0330  lr: 0.02  max_mem: 9944M
[01/01 21:19:32] d2.utils.events INFO:  eta: 5:20:15  iter: 13139  total_loss: 0.4425  loss_cls: 0.08599  loss_box_reg: 0.1501  loss_rpn_cls: 0.07366  loss_rpn_loc: 0.1245  time: 1.0286  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 21:20:07] d2.utils.events INFO:  eta: 5:19:11  iter: 13159  total_loss: 0.488  loss_cls: 0.09934  loss_box_reg: 0.1756  loss_rpn_cls: 0.08699  loss_rpn_loc: 0.1178  time: 1.0297  data_time: 0.0233  lr: 0.02  max_mem: 9944M
[01/01 21:20:43] d2.utils.events INFO:  eta: 5:17:51  iter: 13179  total_loss: 0.4598  loss_cls: 0.08803  loss_box_reg: 0.152  loss_rpn_cls: 0.07534  loss_rpn_loc: 0.123  time: 1.0309  data_time: 0.0212  lr: 0.02  max_mem: 9944M
[01/01 21:21:21] d2.utils.events INFO:  eta: 5:17:10  iter: 13199  total_loss: 0.4339  loss_cls: 0.08829  loss_box_reg: 0.1522  loss_rpn_cls: 0.08252  loss_rpn_loc: 0.1143  time: 1.0322  data_time: 0.0252  lr: 0.02  max_mem: 9944M
[01/01 21:21:59] d2.utils.events INFO:  eta: 5:16:35  iter: 13219  total_loss: 0.3954  loss_cls: 0.08031  loss_box_reg: 0.137  loss_rpn_cls: 0.07296  loss_rpn_loc: 0.09832  time: 1.0335  data_time: 0.0295  lr: 0.02  max_mem: 9944M
[01/01 21:22:36] d2.utils.events INFO:  eta: 5:15:46  iter: 13239  total_loss: 0.4501  loss_cls: 0.09422  loss_box_reg: 0.1597  loss_rpn_cls: 0.07345  loss_rpn_loc: 0.1182  time: 1.0347  data_time: 0.0214  lr: 0.02  max_mem: 9944M
[01/01 21:23:16] d2.utils.events INFO:  eta: 5:15:11  iter: 13259  total_loss: 0.4361  loss_cls: 0.0874  loss_box_reg: 0.1435  loss_rpn_cls: 0.07122  loss_rpn_loc: 0.1107  time: 1.0361  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 21:23:51] d2.utils.events INFO:  eta: 5:14:32  iter: 13279  total_loss: 0.4332  loss_cls: 0.08883  loss_box_reg: 0.1653  loss_rpn_cls: 0.07524  loss_rpn_loc: 0.1143  time: 1.0372  data_time: 0.0185  lr: 0.02  max_mem: 9944M
[01/01 21:24:30] d2.utils.events INFO:  eta: 5:13:36  iter: 13299  total_loss: 0.4081  loss_cls: 0.0805  loss_box_reg: 0.1458  loss_rpn_cls: 0.08118  loss_rpn_loc: 0.1063  time: 1.0386  data_time: 0.0192  lr: 0.02  max_mem: 9944M
[01/01 21:25:10] d2.utils.events INFO:  eta: 5:12:30  iter: 13319  total_loss: 0.4109  loss_cls: 0.08364  loss_box_reg: 0.16  loss_rpn_cls: 0.07018  loss_rpn_loc: 0.1169  time: 1.0400  data_time: 0.0218  lr: 0.02  max_mem: 9944M
[01/01 21:25:50] d2.utils.events INFO:  eta: 5:11:53  iter: 13339  total_loss: 0.4307  loss_cls: 0.08965  loss_box_reg: 0.1521  loss_rpn_cls: 0.06927  loss_rpn_loc: 0.1193  time: 1.0414  data_time: 0.0260  lr: 0.02  max_mem: 9944M
[01/01 21:26:27] d2.utils.events INFO:  eta: 5:11:46  iter: 13359  total_loss: 0.4067  loss_cls: 0.08012  loss_box_reg: 0.1375  loss_rpn_cls: 0.0716  loss_rpn_loc: 0.1107  time: 1.0427  data_time: 0.0262  lr: 0.02  max_mem: 9944M
[01/01 21:27:04] d2.utils.events INFO:  eta: 5:11:18  iter: 13379  total_loss: 0.4321  loss_cls: 0.08775  loss_box_reg: 0.1529  loss_rpn_cls: 0.0734  loss_rpn_loc: 0.1101  time: 1.0439  data_time: 0.0241  lr: 0.02  max_mem: 9944M
[01/01 21:27:41] d2.utils.events INFO:  eta: 5:10:43  iter: 13399  total_loss: 0.3939  loss_cls: 0.08985  loss_box_reg: 0.1463  loss_rpn_cls: 0.06237  loss_rpn_loc: 0.1034  time: 1.0451  data_time: 0.0249  lr: 0.02  max_mem: 9944M
[01/01 21:28:17] d2.utils.events INFO:  eta: 5:10:09  iter: 13419  total_loss: 0.4564  loss_cls: 0.09051  loss_box_reg: 0.157  loss_rpn_cls: 0.06866  loss_rpn_loc: 0.1159  time: 1.0462  data_time: 0.0220  lr: 0.02  max_mem: 9944M
[01/01 21:28:54] d2.utils.events INFO:  eta: 5:10:01  iter: 13439  total_loss: 0.4266  loss_cls: 0.09202  loss_box_reg: 0.1481  loss_rpn_cls: 0.06876  loss_rpn_loc: 0.1081  time: 1.0474  data_time: 0.0204  lr: 0.02  max_mem: 9944M
[01/01 21:29:31] d2.utils.events INFO:  eta: 5:09:54  iter: 13459  total_loss: 0.427  loss_cls: 0.09023  loss_box_reg: 0.16  loss_rpn_cls: 0.07226  loss_rpn_loc: 0.1035  time: 1.0486  data_time: 0.0172  lr: 0.02  max_mem: 9944M
[01/01 21:30:09] d2.utils.events INFO:  eta: 5:09:57  iter: 13479  total_loss: 0.432  loss_cls: 0.09183  loss_box_reg: 0.1527  loss_rpn_cls: 0.07481  loss_rpn_loc: 0.1203  time: 1.0498  data_time: 0.0235  lr: 0.02  max_mem: 9944M
[01/01 21:30:47] d2.utils.events INFO:  eta: 5:09:45  iter: 13499  total_loss: 0.4646  loss_cls: 0.09656  loss_box_reg: 0.1621  loss_rpn_cls: 0.07675  loss_rpn_loc: 0.1253  time: 1.0511  data_time: 0.0197  lr: 0.02  max_mem: 9944M
[01/01 21:31:24] d2.utils.events INFO:  eta: 5:09:24  iter: 13519  total_loss: 0.4577  loss_cls: 0.09289  loss_box_reg: 0.1712  loss_rpn_cls: 0.07884  loss_rpn_loc: 0.1191  time: 1.0523  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 21:32:01] d2.utils.events INFO:  eta: 5:09:17  iter: 13539  total_loss: 0.4476  loss_cls: 0.08375  loss_box_reg: 0.1531  loss_rpn_cls: 0.07272  loss_rpn_loc: 0.1289  time: 1.0534  data_time: 0.0259  lr: 0.02  max_mem: 9944M
[01/01 21:32:37] d2.utils.events INFO:  eta: 5:09:04  iter: 13559  total_loss: 0.4289  loss_cls: 0.08598  loss_box_reg: 0.1472  loss_rpn_cls: 0.07247  loss_rpn_loc: 0.1056  time: 1.0546  data_time: 0.0248  lr: 0.02  max_mem: 9944M
[01/01 21:33:14] d2.utils.events INFO:  eta: 5:09:02  iter: 13579  total_loss: 0.4198  loss_cls: 0.08614  loss_box_reg: 0.1532  loss_rpn_cls: 0.07347  loss_rpn_loc: 0.107  time: 1.0557  data_time: 0.0224  lr: 0.02  max_mem: 9944M
[01/01 21:33:50] d2.utils.events INFO:  eta: 5:08:35  iter: 13599  total_loss: 0.3974  loss_cls: 0.07701  loss_box_reg: 0.1396  loss_rpn_cls: 0.07074  loss_rpn_loc: 0.106  time: 1.0568  data_time: 0.0249  lr: 0.02  max_mem: 9944M
[01/01 21:34:29] d2.utils.events INFO:  eta: 5:08:11  iter: 13619  total_loss: 0.4386  loss_cls: 0.09192  loss_box_reg: 0.1616  loss_rpn_cls: 0.07848  loss_rpn_loc: 0.1076  time: 1.0581  data_time: 0.0324  lr: 0.02  max_mem: 9944M
[01/01 21:35:08] d2.utils.events INFO:  eta: 5:07:54  iter: 13639  total_loss: 0.4502  loss_cls: 0.0862  loss_box_reg: 0.1637  loss_rpn_cls: 0.06952  loss_rpn_loc: 0.113  time: 1.0594  data_time: 0.0264  lr: 0.02  max_mem: 9944M
[01/01 21:35:46] d2.utils.events INFO:  eta: 5:07:35  iter: 13659  total_loss: 0.4488  loss_cls: 0.09173  loss_box_reg: 0.15  loss_rpn_cls: 0.07946  loss_rpn_loc: 0.1179  time: 1.0606  data_time: 0.0271  lr: 0.02  max_mem: 9944M
[01/01 21:36:23] d2.utils.events INFO:  eta: 5:07:13  iter: 13679  total_loss: 0.4459  loss_cls: 0.09269  loss_box_reg: 0.1691  loss_rpn_cls: 0.07398  loss_rpn_loc: 0.1292  time: 1.0618  data_time: 0.0290  lr: 0.02  max_mem: 9944M
[01/01 21:36:59] d2.utils.events INFO:  eta: 5:06:45  iter: 13699  total_loss: 0.4513  loss_cls: 0.09947  loss_box_reg: 0.1683  loss_rpn_cls: 0.07132  loss_rpn_loc: 0.09741  time: 1.0629  data_time: 0.0223  lr: 0.02  max_mem: 9944M
[01/01 21:37:38] d2.utils.events INFO:  eta: 5:06:23  iter: 13719  total_loss: 0.454  loss_cls: 0.08631  loss_box_reg: 0.1576  loss_rpn_cls: 0.07609  loss_rpn_loc: 0.1133  time: 1.0641  data_time: 0.0240  lr: 0.02  max_mem: 9944M
[01/01 21:38:21] d2.utils.events INFO:  eta: 5:05:53  iter: 13739  total_loss: 0.4076  loss_cls: 0.08586  loss_box_reg: 0.1387  loss_rpn_cls: 0.06484  loss_rpn_loc: 0.1227  time: 1.0657  data_time: 0.0232  lr: 0.02  max_mem: 9944M
[01/01 21:39:00] d2.utils.events INFO:  eta: 5:05:21  iter: 13759  total_loss: 0.4096  loss_cls: 0.08687  loss_box_reg: 0.1547  loss_rpn_cls: 0.07264  loss_rpn_loc: 0.1091  time: 1.0670  data_time: 0.0251  lr: 0.02  max_mem: 9944M
[01/01 21:39:38] d2.utils.events INFO:  eta: 5:05:03  iter: 13779  total_loss: 0.414  loss_cls: 0.07815  loss_box_reg: 0.1495  loss_rpn_cls: 0.06818  loss_rpn_loc: 0.1113  time: 1.0682  data_time: 0.0250  lr: 0.02  max_mem: 9944M
[01/01 21:40:14] d2.utils.events INFO:  eta: 5:04:22  iter: 13799  total_loss: 0.4263  loss_cls: 0.08856  loss_box_reg: 0.1517  loss_rpn_cls: 0.07046  loss_rpn_loc: 0.1114  time: 1.0692  data_time: 0.0183  lr: 0.02  max_mem: 9944M
[01/01 21:40:51] d2.utils.events INFO:  eta: 5:03:51  iter: 13819  total_loss: 0.4222  loss_cls: 0.08538  loss_box_reg: 0.1648  loss_rpn_cls: 0.06947  loss_rpn_loc: 0.1005  time: 1.0704  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 21:41:33] d2.utils.events INFO:  eta: 5:03:16  iter: 13839  total_loss: 0.4342  loss_cls: 0.09718  loss_box_reg: 0.1552  loss_rpn_cls: 0.08215  loss_rpn_loc: 0.1189  time: 1.0719  data_time: 0.0275  lr: 0.02  max_mem: 9944M
[01/01 21:42:15] d2.utils.events INFO:  eta: 5:02:41  iter: 13859  total_loss: 0.4567  loss_cls: 0.09067  loss_box_reg: 0.1615  loss_rpn_cls: 0.07277  loss_rpn_loc: 0.1349  time: 1.0734  data_time: 0.0313  lr: 0.02  max_mem: 9944M
[01/01 21:42:51] d2.utils.events INFO:  eta: 5:02:07  iter: 13879  total_loss: 0.4221  loss_cls: 0.08196  loss_box_reg: 0.143  loss_rpn_cls: 0.06851  loss_rpn_loc: 0.117  time: 1.0744  data_time: 0.0252  lr: 0.02  max_mem: 9944M
[01/01 21:43:27] d2.utils.events INFO:  eta: 5:01:44  iter: 13899  total_loss: 0.4284  loss_cls: 0.08385  loss_box_reg: 0.1349  loss_rpn_cls: 0.07498  loss_rpn_loc: 0.1181  time: 1.0754  data_time: 0.0348  lr: 0.02  max_mem: 9944M
[01/01 21:44:05] d2.utils.events INFO:  eta: 5:01:03  iter: 13919  total_loss: 0.4175  loss_cls: 0.08932  loss_box_reg: 0.1558  loss_rpn_cls: 0.06954  loss_rpn_loc: 0.1193  time: 1.0766  data_time: 0.0278  lr: 0.02  max_mem: 9944M
[01/01 21:44:42] d2.utils.events INFO:  eta: 5:00:48  iter: 13939  total_loss: 0.4156  loss_cls: 0.07432  loss_box_reg: 0.1388  loss_rpn_cls: 0.06737  loss_rpn_loc: 0.124  time: 1.0777  data_time: 0.0315  lr: 0.02  max_mem: 9944M
[01/01 21:45:18] d2.utils.events INFO:  eta: 4:59:55  iter: 13959  total_loss: 0.4181  loss_cls: 0.09007  loss_box_reg: 0.1515  loss_rpn_cls: 0.07285  loss_rpn_loc: 0.1115  time: 1.0787  data_time: 0.0194  lr: 0.02  max_mem: 9944M
[01/01 21:45:54] d2.utils.events INFO:  eta: 4:59:55  iter: 13979  total_loss: 0.4258  loss_cls: 0.08929  loss_box_reg: 0.1512  loss_rpn_cls: 0.07073  loss_rpn_loc: 0.1114  time: 1.0798  data_time: 0.0278  lr: 0.02  max_mem: 9944M
[01/01 21:46:45] d2.utils.events INFO:  eta: 4:59:30  iter: 13999  total_loss: 0.4145  loss_cls: 0.0782  loss_box_reg: 0.1391  loss_rpn_cls: 0.06762  loss_rpn_loc: 0.1143  time: 1.0818  data_time: 0.0344  lr: 0.02  max_mem: 9944M
[01/01 21:47:48] d2.utils.events INFO:  eta: 4:58:57  iter: 14019  total_loss: 0.3823  loss_cls: 0.07428  loss_box_reg: 0.1464  loss_rpn_cls: 0.06856  loss_rpn_loc: 0.1055  time: 1.0848  data_time: 0.0530  lr: 0.02  max_mem: 9944M
[01/01 21:48:30] d2.utils.events INFO:  eta: 4:58:28  iter: 14039  total_loss: 0.4017  loss_cls: 0.08344  loss_box_reg: 0.1411  loss_rpn_cls: 0.06997  loss_rpn_loc: 0.09636  time: 1.0863  data_time: 0.0304  lr: 0.02  max_mem: 9944M
[01/01 21:49:06] d2.utils.events INFO:  eta: 4:57:54  iter: 14059  total_loss: 0.4476  loss_cls: 0.08737  loss_box_reg: 0.1577  loss_rpn_cls: 0.07314  loss_rpn_loc: 0.1138  time: 1.0873  data_time: 0.0234  lr: 0.02  max_mem: 9944M
[01/01 21:49:41] d2.utils.events INFO:  eta: 4:57:06  iter: 14079  total_loss: 0.4314  loss_cls: 0.08669  loss_box_reg: 0.1511  loss_rpn_cls: 0.07171  loss_rpn_loc: 0.1134  time: 1.0882  data_time: 0.0272  lr: 0.02  max_mem: 9944M
[01/01 21:50:16] d2.utils.events INFO:  eta: 4:56:08  iter: 14099  total_loss: 0.472  loss_cls: 0.09698  loss_box_reg: 0.1665  loss_rpn_cls: 0.07239  loss_rpn_loc: 0.1283  time: 1.0891  data_time: 0.0302  lr: 0.02  max_mem: 9944M
[01/01 21:50:53] d2.utils.events INFO:  eta: 4:55:27  iter: 14119  total_loss: 0.373  loss_cls: 0.08619  loss_box_reg: 0.1372  loss_rpn_cls: 0.06743  loss_rpn_loc: 0.1016  time: 1.0902  data_time: 0.0258  lr: 0.02  max_mem: 9944M
[01/01 21:51:30] d2.utils.events INFO:  eta: 4:55:03  iter: 14139  total_loss: 0.4578  loss_cls: 0.08956  loss_box_reg: 0.1609  loss_rpn_cls: 0.0728  loss_rpn_loc: 0.1239  time: 1.0913  data_time: 0.0255  lr: 0.02  max_mem: 9944M
[01/01 21:52:09] d2.utils.events INFO:  eta: 4:54:36  iter: 14159  total_loss: 0.4359  loss_cls: 0.09367  loss_box_reg: 0.1609  loss_rpn_cls: 0.06584  loss_rpn_loc: 0.111  time: 1.0925  data_time: 0.0238  lr: 0.02  max_mem: 9944M
[01/01 21:52:55] d2.utils.events INFO:  eta: 4:54:05  iter: 14179  total_loss: 0.3994  loss_cls: 0.08375  loss_box_reg: 0.1484  loss_rpn_cls: 0.0667  loss_rpn_loc: 0.1008  time: 1.0942  data_time: 0.0211  lr: 0.02  max_mem: 9944M
[01/01 21:53:38] d2.utils.events INFO:  eta: 4:53:34  iter: 14199  total_loss: 0.3659  loss_cls: 0.07469  loss_box_reg: 0.1229  loss_rpn_cls: 0.06089  loss_rpn_loc: 0.1081  time: 1.0957  data_time: 0.0371  lr: 0.02  max_mem: 9944M
[01/01 21:54:23] d2.utils.events INFO:  eta: 4:53:00  iter: 14219  total_loss: 0.4272  loss_cls: 0.0899  loss_box_reg: 0.1657  loss_rpn_cls: 0.07146  loss_rpn_loc: 0.109  time: 1.0972  data_time: 0.0423  lr: 0.02  max_mem: 9944M
[01/01 21:55:01] d2.utils.events INFO:  eta: 4:52:28  iter: 14239  total_loss: 0.4188  loss_cls: 0.08107  loss_box_reg: 0.1332  loss_rpn_cls: 0.07743  loss_rpn_loc: 0.112  time: 1.0984  data_time: 0.0309  lr: 0.02  max_mem: 9944M
[01/01 21:55:42] d2.utils.events INFO:  eta: 4:51:59  iter: 14259  total_loss: 0.427  loss_cls: 0.08224  loss_box_reg: 0.1421  loss_rpn_cls: 0.08206  loss_rpn_loc: 0.1157  time: 1.0997  data_time: 0.0275  lr: 0.02  max_mem: 9944M
[01/01 21:56:26] d2.utils.events INFO:  eta: 4:51:35  iter: 14279  total_loss: 0.4358  loss_cls: 0.08431  loss_box_reg: 0.1541  loss_rpn_cls: 0.06916  loss_rpn_loc: 0.1176  time: 1.1012  data_time: 0.0273  lr: 0.02  max_mem: 9944M
[01/01 21:57:11] d2.utils.events INFO:  eta: 4:50:59  iter: 14299  total_loss: 0.4677  loss_cls: 0.08362  loss_box_reg: 0.1719  loss_rpn_cls: 0.07422  loss_rpn_loc: 0.1152  time: 1.1028  data_time: 0.0237  lr: 0.02  max_mem: 9944M
[01/01 21:57:55] d2.utils.events INFO:  eta: 4:50:26  iter: 14319  total_loss: 0.4377  loss_cls: 0.07804  loss_box_reg: 0.1519  loss_rpn_cls: 0.08092  loss_rpn_loc: 0.1073  time: 1.1043  data_time: 0.0289  lr: 0.02  max_mem: 9944M
[01/01 22:00:28] d2.utils.events INFO:  eta: 4:49:59  iter: 14339  total_loss: 0.4348  loss_cls: 0.08591  loss_box_reg: 0.1619  loss_rpn_cls: 0.06337  loss_rpn_loc: 0.1079  time: 1.1135  data_time: 0.0344  lr: 0.02  max_mem: 9944M
[01/01 22:01:05] d2.utils.events INFO:  eta: 4:49:22  iter: 14359  total_loss: 0.469  loss_cls: 0.08812  loss_box_reg: 0.1554  loss_rpn_cls: 0.08397  loss_rpn_loc: 0.1257  time: 1.1145  data_time: 0.0338  lr: 0.02  max_mem: 9944M
[01/01 22:01:48] d2.utils.events INFO:  eta: 4:48:44  iter: 14379  total_loss: 0.4145  loss_cls: 0.07518  loss_box_reg: 0.138  loss_rpn_cls: 0.07064  loss_rpn_loc: 0.1126  time: 1.1160  data_time: 0.0200  lr: 0.02  max_mem: 9944M
[01/01 22:02:39] d2.utils.events INFO:  eta: 4:48:04  iter: 14399  total_loss: 0.4094  loss_cls: 0.08996  loss_box_reg: 0.1433  loss_rpn_cls: 0.0673  loss_rpn_loc: 0.1116  time: 1.1179  data_time: 0.0169  lr: 0.02  max_mem: 9944M
[01/01 22:03:40] d2.utils.events INFO:  eta: 4:47:23  iter: 14419  total_loss: 0.4326  loss_cls: 0.08687  loss_box_reg: 0.1542  loss_rpn_cls: 0.07252  loss_rpn_loc: 0.1283  time: 1.1206  data_time: 0.0283  lr: 0.02  max_mem: 9944M
[01/01 22:04:14] d2.utils.events INFO:  eta: 4:46:46  iter: 14439  total_loss: 0.4841  loss_cls: 0.09331  loss_box_reg: 0.1624  loss_rpn_cls: 0.08781  loss_rpn_loc: 0.1254  time: 1.1214  data_time: 0.0418  lr: 0.02  max_mem: 9944M
[01/01 22:04:54] d2.utils.events INFO:  eta: 4:46:10  iter: 14459  total_loss: 0.4221  loss_cls: 0.08586  loss_box_reg: 0.1537  loss_rpn_cls: 0.07831  loss_rpn_loc: 0.09625  time: 1.1226  data_time: 0.0278  lr: 0.02  max_mem: 9944M
[01/01 22:05:38] d2.utils.events INFO:  eta: 4:45:26  iter: 14479  total_loss: 0.4026  loss_cls: 0.08492  loss_box_reg: 0.139  loss_rpn_cls: 0.07543  loss_rpn_loc: 0.1117  time: 1.1241  data_time: 0.0347  lr: 0.02  max_mem: 9944M
[01/01 22:06:17] d2.utils.events INFO:  eta: 4:44:34  iter: 14499  total_loss: 0.4169  loss_cls: 0.08178  loss_box_reg: 0.141  loss_rpn_cls: 0.06948  loss_rpn_loc: 0.1171  time: 1.1252  data_time: 0.0244  lr: 0.02  max_mem: 9944M
[01/01 22:07:18] d2.utils.events INFO:  eta: 4:43:41  iter: 14519  total_loss: 0.4093  loss_cls: 0.0824  loss_box_reg: 0.1435  loss_rpn_cls: 0.06592  loss_rpn_loc: 0.1073  time: 1.1278  data_time: 0.0463  lr: 0.02  max_mem: 9944M
